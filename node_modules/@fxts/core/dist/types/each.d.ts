import IterableInfer from "./types/IterableInfer";
import ReturnValueType from "./types/ReturnValueType";
/**
 * Iterates over Iterable/AsyncIterable, applying each in turn to `f`.
 *
 * @example
 * ```ts
 * each(console.log, [1, 2, 3]); // log 1, 2, 3
 * ```
 *
 * {@link https://codesandbox.io/s/fxts-each-kvz6w | Try It}
 */
declare function each<A, B = unknown>(f: (a: A) => B, iterable: Iterable<A>): void;
declare function each<A, B = unknown>(f: (a: A) => B, iterable: AsyncIterable<A>): Promise<void>;
declare function each<A extends Iterable<unknown> | AsyncIterable<unknown>, B = unknown>(f: (a: IterableInfer<A>) => B): (iterable: A) => ReturnValueType<A, void>;
export default each;
//# sourceMappingURL=each.d.ts.map