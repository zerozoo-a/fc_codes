import ReturnIterableIteratorType from "../types/ReturnIterableIteratorType";
/**
 * Returns Iterable/AsyncIterable of the given elements in reverse order.
 * Note:Evaluates all Iterable, except for array, and returns a lazy-reversed iterator.
 *
 * @example
 * ```ts
 * const iter1 = reverse([1, 2, 3]);
 * iter1.next(); // {value: 3, done: false}
 * iter1.next(); // {value: 2, done: false}
 * iter1.next(); // {value: 1, done: false}
 * iter1.next(); // {value: undefined, done: true}
 *
 * const iter2 = reverse("abc");
 * iter2.next(); // {value: "c", done: false}
 * iter2.next(); // {value: "b", done: false}
 * iter2.next(); // {value: "a", done: false}
 * iter2.next(); // {value: undefined, done: true}
 *
 * // with pipe
 * pipe(
 *  [1, 2, 3, 4, 5],
 *  reverse,
 *  toArray,
 * ); // [5, 4, 3, 2, 1]
 *
 * pipe(
 *  "abcde",
 *  reverse,
 *  toArray,
 * ); // "edcba"
 * ```
 *
 * see {@link https://fxts.dev/docs/pipe | pipe} {@link https://fxts.dev/docs/toArray | toArray}
 */
declare function reverse<T extends Iterable<unknown> | AsyncIterable<unknown>>(iterable: T): ReturnIterableIteratorType<T>;
export default reverse;
//# sourceMappingURL=reverse.d.ts.map