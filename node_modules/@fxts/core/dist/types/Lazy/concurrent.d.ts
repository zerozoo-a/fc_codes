export declare class Concurrent {
    length: number;
    constructor(length: number);
    static of(length: number): Concurrent;
}
export declare const isConcurrent: (concurrent: unknown) => concurrent is Concurrent;
/**
 * Concurrent is used to balance the load of multiple asynchronous requests.
 * The first argument receives a number that controls the number of loads, and the second argument is an AsyncIterable.
 * See {@link https://fxts.dev/docs/toAsync | toAsync} to create an AsyncIterable .
 *
 * @example
 * ```ts
 * await pipe(
 *   [1, 2, 3, 4, 5, 6],
 *   toAsync,
 *   map((a) => delay(1000, a)),
 *   concurrent(3),
 *   each(console.log), // log 1, 2, 3, 4, 5, 6
 * ); // 2 seconds
 *
 * // evaluation
 * //              ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐
 * //              │  1  │──│  2  │──│  3  │──│  4  │──│  5  │──│  6  │
 * //              └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘
 * //      map        │        │        │        │        │        │
 * // concurrent(3)  (1)      (1)      (1)      (2)      (2)      (2)
 * //                 │        │        │        │        │        │
 * //                 ▼        ▼        ▼        ▼        ▼        ▼
 *
 * await pipe(
 *   [1, 2, 3, 4, 5, 6],
 *   toAsync,
 *   map((a) => delay(1000, a)),
 *   each(console.log), // log 1, 2, 3, 4, 5, 6
 * ); // 6 seconds
 *
 * // evaluation
 * //              ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐
 * //              │  1  │──│  2  │──│  3  │──│  4  │──│  5  │──│  6  │
 * //              └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘
 * //      map        │        │        │        │        │        │
 * //                (1)      (2)      (3)      (4)      (5)      (6)
 * //                 │        │        │        │        │        │
 * //                 ▼        ▼        ▼        ▼        ▼        ▼
 * ```
 *
 * {@link https://codesandbox.io/s/fxts-concurrent-4x58c | Try It}
 *
 * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync}, {@link https://fxts.dev/docs/toArray | toArray}
 * {@link https://fxts.dev/docs/each | each}, {@link https://fxts.dev/docs/map | map}
 */
declare function concurrent<A>(length: number, iterable: AsyncIterable<A>): AsyncIterableIterator<A>;
declare function concurrent<A>(length: number, iterable?: AsyncIterable<A>): (iterable: AsyncIterable<A>) => AsyncIterableIterator<A>;
export default concurrent;
//# sourceMappingURL=concurrent.d.ts.map