import IterableInfer from "../types/IterableInfer";
import ReturnIterableIteratorType from "../types/ReturnIterableIteratorType";
/**
 * Returns Iterable/AsyncIterable that taken values as long as each value satisfies the give `f`.
 *
 * @example
 * ```ts
 * const iter = takeWhile(a => a < 3, [1, 2, 3, 4, 5, 6]);
 * iter.next() // {done:false, value: 1}
 * iter.next() // {done:false, value: 2}
 * iter.next() // {done:true, value: undefined}
 *
 * // with pipe
 * pipe(
 *  [1, 2, 3, 4, 5, 6],
 *  takeWhile(a => a < 3),
 *  toArray,
 * ); // [1, 2]
 *
 * await pipe(
 *  Promise.resolve([1, 2, 3, 4, 5, 6]),
 *  takeWhile(a => a < 3),
 *  toArray,
 * ); // [1, 2]
 *
 * // if you want to use asynchronous callback
 * await pipe(
 *  Promise.resolve([1, 2, 3, 4, 5, 6]),
 *  toAsync,
 *  takeWhile(async (a) => a < 3),
 *  toArray,
 * ); // [1, 2]
 *
 * // with toAsync
 * await pipe(
 *  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3),
 * Promise.resolve(4), Promise.resolve(5), Promise.resolve(6)],
 *  toAsync,
 *  takeWhile(a => a < 3),
 *  toArray,
 * ); // [1, 2]
 *
 * ```
 *
 * {@link https://codesandbox.io/s/fxts-takewhile-e6gqt | Try It}
 *
 * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},
 * {@link https://fxts.dev/docs/toArray | toArray}
 */
declare function takeWhile<A, B>(f: (a: A) => B, iterable: Iterable<A>): IterableIterator<A>;
declare function takeWhile<A, B>(f: (a: A) => B, iterable: AsyncIterable<A>): AsyncIterableIterator<A>;
declare function takeWhile<A extends Iterable<unknown> | AsyncIterable<unknown>, B>(f: (a: IterableInfer<A>) => B): (iterable: A) => ReturnIterableIteratorType<A>;
export default takeWhile;
//# sourceMappingURL=takeWhile.d.ts.map