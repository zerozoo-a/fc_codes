import Length from "./Length";
import Cast from "./Cast";
import Drop from "./Drop";
declare type CleanGaps<O extends any[]> = {
    [K in keyof O]: NonNullable<O[K]>;
};
declare type Gaps<L extends any[]> = Cast<CleanGaps<{
    [K in keyof L]?: L[K];
}>, any[]>;
declare type Curry<F extends (...args: any[]) => any> = <T extends any[], G = Drop<Length<T>, Parameters<F>>>(...args: Cast<T, Gaps<Parameters<F>>>) => G extends [any, ...any[]] ? Curry<(...args: G) => ReturnType<F>> : ReturnType<F>;
export default Curry;
//# sourceMappingURL=Curry.d.ts.map