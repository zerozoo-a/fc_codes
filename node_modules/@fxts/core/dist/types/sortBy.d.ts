import IterableInfer from "./types/IterableInfer";
import ReturnValueType from "./types/ReturnValueType";
/**
 * Returns an array which sorted according to the `f`.
 *
 * @example
 * ```ts
 * sortBy(a => a, [3, 4, 1, 2, 5, 2]);
 * // [1, 2, 2, 3, 4, 5]
 * sortBy((a) => a.id, [{id:4,name:'foo'}, {id:2,name:'bar'},{id:3, name:'lee'}]);
 * // [{id:2,name:'bar'}, {id:3, name:'lee'}, {id:4,name:'foo'}]
 * ```
 */
declare function sortBy(f: (a: any) => unknown, iterable: readonly []): any[];
declare function sortBy<T>(f: (a: T) => unknown, iterable: Iterable<T>): T[];
declare function sortBy<T>(f: (a: T) => unknown, iterable: AsyncIterable<T>): Promise<T[]>;
declare function sortBy<T extends Iterable<unknown> | AsyncIterable<unknown>>(f: (a: IterableInfer<T>) => unknown): (iterable: T) => ReturnValueType<T, IterableInfer<T>[]>;
export default sortBy;
//# sourceMappingURL=sortBy.d.ts.map