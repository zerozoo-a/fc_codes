declare type LastReturnType<T> = T extends readonly [...rest: any[], a: infer L] ? L : T extends readonly never[] ? undefined : T extends AsyncIterable<infer U> ? Promise<U | undefined> : T extends Iterable<infer U> ? U | undefined : never;
/**
 * Returns the last element of Iterable/AsyncIterable
 *
 * @example
 * ```ts
 * last([1, 2, 3, 4, 5]); // 5
 *
 * // with pipe
 * pipe(
 *  [1, 2, 3, 4, 5],
 *  last,
 * ); // 5
 *
 * await pipe(
 *  Promise.resolve([1, 2, 3, 4, 5]),
 *  last,
 * ); // 5
 *
 * // with toAsync
 * await pipe(
 *  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)],
 *  toAsync,
 *  last,
 * ); // 3
 * ```
 *
 * {@link https://codesandbox.io/s/fxts-last-zbvq8 | Try It}
 *
 * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync}
 */
declare function last<T extends Iterable<unknown> | AsyncIterable<unknown>>(iterable: T): LastReturnType<T>;
export default last;
//# sourceMappingURL=last.d.ts.map