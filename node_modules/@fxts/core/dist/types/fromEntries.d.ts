import IterableInfer from "./types/IterableInfer";
import Key from "./types/Key";
import ReturnValueType from "./types/ReturnValueType";
/**
 * Returns an object from string keyed-value pairs.
 *
 * @example
 * ```ts
 * const arr = [
 *     ["a", 1],
 *     ["b", true],
 *     ["c", "hello"],
 *     ["d", { d1: 1, d2: 3 }],
 * ] as (
 *     | ["a", number]
 *     | ["b", boolean]
 *     | ["c", string]
 *     | ["d", { d1: number, d2: number; }]
 * )[];
 * fromEntries(arr); // { a: 1, b: true, c: 'hello', d: { d1: 1, d2: 3 } }
 * ```
 *
 *
 * see {@link https://fxts.dev/docs/entries | entries}
 */
declare function fromEntries<U extends [Key, any] | readonly [Key, any], T extends Iterable<U> | AsyncIterable<U>>(iterable: T): ReturnValueType<T, {
    [K in IterableInfer<T> as K[0]]: K[1];
}>;
export default fromEntries;
//# sourceMappingURL=fromEntries.d.ts.map