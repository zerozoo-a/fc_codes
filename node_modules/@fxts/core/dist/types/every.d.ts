import IterableInfer from "./types/IterableInfer";
import ReturnValueType from "./types/ReturnValueType";
import Arrow from "./types/Arrow";
/**
 * Returns true if all of the values in Iterable/AsyncIterable pass the `f` truth test.
 *
 * @example
 * ```ts
 * every((a) => a % 2 === 0, [2, 4, 6, 8, 10]);
 * // true
 *
 * every((a) => a % 2 === 0, [2, 4, 6, 7, 10]);
 * // false
 * ```
 *
 * {@link https://codesandbox.io/s/fxts-every-g91dh | Try It}
 */
declare function every<A extends readonly []>(f: Arrow, iterable: A): true;
declare function every<A, B = unknown>(f: (a: A) => B, iterable: Iterable<A>): boolean;
declare function every<A, B = unknown>(f: (a: A) => B, iterable: AsyncIterable<A>): Promise<boolean>;
declare function every<A extends Iterable<unknown> | AsyncIterable<unknown>, B = unknown>(f: (a: IterableInfer<A>) => B): (a: A) => ReturnValueType<A, boolean>;
export default every;
//# sourceMappingURL=every.d.ts.map