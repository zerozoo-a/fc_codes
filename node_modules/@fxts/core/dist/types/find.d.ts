import ReturnValueType from "./types/ReturnValueType";
import IterableInfer from "./types/IterableInfer";
/**
 * Looks through each value in Iterable/AsyncIterable, returning the first one that passes a truth test `f`,
 * or `undefined` if no value passes the test.
 *
 * @example
 * ```ts
 * find((a) => a === 2, [1, 2, 3, 4]); // 2
 *
 * find((a) => a === "r", "marpple"); // 'r'
 * ```
 *
 * {@link https://codesandbox.io/s/fxts-find-uhl0o | Try It}
 */
declare function find<T>(f: (a: T) => unknown, iterable: Iterable<T>): T | undefined;
declare function find<T>(f: (a: T) => unknown, iterable: AsyncIterable<T>): Promise<T | undefined>;
declare function find<T extends Iterable<unknown> | AsyncIterable<unknown>>(f: (a: IterableInfer<T>) => unknown, iterable?: T): (iterable: T) => ReturnValueType<T, IterableInfer<T> | undefined>;
export default find;
//# sourceMappingURL=find.d.ts.map