{"version":3,"file":"toArray.js","sourceRoot":"","sources":["../../src/toArray.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAEhE,KAAK,UAAU,KAAK,CAAI,QAA0B;IAChD,MAAM,GAAG,GAAQ,EAAE,CAAC;IACpB,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,QAAQ,EAAE;QACjC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAChB;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAwDD,SAAS,OAAO,CAAI,IAAoC;IACtD,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE;QACzB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC;KACpB;SAAM,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;QAC3B,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzB;SAAM;QACL,OAAO,EAAS,CAAC;KAClB;AACH,CAAC;AAED,eAAe,OAAO,CAAC","sourcesContent":["import ReturnArrayType from \"./types/ReturnArrayType\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\n\nasync function async<A>(iterable: AsyncIterable<A>): Promise<A[]> {\n  const res: A[] = [];\n  for await (const item of iterable) {\n    res.push(item);\n  }\n  return res;\n}\n\n/**\n * Takes item from Iterable/AsyncIterable and returns an array.\n * It is recommended to use {@link https://fxts.dev/docs/pipe | pipe} together.\n *\n * @example\n * ```ts\n * pipe(\n *  [1, 2, 3, 4, 5],\n *  map(a => a + 10),\n *  filter(a => a % 2 === 0),\n *  toArray,\n * ); // [12, 14]\n *\n * await pipe(\n *  Promise.resolve([1, 2, 3, 4, 5]),\n *  map(a => a + 10),\n *  filter(a => a % 2 === 0),\n *  toArray,\n * ); // [12, 14]\n *\n * // if you want to use asynchronous callback\n * await pipe(\n *  Promise.resolve([1, 2, 3, 4, 5]),\n *  toAsync,\n *  map(async (a) => a + 10),\n *  filter(a => a % 2 === 0),\n *  toArray,\n * ); // [12, 14]\n *\n * // with toAsync\n * await pipe(\n *  [\n *    Promise.resolve(1),\n *    Promise.resolve(2),\n *    Promise.resolve(3),\n *    Promise.resolve(4),\n *    Promise.resolve(5)\n *  ],\n *  toAsync,\n *  map((a) => a + 10),\n *  filter((a) => a % 2 === 0),\n *  toArray\n *);\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-toarray-fy84i | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/map | map}, {@link https://fxts.dev/docs/filter | filter}\n */\nfunction toArray<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  iter: A,\n): ReturnArrayType<A>;\n\nfunction toArray<A>(iter: AsyncIterable<A> | Iterable<A>) {\n  if (isAsyncIterable(iter)) {\n    return async(iter);\n  } else if (isIterable(iter)) {\n    return Array.from(iter);\n  } else {\n    return [] as A[];\n  }\n}\n\nexport default toArray;\n"]}