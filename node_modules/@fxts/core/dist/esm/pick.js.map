{"version":3,"file":"pick.js","sourceRoot":"","sources":["../../src/pick.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAChE,OAAO,OAAO,MAAM,WAAW,CAAC;AAEhC,SAAS,KAAK,CAAI,GAAM,EAAE,IAAkB;IAC1C,OAAO,MAAM,CAAC,WAAW,CACvB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAY,CAAC,CAAC,CAC5D,CAAC;AACJ,CAAC;AAED,SAAS,IAAI,CACX,QAAW,EACX,GAAM;IAEN,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,OAAO,KAAK,CAAC,GAAG,EAAE,IAAI,CAA8B,CAAC;AACvD,CAAC;AAED,KAAK,UAAU,KAAK,CAClB,QAAW,EACX,GAAM;IAEN,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC9C,OAAO,KAAK,CAAC,GAAG,EAAE,IAAI,CAA8B,CAAC;AACvD,CAAC;AAyDD,SAAS,IAAI,CAIX,QAAW,EACX,GAAO;IAOP,IAAI,GAAG,KAAK,SAAS,EAAE;QACrB,OAAO,CAAC,GAAM,EAAE,EAAE,CAAC,IAAI,CAAC,QAAe,EAAE,GAAG,CAAQ,CAAC;KACtD;IACD,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;KAC5B;SAAM,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;QACpC,OAAO,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;KAC7B;IACD,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,IAAI,CAAC","sourcesContent":["import IterableInfer from \"./types/IterableInfer\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\nimport toArray from \"./toArray\";\n\nfunction inner<T>(obj: T, keys: Set<keyof T>) {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([k]) => keys.has(k as keyof T)),\n  );\n}\n\nfunction sync<T extends object, U extends Iterable<keyof T>>(\n  iterable: U,\n  obj: T,\n): Pick<T, IterableInfer<U>> {\n  const keys = new Set(iterable);\n  return inner(obj, keys) as Pick<T, IterableInfer<U>>;\n}\n\nasync function async<T extends object, U extends AsyncIterable<keyof T>>(\n  iterable: U,\n  obj: T,\n): Promise<Pick<T, IterableInfer<U>>> {\n  const keys = new Set(await toArray(iterable));\n  return inner(obj, keys) as Pick<T, IterableInfer<U>>;\n}\n\n/**\n * Returns a partial copy of an object containing given keys.\n *\n * @example\n * ```ts\n * const person = {\n *   name: \"james\",\n *   age: 40,\n *   numberOfKids: 2,\n *   team: \"Software Development\",\n *   preferredLanguage: \"Rust\",\n * };\n *\n * const dad = pick([\"name\", \"age\", \"numberOfKids\"], person);\n * // { name: \"james\", age: 40, numberOfKids: 2 }\n *\n * const developer = pick([\"name\", \"team\", \"preferredLanguage\"], person);\n * // { name: \"james\", team: \"Software Development\", preferredLanguage: \"Rust\" }\n *\n * // with pipe\n * pipe(\n *  person,\n *  pick([\"name\", \"age\", \"numberOfKids\"]),\n * );\n *\n * // if you want to use AsyncIterable as the list of property names\n * const anonymousDeveloper = await pick(toAsync([\"preferredLanguage\"] as const), person);\n * ```\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/omit | omit},\n */\n\nfunction pick<T extends object, U extends readonly []>(\n  iterable: U,\n  obj: T,\n): Record<string, never>;\n\nfunction pick<T extends object, U extends Iterable<keyof T>>(\n  iterable: U,\n  obj: T,\n): Pick<T, IterableInfer<U>>;\n\nfunction pick<T extends object, U extends AsyncIterable<keyof T>>(\n  iterable: U,\n  obj: T,\n): Promise<Pick<T, IterableInfer<U>>>;\n\nfunction pick<T extends object, U extends Iterable<keyof T>>(\n  iterable: U,\n): (obj: T) => Pick<T, IterableInfer<U>>;\n\nfunction pick<T extends object, U extends AsyncIterable<keyof T>>(\n  iterable: U,\n): (obj: T) => Promise<Pick<T, IterableInfer<U>>>;\n\nfunction pick<\n  T extends object,\n  U extends AsyncIterable<keyof T> | Iterable<keyof T>,\n>(\n  iterable: U,\n  obj?: T,\n):\n  | Promise<Pick<T, IterableInfer<U>>>\n  | Pick<T, IterableInfer<U>>\n  | ((\n      obj: T,\n    ) => Promise<Pick<T, IterableInfer<U>>> | Pick<T, IterableInfer<U>>) {\n  if (obj === undefined) {\n    return (obj: T) => pick(iterable as any, obj) as any;\n  }\n  if (isIterable(iterable)) {\n    return sync(iterable, obj);\n  } else if (isAsyncIterable(iterable)) {\n    return async(iterable, obj);\n  }\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default pick;\n"]}