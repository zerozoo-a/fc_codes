import { isAsyncIterable, isIterable } from "./_internal/utils.js";
import range from "./Lazy/range.js";
function sync(iterable, n) {
    const iterator = iterable[Symbol.iterator]();
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    for (const _ of range(0, n)) {
        if (iterator.next().done) {
            return;
        }
    }
}
async function async(iterable, n) {
    const iterator = iterable[Symbol.asyncIterator]();
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    for await (const _ of range(0, n)) {
        if ((await iterator.next()).done) {
            return;
        }
    }
}
function consume(iterable, n = Infinity) {
    if (isIterable(iterable)) {
        return sync(iterable, n);
    }
    if (isAsyncIterable(iterable)) {
        return async(iterable, n);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default consume;
//# sourceMappingURL=consume.js.map