{"version":3,"file":"apply.js","sourceRoot":"","sources":["../../src/apply.ts"],"names":[],"mappings":"AA2BA,SAAS,KAAK,CACZ,CAAI,EACJ,IAAQ;IAIR,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;KAC7B;SAAM;QACL,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;KACnB;AACH,CAAC;AAED,eAAe,KAAK,CAAC","sourcesContent":["import Arrow from \"./types/Arrow\";\n\n/**\n * Applies function `f` to the argument list `args`.\n *\n * @example\n * ```ts\n * apply(Math.max, [1, 2, 3, 4, 5]); // 5\n *\n * pipe(\n *   repeat(10),\n *   map(a => a * Math.random())\n *   take(5),\n *   apply(max)\n * );\n * ```\n */\n\nfunction apply<F extends Arrow, T extends Parameters<F>>(\n  f: F,\n): (args: T) => ReturnType<typeof f>;\n\nfunction apply<F extends Arrow, T extends Parameters<F>>(\n  f: F,\n  args: T,\n): ReturnType<typeof f>;\n\nfunction apply<F extends Arrow, T extends Parameters<F>>(\n  f: F,\n  args?: T,\n):\n  | ReturnType<typeof f>\n  | ((args: Parameters<typeof f>) => ReturnType<typeof f>) {\n  if (args === undefined) {\n    return (args) => f(...args);\n  } else {\n    return f(...args);\n  }\n}\n\nexport default apply;\n"]}