import { isAsyncIterable, isIterable, isPromise } from "./_internal/utils.js";
import { AsyncFunctionException } from "./_internal/error.js";
import reduce from "./reduce.js";
function incSel(parent, k) {
    parent[k] ? parent[k]++ : (parent[k] = 1);
    return parent;
}
function countBy(f, iterable) {
    if (iterable === undefined) {
        return (iterable) => {
            return countBy(f, iterable);
        };
    }
    const obj = {};
    if (isIterable(iterable)) {
        return reduce((group, a) => {
            const key = f(a);
            if (isPromise(key)) {
                throw new AsyncFunctionException();
            }
            return incSel(group, key);
        }, obj, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return reduce(async (group, a) => {
            const key = await f(a);
            return incSel(group, key);
        }, obj, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default countBy;
//# sourceMappingURL=countBy.js.map