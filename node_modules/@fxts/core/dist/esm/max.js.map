{"version":3,"file":"max.js","sourceRoot":"","sources":["../../src/max.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAEhE,SAAS,IAAI,CAAC,QAA0B;IACtC,IAAI,CAAC,GAAG,GAAG,CAAC;IACZ,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;QACxB,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACnB,OAAO,CAAC,CAAC;SACV;aAAM,IAAI,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACnC,CAAC,GAAG,CAAC,CAAC;SACP;KACF;IAED,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;QACnB,OAAO,CAAC,QAAQ,CAAC;KAClB;IAED,OAAO,CAAC,CAAC;AACX,CAAC;AAED,KAAK,UAAU,KAAK,CAAC,QAA+B;IAClD,IAAI,CAAC,GAAG,GAAG,CAAC;IACZ,IAAI,KAAK,EAAE,MAAM,CAAC,IAAI,QAAQ,EAAE;QAC9B,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACnB,OAAO,CAAC,CAAC;SACV;aAAM,IAAI,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACnC,CAAC,GAAG,CAAC,CAAC;SACP;KACF;IAED,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;QACnB,OAAO,CAAC,QAAQ,CAAC;KAClB;IAED,OAAO,CAAC,CAAC;AACX,CAAC;AAiBD,SAAS,GAAG,CAAC,QAAkD;IAC7D,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC;KACvB;SAAM,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;QACpC,OAAO,KAAK,CAAC,QAAQ,CAAC,CAAC;KACxB;IACD,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,GAAG,CAAC","sourcesContent":["import ReturnValueType from \"./types/ReturnValueType\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\n\nfunction sync(iterable: Iterable<number>) {\n  let n = NaN;\n  for (const a of iterable) {\n    if (Number.isNaN(a)) {\n      return a;\n    } else if (a > n || Number.isNaN(n)) {\n      n = a;\n    }\n  }\n\n  if (Number.isNaN(n)) {\n    return -Infinity;\n  }\n\n  return n;\n}\n\nasync function async(iterable: AsyncIterable<number>) {\n  let n = NaN;\n  for await (const a of iterable) {\n    if (Number.isNaN(a)) {\n      return a;\n    } else if (a > n || Number.isNaN(n)) {\n      n = a;\n    }\n  }\n\n  if (Number.isNaN(n)) {\n    return -Infinity;\n  }\n\n  return n;\n}\n\n/**\n * Returns the largest of the given iterable/AsyncIterable\n *\n * @example\n * ```ts\n * max([1, 3, 5]); // 5;\n * max([1, NaN, 2]); // NaN;\n * max([1, Infinity, 2]); // Infinity;\n * max([]); // -Infinity\n * ```\n */\nfunction max<A extends Iterable<number> | AsyncIterable<number>>(\n  iterable: A,\n): ReturnValueType<A, number>;\n\nfunction max(iterable: Iterable<number> | AsyncIterable<number>) {\n  if (isIterable(iterable)) {\n    return sync(iterable);\n  } else if (isAsyncIterable(iterable)) {\n    return async(iterable);\n  }\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default max;\n"]}