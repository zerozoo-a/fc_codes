{"version":3,"file":"concurrent.js","sourceRoot":"","sources":["../../../src/Lazy/concurrent.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAGrD,MAAM,OAAO,UAAU;IAGrB,YAAY,MAAc;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,EAAE,CAAC,MAAc;QACtB,OAAO,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;CACF;AAED,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,UAAmB,EAA4B,EAAE;IAC5E,OAAO,UAAU,YAAY,UAAU,CAAC;AAC1C,CAAC,CAAC;AA0DF,SAAS,UAAU,CACjB,MAAc,EACd,QAA2B;IAI3B,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,CAAC,QAAQ,EAAE,EAAE;YAClB,OAAO,UAAU,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,CAAC;KACH;IAED,IAAI,MAAM,KAAK,QAAQ,EAAE;QACvB,MAAM,IAAI,UAAU,CAAC,6BAA6B,CAAC,CAAC;KACrD;IAED,IAAI,MAAM,IAAI,CAAC,EAAE;QACf,MAAM,IAAI,UAAU,CAAC,yBAAyB,CAAC,CAAC;KACjD;IAED,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;QAC9B,MAAM,IAAI,SAAS,CAAC,0CAA0C,CAAC,CAAC;KACjE;IAED,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;IAClD,MAAM,MAAM,GAA8C,EAAE,CAAC;IAC7D,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,IAAI,aAAa,GAAG,CAAC,CAAC;IACtB,IAAI,iBAAiB,GAAG,CAAC,CAAC;IAC1B,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,MAAM,eAAe,GAA2B,EAAE,CAAC;IAEnD,MAAM,aAAa,GAAG,GAAG,EAAE;QACzB,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,aAAa,GAAG,iBAAiB,EAAE;YAC7D,oEAAoE;YACpE,MAAM,CAAC,GAAG,MAAM,CAAC,KAAK,EAAG,CAAC;YAC1B,oEAAoE;YACpE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,eAAe,CAAC,KAAK,EAAG,CAAC;YACnD,IAAI,CAAC,CAAC,MAAM,KAAK,WAAW,EAAE;gBAC5B,iBAAiB,EAAE,CAAC;gBACpB,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBACjB,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE;oBAChB,QAAQ,GAAG,IAAI,CAAC;iBACjB;aACF;iBAAM;gBACL,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBACjB,QAAQ,GAAG,IAAI,CAAC;gBAChB,MAAM;aACP;SACF;IACH,CAAC,CAAC;IAEF,MAAM,UAAU,GAAG,GAAG,EAAE;QACtB,IAAI,OAAO,EAAE;YACX,IAAI,GAAG,IAAI,CAAC,IAAI,CACd,GAAG,EAAE,CACH,KAAK,CAAC,CAAC,QAAQ,IAAI,aAAa,GAAG,iBAAiB,IAAI,UAAU,EAAE,CAAC,CACxE,CAAC;SACH;aAAM;YACL,MAAM,SAAS,GAAG,OAAO,CAAC,UAAU,CAClC,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,CAC1B,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAQ,CAAC,CAC5C,CACF,CAAC;YACF,OAAO,GAAG,IAAI,CAAC;YACf,IAAI,GAAG,IAAI;iBACR,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC;iBACrB,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE;gBAClB,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;gBAC1B,OAAO,GAAG,KAAK,CAAC;gBAChB,KAAK,EAAE,CAAC;YACV,CAAC,CAAC,CAAC;SACN;IACH,CAAC,CAAC;IAEF,SAAS,KAAK;QACZ,IAAI,QAAQ,IAAI,aAAa,KAAK,iBAAiB,EAAE;YACnD,OAAO;SACR;aAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,aAAa,EAAE,CAAC;SACjB;aAAM;YACL,UAAU,EAAE,CAAC;SACd;IACH,CAAC;IAED,OAAO;QACL,CAAC,MAAM,CAAC,aAAa,CAAC;YACpB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI;YACF,aAAa,EAAE,CAAC;YAChB,IAAI,QAAQ,EAAE;gBACZ,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;aACzC;YACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,eAAe,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;gBACxC,KAAK,EAAE,CAAC;YACV,CAAC,CAAC,CAAC;QACL,CAAC;KAC0B,CAAC;AAChC,CAAC;AAED,eAAe,UAAU,CAAC","sourcesContent":["import { isAsyncIterable } from \"../_internal/utils\";\nimport { Reject, Resolve } from \"../types/Utils\";\n\nexport class Concurrent {\n  length: number;\n\n  constructor(length: number) {\n    this.length = length;\n  }\n\n  static of(length: number) {\n    return new Concurrent(length);\n  }\n}\n\nexport const isConcurrent = (concurrent: unknown): concurrent is Concurrent => {\n  return concurrent instanceof Concurrent;\n};\n\n/**\n * Concurrent is used to balance the load of multiple asynchronous requests.\n * The first argument receives a number that controls the number of loads, and the second argument is an AsyncIterable.\n * See {@link https://fxts.dev/docs/toAsync | toAsync} to create an AsyncIterable .\n *\n * @example\n * ```ts\n * await pipe(\n *   [1, 2, 3, 4, 5, 6],\n *   toAsync,\n *   map((a) => delay(1000, a)),\n *   concurrent(3),\n *   each(console.log), // log 1, 2, 3, 4, 5, 6\n * ); // 2 seconds\n *\n * // evaluation\n * //              ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐\n * //              │  1  │──│  2  │──│  3  │──│  4  │──│  5  │──│  6  │\n * //              └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘\n * //      map        │        │        │        │        │        │\n * // concurrent(3)  (1)      (1)      (1)      (2)      (2)      (2)\n * //                 │        │        │        │        │        │\n * //                 ▼        ▼        ▼        ▼        ▼        ▼\n *\n * await pipe(\n *   [1, 2, 3, 4, 5, 6],\n *   toAsync,\n *   map((a) => delay(1000, a)),\n *   each(console.log), // log 1, 2, 3, 4, 5, 6\n * ); // 6 seconds\n *\n * // evaluation\n * //              ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐  ┌─────┐\n * //              │  1  │──│  2  │──│  3  │──│  4  │──│  5  │──│  6  │\n * //              └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘  └──┬──┘\n * //      map        │        │        │        │        │        │\n * //                (1)      (2)      (3)      (4)      (5)      (6)\n * //                 │        │        │        │        │        │\n * //                 ▼        ▼        ▼        ▼        ▼        ▼\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-concurrent-4x58c | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync}, {@link https://fxts.dev/docs/toArray | toArray}\n * {@link https://fxts.dev/docs/each | each}, {@link https://fxts.dev/docs/map | map}\n */\nfunction concurrent<A>(\n  length: number,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A>;\n\nfunction concurrent<A>(\n  length: number,\n  iterable?: AsyncIterable<A>,\n): (iterable: AsyncIterable<A>) => AsyncIterableIterator<A>;\n\nfunction concurrent<A>(\n  length: number,\n  iterable?: AsyncIterable<A>,\n):\n  | AsyncIterableIterator<A>\n  | ((iterable: AsyncIterable<A>) => AsyncIterableIterator<A>) {\n  if (iterable === undefined) {\n    return (iterable) => {\n      return concurrent(length, iterable);\n    };\n  }\n\n  if (length === Infinity) {\n    throw new RangeError(\"'length' cannot be infinite\");\n  }\n\n  if (length <= 0) {\n    throw new RangeError(\"'length' must be over 0\");\n  }\n\n  if (!isAsyncIterable(iterable)) {\n    throw new TypeError(\"'iterable' must be type of AsyncIterable\");\n  }\n\n  const iterator = iterable[Symbol.asyncIterator]();\n  const buffer: PromiseSettledResult<IteratorResult<A>>[] = [];\n  let prev = Promise.resolve();\n  let nextCallCount = 0;\n  let resolvedItemCount = 0;\n  let finished = false;\n  let pending = false;\n  const settlementQueue: [Resolve<A>, Reject][] = [];\n\n  const consumeBuffer = () => {\n    while (buffer.length > 0 && nextCallCount > resolvedItemCount) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const p = buffer.shift()!;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const [resolve, reject] = settlementQueue.shift()!;\n      if (p.status === \"fulfilled\") {\n        resolvedItemCount++;\n        resolve(p.value);\n        if (p.value.done) {\n          finished = true;\n        }\n      } else {\n        reject(p.reason);\n        finished = true;\n        break;\n      }\n    }\n  };\n\n  const fillBuffer = () => {\n    if (pending) {\n      prev = prev.then(\n        () =>\n          void (!finished && nextCallCount > resolvedItemCount && fillBuffer()),\n      );\n    } else {\n      const nextItems = Promise.allSettled(\n        Array.from({ length }, () =>\n          iterator.next(Concurrent.of(length) as any),\n        ),\n      );\n      pending = true;\n      prev = prev\n        .then(() => nextItems)\n        .then((nextItems) => {\n          buffer.push(...nextItems);\n          pending = false;\n          recur();\n        });\n    }\n  };\n\n  function recur() {\n    if (finished || nextCallCount === resolvedItemCount) {\n      return;\n    } else if (buffer.length > 0) {\n      consumeBuffer();\n    } else {\n      fillBuffer();\n    }\n  }\n\n  return {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    next() {\n      nextCallCount++;\n      if (finished) {\n        return { done: true, value: undefined };\n      }\n      return new Promise((resolve, reject) => {\n        settlementQueue.push([resolve, reject]);\n        recur();\n      });\n    },\n  } as AsyncIterableIterator<A>;\n}\n\nexport default concurrent;\n"]}