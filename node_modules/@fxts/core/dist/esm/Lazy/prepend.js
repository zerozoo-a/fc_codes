import { isAsyncIterable, isIterable, isPromise } from "../_internal/utils.js";
function* sync(a, iterable) {
    yield a;
    yield* iterable;
}
function async(a, iterable) {
    let isFirstItem = true;
    const iterator = iterable[Symbol.asyncIterator]();
    return {
        [Symbol.asyncIterator]() {
            return this;
        },
        async next(concurrent) {
            if (isFirstItem) {
                isFirstItem = false;
                return { done: false, value: await a };
            }
            return iterator.next(concurrent);
        },
    };
}
function prepend(a, iterable) {
    if (iterable === undefined) {
        return (iterable) => prepend(a, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(isPromise(a) ? a : Promise.resolve(a), iterable);
    }
    if (isIterable(iterable)) {
        return sync(a, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default prepend;
//# sourceMappingURL=prepend.js.map