{"version":3,"file":"flat.js","sourceRoot":"","sources":["../../../src/Lazy/flat.ts"],"names":[],"mappings":"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","sourcesContent":["import concurrent, { isConcurrent } from \"./concurrent\";\nimport last from \"../last\";\nimport IterableInfer from \"../types/IterableInfer\";\nimport type { DeepFlat, DeepFlatSync } from \"../types/DeepFlat\";\nimport { empty, isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport { Reject, Resolve } from \"../types/Utils\";\nimport append from \"./append\";\nimport concat from \"./concat\";\nimport Awaited from \"../types/Awaited\";\n\ntype ReturnFlatType<\n  A extends Iterable<unknown> | AsyncIterable<unknown>,\n  B extends number = 1,\n> = A extends Iterable<unknown>\n  ? IterableIterator<DeepFlatSync<IterableInfer<A>, B>>\n  : A extends AsyncIterable<unknown>\n  ? AsyncIterableIterator<DeepFlat<Awaited<IterableInfer<A>>, B>>\n  : never;\n\nconst isFlatAble = function (a: unknown): a is Iterable<unknown> {\n  return typeof a !== \"string\" && isIterable(a);\n};\n\nfunction sync<A>(iterable: Iterable<A>, depth: number): IterableIterator<A> {\n  const iterator = iterable[Symbol.iterator]();\n  const iteratorStack: [first: Iterator<A>, ...rest: Iterator<any>[]] = [\n    iterator,\n  ];\n\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n    next() {\n      const iterator = last(iteratorStack);\n      if (!iterator) {\n        return { done: true, value: undefined };\n      }\n\n      const { value, done } = iterator.next();\n      if (done) {\n        iteratorStack.pop();\n        return this.next();\n      }\n\n      if (isFlatAble(value) && iteratorStack.length < depth + 1) {\n        iteratorStack.push(value[Symbol.iterator]());\n        return this.next();\n      }\n\n      return {\n        done: false,\n        value,\n      };\n    },\n  };\n}\n\nfunction asyncConcurrent<A>(\n  iterable: AsyncIterable<A>,\n  depth: number,\n): AsyncIterableIterator<A> {\n  const originIterator = iterable[Symbol.asyncIterator]();\n  let prevItem = Promise.resolve();\n  let flattenIterator = empty() as IterableIterator<A>;\n  let finished = false;\n  const settlementQueue: [Resolve<A>, Reject][] = [];\n\n  const fillItem = async () => {\n    const { done, value } = await originIterator.next();\n    if (done) {\n      return false;\n    }\n\n    if (isFlatAble(value)) {\n      flattenIterator = concat(\n        sync(value as Iterable<A>, depth - 1),\n        flattenIterator,\n      );\n    } else {\n      flattenIterator = append(value, flattenIterator);\n    }\n    return true;\n  };\n\n  const pullItem = async (): Promise<IteratorResult<A>> => {\n    if (finished) {\n      return { done: true, value: undefined };\n    }\n\n    const { value, done } = flattenIterator.next();\n    if (done) {\n      const hasItem = await fillItem();\n      if (hasItem) {\n        return pullItem();\n      }\n\n      return { done: true, value: undefined };\n    }\n\n    return { done: false, value };\n  };\n\n  const resolveItem = ({ done, value }: any) => {\n    if (done || finished) {\n      while (settlementQueue.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const [resolve] = settlementQueue.shift()!;\n        resolve({ done: true, value: undefined });\n      }\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const [resolve] = settlementQueue.shift()!;\n    resolve({ done, value });\n  };\n\n  const catchItem = (err: any) => {\n    finished = true;\n    // eslint-disable-next-line\n    const [_, reject] = settlementQueue.shift()!;\n    reject(err);\n  };\n\n  return {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    async next() {\n      return new Promise((resolve, reject) => {\n        settlementQueue.push([resolve, reject]);\n\n        prevItem = prevItem\n          .then(() => pullItem())\n          .then(resolveItem)\n          .catch(catchItem);\n      });\n    },\n  };\n}\n\nfunction asyncSequential<A>(\n  iterable: AsyncIterable<A>,\n  depth: number,\n): AsyncIterableIterator<A> {\n  const iterator = iterable[Symbol.asyncIterator]();\n  const iteratorStack: [first: AsyncIterator<A>, ...rest: Iterator<any>[]] = [\n    iterator,\n  ];\n  return {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    async next() {\n      const iterator = last(iteratorStack);\n      if (!iterator) {\n        return { done: true, value: undefined };\n      }\n\n      const { value, done } = await iterator.next();\n      if (done) {\n        iteratorStack.pop();\n        return this.next();\n      }\n\n      if (isFlatAble(value) && iteratorStack.length < depth + 1) {\n        iteratorStack.push(value[Symbol.iterator]());\n        return this.next();\n      }\n\n      return {\n        done: false,\n        value,\n      };\n    },\n  };\n}\n\nfunction async<A>(\n  iterable: AsyncIterable<A>,\n  depth: number,\n): AsyncIterableIterator<A> {\n  let _iterator: AsyncIterator<A> | null = null;\n  return {\n    async next(_concurrent: any) {\n      if (_iterator === null) {\n        _iterator = isConcurrent(_concurrent)\n          ? asyncConcurrent(concurrent(_concurrent.length, iterable), depth)\n          : asyncSequential(iterable, depth);\n      }\n      return _iterator.next(_concurrent);\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n\n/**\n * Returns flattened Iterable/AsyncIterable.\n * If first argument is number, more perform flatten `flat(2, [[[1,2]]]) // [1,2]`\n *\n * @example\n * ```ts\n * const iter = flat([1,[2,3],[[4,5]]]);\n * iter.next() // {done:false, value: 1}\n * iter.next() // {done:false, value: 2}\n * iter.next() // {done:false, value: 3}\n * iter.next() // {done:false, value: [4, 5]}\n * iter.next() // {done:true, value: undefined}\n *\n * // with pipe\n * pipe(\n *  [1,[2, 3],[[4, 5]]],\n *  flat,\n *  toArray,\n * ); // [1, 2, 3, [4, 5]]\n *\n * await pipe(\n *  Promise.resolve([1,[2, 3],[[4, 5]]]),\n *  flat,\n *  toArray,\n * ); // [1, 2, 3, [4, 5]]\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-flat-6t2in | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\n// prettier-ignore\nfunction flat<\n  A extends Iterable<unknown> | AsyncIterable<unknown>,\n  B extends number = 1\n>(\n  iterator: A,\n  depth?: B\n): ReturnFlatType<A, B>;\n\nfunction flat<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  iterable: Iterable<A> | AsyncIterable<A>,\n  depth = 1,\n) {\n  if (isIterable(iterable)) {\n    return sync(iterable, depth);\n  }\n\n  if (isAsyncIterable(iterable)) {\n    return async(iterable, depth);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default flat;\n"]}