import map from "./map.js";
import concurrent, { isConcurrent } from "./concurrent.js";
import { isAsyncIterable, isIterable } from "../_internal/utils.js";
function _zipWithIndex(iterable) {
    let i = -1;
    return map((a) => [++i, a], iterable);
}
function async(iterable) {
    let _iterator;
    return {
        async next(_concurrent) {
            if (_iterator === undefined) {
                _iterator = isConcurrent(_concurrent)
                    ? _zipWithIndex(concurrent(_concurrent.length, iterable))
                    : _zipWithIndex(iterable);
            }
            return _iterator.next(_concurrent);
        },
        [Symbol.asyncIterator]() {
            return this;
        },
    };
}
function zipWithIndex(iterable) {
    if (isAsyncIterable(iterable)) {
        return async(iterable);
    }
    if (isIterable(iterable)) {
        return _zipWithIndex(iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default zipWithIndex;
//# sourceMappingURL=zipWithIndex.js.map