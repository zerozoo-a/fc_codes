import { isAsyncIterable, isIterable } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
function* sync(iterable) {
    const arr = [];
    for (const a of iterable) {
        yield a;
        arr.push(a);
    }
    while (arr.length) {
        for (const a of arr) {
            yield a;
        }
    }
}
async function* asyncSequential(iterable) {
    const arr = [];
    for await (const a of iterable) {
        yield a;
        arr.push(a);
    }
    while (arr.length) {
        for (const a of arr) {
            yield a;
        }
    }
}
function async(iterable) {
    let _iterator;
    return {
        async next(_concurrent) {
            if (_iterator === undefined) {
                _iterator = isConcurrent(_concurrent)
                    ? asyncSequential(concurrent(_concurrent.length, iterable))
                    : asyncSequential(iterable);
            }
            return _iterator.next(_concurrent);
        },
        [Symbol.asyncIterator]() {
            return this;
        },
    };
}
function cycle(iterable) {
    if (isIterable(iterable)) {
        return sync(iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default cycle;
//# sourceMappingURL=cycle.js.map