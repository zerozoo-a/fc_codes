{"version":3,"file":"take.js","sourceRoot":"","sources":["../../../src/Lazy/take.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAIjE,QAAQ,CAAC,CAAC,IAAI,CAAI,MAAc,EAAE,QAAqB;IACrD,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;IAC7C,IAAI,GAAG,GAAG,IAAI,CAAC;IACf,OAAO,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,KAAK,KAAK,EAAE;QAC7D,MAAM,GAAG,CAAC,KAAK,CAAC;KACjB;AACH,CAAC;AAED,SAAS,KAAK,CACZ,MAAc,EACd,QAA0B;IAE1B,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;IAClD,OAAO;QACL,CAAC,MAAM,CAAC,aAAa,CAAC;YACpB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,WAAW;YACpB,IAAI,MAAM,EAAE,GAAG,CAAC;gBAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;YAC1D,OAAO,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC;KACF,CAAC;AACJ,CAAC;AAuDD,SAAS,IAAI,CACX,CAAS,EACT,QAAY;IAKZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,CAAC,QAAW,EAAE,EAAE;YACrB,OAAO,IAAI,CAAC,CAAC,EAAE,QAAe,CAAkC,CAAC;QACnE,CAAC,CAAC;KACH;IAED,IAAI,UAAU,CAAmB,QAAQ,CAAC,EAAE;QAC1C,OAAO,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC1B;IAED,IAAI,eAAe,CAAmB,QAAQ,CAAC,EAAE;QAC/C,OAAO,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC3B;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,IAAI,CAAC","sourcesContent":["import { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport ReturnIterableIteratorType from \"../types/ReturnIterableIteratorType\";\nimport IterableInfer from \"../types/IterableInfer\";\n\nfunction* sync<A>(length: number, iterable: Iterable<A>): IterableIterator<A> {\n  const iterator = iterable[Symbol.iterator]();\n  let cur = null;\n  while (length-- > 0 && (cur = iterator.next()).done === false) {\n    yield cur.value;\n  }\n}\n\nfunction async<A>(\n  length: number,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A> {\n  const iterator = iterable[Symbol.asyncIterator]();\n  return {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    async next(_concurrent) {\n      if (length-- < 1) return { done: true, value: undefined };\n      return iterator.next(_concurrent);\n    },\n  };\n}\n\n/**\n * Returns Iterable/AsyncIterable that taken the first argument `l` values from iterable\n *\n * @example\n * ```ts\n * const iter = take(2, [0, 1, 2, 3, 4, 5, 6]);\n * iter.next() // {done:false, value: 0}\n * iter.next() // {done:false, value: 1}\n * iter.next() // {done:true, value: undefined}\n *\n * // with pipe\n * pipe(\n *  [0, 1, 2, 3, 4, 5, 6],\n *  take(2),\n *  toArray,\n * ); // [0, 1]\n *\n * await pipe(\n *  Promise.resolve([0, 1, 2, 3, 4, 5, 6]),\n *  take(2),\n *  toArray,\n * ); // [0, 1]\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve(0), Promise.resolve(1), Promise.resolve(2),\n *   Promise.resolve(3), Promise.resolve(4), Promise.resolve(5), Promise.resolve(6)],\n *  toAsync,\n *  take(2),\n *  toArray,\n * ); // [0, 1]\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-take-372bs | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\n// prettier-ignore\nfunction take<A>(\n  l: number,\n  iterable: Iterable<A>\n): IterableIterator<A>;\n\nfunction take<A>(\n  l: number,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A>;\n\nfunction take<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  l: number,\n): (iterable: A) => ReturnIterableIteratorType<A>;\n\nfunction take<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  l: number,\n  iterable?: A,\n):\n  | IterableIterator<IterableInfer<A>>\n  | AsyncIterableIterator<IterableInfer<A>>\n  | ((iterable: A) => ReturnIterableIteratorType<A>) {\n  if (iterable === undefined) {\n    return (iterable: A) => {\n      return take(l, iterable as any) as ReturnIterableIteratorType<A>;\n    };\n  }\n\n  if (isIterable<IterableInfer<A>>(iterable)) {\n    return sync(l, iterable);\n  }\n\n  if (isAsyncIterable<IterableInfer<A>>(iterable)) {\n    return async(l, iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default take;\n"]}