{"version":3,"file":"intersection.js","sourceRoot":"","sources":["../../../src/Lazy/intersection.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,aAAa,CAAC;AAEnC,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AACjE,OAAO,cAAc,MAAM,kBAAkB,CAAC;AA6C9C,SAAS,YAAY,CACnB,SAAyC,EACzC,SAA0C;IAO1C,IAAI,SAAS,KAAK,SAAS,EAAE;QAC3B,OAAO,CAAC,SAAc,EAAE,EAAE;YACxB,OAAO,YAAY,CAAC,SAAgB,EAAE,SAAS,CAAC,CAAC;QACnD,CAAC,CAAC;KACH;IAED,IAAI,UAAU,CAAC,SAAS,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE;QAClD,OAAO,cAAc,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KACvD;IACD,IAAI,UAAU,CAAC,SAAS,CAAC,IAAI,eAAe,CAAC,SAAS,CAAC,EAAE;QACvD,OAAO,cAAc,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KACvD;IACD,IAAI,eAAe,CAAC,SAAS,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE;QACvD,OAAO,cAAc,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KACvD;IACD,IAAI,eAAe,CAAC,SAAS,CAAC,IAAI,eAAe,CAAC,SAAS,CAAC,EAAE;QAC5D,OAAO,cAAc,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KACvD;IAED,MAAM,IAAI,SAAS,CACjB,uEAAuE,CACxE,CAAC;AACJ,CAAC;AAED,eAAe,YAAY,CAAC","sourcesContent":["import identity from \"../identity\";\nimport IterableInfer from \"../types/IterableInfer\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport intersectionBy from \"./intersectionBy\";\n\n/**\n * Returns Iterable/AsyncIterable of all elements in the `iterable2` contained in the `iterable1`.\n *\n * @example\n * ```ts\n * const iter = intersection([2, 1], [2, 3, 4]);\n * iter.next(); // {value: 2, done:false}\n * iter.next(); // {value: undefined, done: true}\n * ```\n */\nfunction intersection<T>(\n  iterable1: Iterable<T>,\n  iterable2: Iterable<T>,\n): IterableIterator<T>;\n\nfunction intersection<T>(\n  iterable1: AsyncIterable<T>,\n  iterable2: Iterable<T>,\n): AsyncIterableIterator<T>;\n\nfunction intersection<T>(\n  iterable1: Iterable<T>,\n  iterable2: AsyncIterable<T>,\n): AsyncIterableIterator<T>;\n\nfunction intersection<T>(\n  iterable1: AsyncIterable<T>,\n  iterable2: AsyncIterable<T>,\n): AsyncIterableIterator<T>;\n\nfunction intersection<\n  A extends Iterable<unknown> | AsyncIterable<unknown>,\n  B extends Iterable<unknown> | AsyncIterable<unknown>,\n>(\n  iterable1: A,\n): (\n  iterable2: B,\n) => A extends AsyncIterable<unknown>\n  ? AsyncIterableIterator<IterableInfer<B>>\n  : B extends AsyncIterable<unknown>\n  ? AsyncIterableIterator<IterableInfer<B>>\n  : IterableIterator<IterableInfer<B>>;\n\nfunction intersection<T>(\n  iterable1: Iterable<T> | AsyncIterable<T>,\n  iterable2?: Iterable<T> | AsyncIterable<T>,\n):\n  | IterableIterator<T>\n  | AsyncIterableIterator<T>\n  | ((\n      iterable2: Iterable<T> | AsyncIterable<T>,\n    ) => IterableIterator<T> | AsyncIterableIterator<T>) {\n  if (iterable2 === undefined) {\n    return (iterable2: any) => {\n      return intersection(iterable1 as any, iterable2);\n    };\n  }\n\n  if (isIterable(iterable1) && isIterable(iterable2)) {\n    return intersectionBy(identity, iterable1, iterable2);\n  }\n  if (isIterable(iterable1) && isAsyncIterable(iterable2)) {\n    return intersectionBy(identity, iterable1, iterable2);\n  }\n  if (isAsyncIterable(iterable1) && isIterable(iterable2)) {\n    return intersectionBy(identity, iterable1, iterable2);\n  }\n  if (isAsyncIterable(iterable1) && isAsyncIterable(iterable2)) {\n    return intersectionBy(identity, iterable1, iterable2);\n  }\n\n  throw new TypeError(\n    \"'iterable1' and 'iterable2' must be type of Iterable or AsyncIterable\",\n  );\n}\n\nexport default intersection;\n"]}