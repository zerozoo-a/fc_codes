{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../src/Lazy/range.ts"],"names":[],"mappings":"AA4CA,QAAQ,CAAC,CAAC,KAAK,CACb,KAAa,EACb,GAAY,EACZ,IAAI,GAAG,CAAC;IAER,IAAI,GAAG,KAAK,SAAS;QAAE,OAAO,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACrD,IAAI,IAAI,GAAG,CAAC,EAAE;QACZ,OAAO,KAAK,GAAG,GAAG,EAAE;YAClB,MAAM,KAAK,CAAC;YACZ,KAAK,IAAI,IAAI,CAAC;SACf;KACF;SAAM;QACL,OAAO,KAAK,GAAG,GAAG,EAAE;YAClB,MAAM,KAAK,CAAC;YACZ,KAAK,IAAI,IAAI,CAAC;SACf;KACF;AACH,CAAC;AAED,eAAe,KAAK,CAAC","sourcesContent":["/**\n * Returns Iterable/AsyncIterable of numbers (positive and/or negative) progressing from start-up to,\n * but not including, end. it's set to start with a start then set to 0.\n *\n * @example\n * ```ts\n * const iter = range(4);\n * iter.next() // {done:false, value: 0}\n * iter.next() // {done:false, value: 1}\n * iter.next() // {done:false, value: 2}\n * iter.next() // {done:false, value: 3}\n * iter.next() // {done:true, value: undefined}\n *\n * // with pipe\n * pipe(\n *  range(4),\n *  toArray,\n * ); // [0, 1, 2, 3]\n *\n * pipe(\n *  range(1, 4),\n *  toArray,\n * ); // [1, 2, 3]\n *\n * // with toAsync\n * await pipe(\n *  range(4),\n *  toAsync,\n *  toArray,\n * ); // [0, 1, 2, 3]\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-range-3phyd | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\nfunction range(length: number): IterableIterator<number>;\nfunction range(start: number, end: number): IterableIterator<number>;\nfunction range(\n  start: number,\n  end: number,\n  step: number,\n): IterableIterator<number>;\nfunction* range(\n  start: number,\n  end?: number,\n  step = 1,\n): IterableIterator<number> {\n  if (end === undefined) return yield* range(0, start);\n  if (step < 0) {\n    while (start > end) {\n      yield start;\n      start += step;\n    }\n  } else {\n    while (start < end) {\n      yield start;\n      start += step;\n    }\n  }\n}\n\nexport default range;\n"]}