{"version":3,"file":"entries.js","sourceRoot":"","sources":["../../../src/Lazy/entries.ts"],"names":[],"mappings":"AAIA;;;;;;;;;;;;;GAaG;AAEH,QAAQ,CAAC,CAAC,OAAO,CACf,GAAM;IAEN,KAAK,MAAM,CAAC,IAAI,GAAG,EAAE;QACnB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE;YAChD,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAQ,CAAC;SAC1B;KACF;AACH,CAAC;AAED,eAAe,OAAO,CAAC","sourcesContent":["type Entries<T extends Record<string, any>, K extends keyof T> = K extends any\n  ? [K, T[K]]\n  : never;\n\n/**\n *\n * Returns an iterator of the own enumerable string keyed-value pairs.\n *\n * @example\n * ```ts\n *\n * [...entries({ a: 1, b: \"2\", c: true })]\n * // [[\"a\", 1], [\"b\", \"2\"], [\"c\", true]]\n * ```\n *\n *\n * see {@link https://fxts.dev/docs/fromEntries | fromEntries}\n */\n\nfunction* entries<T extends Record<string, any>>(\n  obj: T,\n): Generator<Entries<T, keyof T>, void> {\n  for (const k in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, k)) {\n      yield [k, obj[k]] as any;\n    }\n  }\n}\n\nexport default entries;\n"]}