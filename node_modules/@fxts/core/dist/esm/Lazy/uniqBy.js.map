{"version":3,"file":"uniqBy.js","sourceRoot":"","sources":["../../../src/Lazy/uniqBy.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,SAAS,CAAC;AAC3B,OAAO,KAAK,MAAM,UAAU,CAAC;AAC7B,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAkEjE,SAAS,MAAM,CACb,CAA6B,EAC7B,QAAY;IAKZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,CAAC,QAAQ,EAAE,EAAE;YAClB,OAAO,MAAM,CAAC,CAAC,EAAE,QAAe,CAAkC,CAAC;QACrE,CAAC,CAAC;KACH;IAED,MAAM,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;IACpB,MAAM,WAAW,GAAG,CAAC,CAAI,EAAE,EAAE;QAC3B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YACZ,OAAO,KAAK,CAAC;SACd;QAED,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACT,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;IAEF,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,IAAI,CACT,QAAQ,EACR,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CACjB,CAAC;KAC1B;IAED,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;QAC7B,OAAO,IAAI,CACT,QAAQ,EACR,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CACZ,CAAC;KAC/B;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,MAAM,CAAC","sourcesContent":["import pipe from \"../pipe\";\nimport pipe1 from \"../pipe1\";\nimport filter from \"./filter\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport IterableInfer from \"../types/IterableInfer\";\nimport ReturnIterableIteratorType from \"../types/ReturnIterableIteratorType\";\n\n/**\n * Unlike {@link https://fxts.dev/docs/uniq | uniq} returns Iterable/AsyncIterable\n * with duplicate values removed by applying with `f` inside the given Iterable/AsyncIterable.\n *\n * @example\n * ```ts\n * const iter = uniqBy(a => a.age, [{age: 21}, {age: 23}, {age: 21}, {age: 34}]);\n * iter.next() // {done:false, value: {age: 21}}\n * iter.next() // {done:false, value: {age: 23}}\n * iter.next() // {done:false, value: {age: 34}}\n * iter.next() // {done:true, value: undefined}\n *\n * // with pipe\n * pipe(\n *  [{age: 21}, {age: 23}, {age: 21}, {age: 34}],\n *  uniqBy(a => a.age),\n *  toArray,\n * ); // [{age: 21}, {age: 23}, {age: 34}]\n *\n * await pipe(\n *  Promise.resolve([{age: 21}, {age: 23}, {age: 21}, {age: 34}]),\n *  uniqBy(a => a.age),\n *  toArray,\n * ); // [{age: 21}, {age: 23}, {age: 34}]\n *\n * // if you want to use asynchronous callback\n * await pipe(\n *  Promise.resolve([{age: 21}, {age: 23}, {age: 21}, {age: 34}]),\n *  toAsync,\n *  uniqBy(async (a) => a.age),\n *  toArray,\n * ); // [{age: 21}, {age: 23}, {age: 34}]\n *\n * // toAsync\n * await pipe(\n *  [Promise.resolve({age: 21}), Promise.resolve({age: 23}), Promise.resolve({age: 21}), Promise.resolve({age: 34})],\n *  toAsync,\n *  uniqBy(a => a.age),\n *  toArray,\n * ); // [{age: 21}, {age: 23}, {age: 34}]\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-uniqby-zb5d9 | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\nfunction uniqBy<A, B>(\n  f: (a: A) => B,\n  iterable: Iterable<A>,\n): IterableIterator<A>;\n\nfunction uniqBy<A, B>(\n  f: (a: A) => B,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A>;\n\nfunction uniqBy<A extends Iterable<unknown> | AsyncIterable<unknown>, B>(\n  f: (a: IterableInfer<A>) => B,\n  iterable?: A,\n): (iterable: A) => ReturnIterableIteratorType<A>;\n\nfunction uniqBy<A extends Iterable<unknown> | AsyncIterable<unknown>, B>(\n  f: (a: IterableInfer<A>) => B,\n  iterable?: A,\n):\n  | IterableIterator<A>\n  | AsyncIterableIterator<A>\n  | ((iterable: A) => ReturnIterableIteratorType<A>) {\n  if (iterable === undefined) {\n    return (iterable) => {\n      return uniqBy(f, iterable as any) as ReturnIterableIteratorType<A>;\n    };\n  }\n\n  const s = new Set();\n  const checkAndAdd = (b: B) => {\n    if (s.has(b)) {\n      return false;\n    }\n\n    s.add(b);\n    return true;\n  };\n\n  if (isIterable(iterable)) {\n    return pipe(\n      iterable,\n      filter((a) => pipe1(f(a), checkAndAdd)),\n    ) as IterableIterator<A>;\n  }\n\n  if (isAsyncIterable(iterable)) {\n    return pipe(\n      iterable,\n      filter((a) => pipe1(f(a), checkAndAdd)),\n    ) as AsyncIterableIterator<A>;\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default uniqBy;\n"]}