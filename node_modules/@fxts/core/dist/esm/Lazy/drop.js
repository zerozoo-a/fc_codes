import { isAsyncIterable, isIterable } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
import consume from "../consume.js";
function* sync(length, iterable) {
    const iterator = iterable[Symbol.iterator]();
    const iterableIterator = {
        [Symbol.iterator]() {
            return iterator;
        },
    };
    consume(iterableIterator, length);
    return yield* iterableIterator;
}
async function* asyncSequential(length, iterable) {
    const iterator = iterable[Symbol.asyncIterator]();
    const iterableIterator = {
        [Symbol.asyncIterator]() {
            return iterator;
        },
    };
    await consume(iterableIterator, length);
    return yield* iterableIterator;
}
function async(length, iterable) {
    let iterator;
    return {
        [Symbol.asyncIterator]() {
            return this;
        },
        next(_concurrent) {
            if (iterator === undefined) {
                iterator = isConcurrent(_concurrent)
                    ? asyncSequential(length, concurrent(_concurrent.length, iterable))
                    : asyncSequential(length, iterable);
            }
            return iterator.next(_concurrent);
        },
    };
}
function drop(length, iterable) {
    if (iterable === undefined) {
        return (iterable) => {
            return drop(length, iterable);
        };
    }
    if (length < 0) {
        throw new RangeError("'length' must be greater than 0");
    }
    if (isIterable(iterable)) {
        return sync(length, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(length, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default drop;
//# sourceMappingURL=drop.js.map