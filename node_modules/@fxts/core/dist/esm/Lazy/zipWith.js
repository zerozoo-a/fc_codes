import { isAsyncIterable, isIterable } from "../_internal/utils.js";
import map from "./map.js";
import zip from "./zip.js";
function zipWith(f, iterable1, iterable2) {
    if (isIterable(iterable1) && isIterable(iterable2)) {
        return map(([a, b]) => f(a, b), zip(iterable1, iterable2));
    }
    if (isIterable(iterable1) && isAsyncIterable(iterable2)) {
        return map(([a, b]) => f(a, b), zip(iterable1, iterable2));
    }
    if (isAsyncIterable(iterable1) && isIterable(iterable2)) {
        return map(([a, b]) => f(a, b), zip(iterable1, iterable2));
    }
    if (isAsyncIterable(iterable1) && isAsyncIterable(iterable2)) {
        return map(([a, b]) => f(a, b), zip(iterable1, iterable2));
    }
    throw new TypeError("'iterable1' and 'iterable2' must be type of Iterable or AsyncIterable");
}
export default zipWith;
//# sourceMappingURL=zipWith.js.map