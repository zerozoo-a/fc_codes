import { AsyncFunctionException } from "../_internal/error.js";
import { isAsyncIterable, isIterable, isPromise } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
function* sync(f, iterable) {
    const iterator = iterable[Symbol.iterator]();
    const iterableIterator = {
        [Symbol.iterator]() {
            return iterator;
        },
    };
    for (const a of iterableIterator) {
        const res = f(a);
        if (isPromise(res)) {
            throw new AsyncFunctionException();
        }
        if (res) {
            continue;
        }
        yield a;
        yield* iterableIterator;
    }
}
async function* asyncSequential(f, iterable) {
    const iterator = iterable[Symbol.asyncIterator]();
    const iterableIterator = {
        [Symbol.asyncIterator]() {
            return iterator;
        },
    };
    for await (const a of iterableIterator) {
        if (await f(a)) {
            continue;
        }
        yield a;
        yield* iterableIterator;
    }
}
function async(f, iterable) {
    let iterator;
    return {
        [Symbol.asyncIterator]() {
            return this;
        },
        async next(_concurrent) {
            if (iterator === undefined) {
                iterator = isConcurrent(_concurrent)
                    ? asyncSequential(f, concurrent(_concurrent.length, iterable))
                    : asyncSequential(f, iterable);
            }
            return iterator.next(_concurrent);
        },
    };
}
function dropWhile(f, iterable) {
    if (iterable === undefined) {
        return (iterable) => {
            return dropWhile(f, iterable);
        };
    }
    if (isIterable(iterable)) {
        return sync(f, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(f, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default dropWhile;
//# sourceMappingURL=dropWhile.js.map