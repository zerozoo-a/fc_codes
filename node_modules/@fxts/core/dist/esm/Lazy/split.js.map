{"version":3,"file":"split.js","sourceRoot":"","sources":["../../../src/Lazy/split.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AACjE,OAAO,UAAU,EAAE,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAExD,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAW,EAAE,QAA0B;IACpD,IAAI,GAAG,KAAK,EAAE,EAAE;QACd,OAAO,KAAK,CAAC,CAAC,QAAQ,CAAC;KACxB;IAED,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,GAAG,IAAI,QAAQ,EAAE;QACpB,IAAI,GAAG,KAAK,GAAG,EAAE;YACf,MAAM,GAAG,CAAC;YACV,GAAG,GAAG,EAAE,CAAC;SACV;aAAM;YACL,GAAG,IAAI,GAAG,CAAC;SACZ;KACF;IAED,IAAI,GAAG,KAAK,GAAG,EAAE;QACf,MAAM,EAAE,CAAC;KACV;SAAM,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;QACzB,MAAM,GAAG,CAAC;KACX;AACH,CAAC;AAED,KAAK,SAAS,CAAC,CAAC,eAAe,CAAC,GAAW,EAAE,QAA+B;IAC1E,IAAI,GAAG,KAAK,EAAE,EAAE;QACd,OAAO,KAAK,CAAC,CAAC,QAAQ,CAAC;KACxB;IAED,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,GAAG,GAAG,EAAE,CAAC;IAEb,IAAI,KAAK,EAAE,GAAG,IAAI,QAAQ,EAAE;QAC1B,IAAI,GAAG,KAAK,GAAG,EAAE;YACf,MAAM,GAAG,CAAC;YACV,GAAG,GAAG,EAAE,CAAC;SACV;aAAM;YACL,GAAG,IAAI,GAAG,CAAC;SACZ;KACF;IAED,IAAI,GAAG,KAAK,GAAG,EAAE;QACf,MAAM,EAAE,CAAC;KACV;SAAM,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;QACzB,MAAM,GAAG,CAAC;KACX;AACH,CAAC;AAED,SAAS,KAAK,CACZ,GAAW,EACX,QAA+B;IAE/B,IAAI,SAAgC,CAAC;IACrC,OAAO;QACL,KAAK,CAAC,IAAI,CAAC,WAAgB;YACzB,IAAI,SAAS,KAAK,SAAS,EAAE;gBAC3B,SAAS,GAAG,YAAY,CAAC,WAAW,CAAC;oBACnC,CAAC,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;oBAChE,CAAC,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;aACpC;YACD,OAAO,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrC,CAAC;QACD,CAAC,MAAM,CAAC,aAAa,CAAC;YACpB,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;AACJ,CAAC;AAqCD,SAAS,KAAK,CACZ,GAAW,EACX,QAAY;IAKZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,CAAC,QAAW,EAAyC,EAAE;YAC5D,OAAO,KAAK,CAAC,GAAG,EAAE,QAAe,CAGhC,CAAC;QACJ,CAAC,CAAC;KACH;IAED,IAAI,UAAU,CAAS,QAAQ,CAAC,EAAE;QAChC,OAAO,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;KAC5B;IAED,IAAI,eAAe,CAAS,QAAQ,CAAC,EAAE;QACrC,OAAO,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;KAC7B;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,KAAK,CAAC","sourcesContent":["import ReturnIterableIteratorType from \"../types/ReturnIterableIteratorType\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport concurrent, { isConcurrent } from \"./concurrent\";\n\nfunction* sync(sep: string, iterable: Iterable<string>) {\n  if (sep === \"\") {\n    return yield* iterable;\n  }\n\n  let acc = \"\";\n  let chr = \"\";\n  for (chr of iterable) {\n    if (chr === sep) {\n      yield acc;\n      acc = \"\";\n    } else {\n      acc += chr;\n    }\n  }\n\n  if (chr === sep) {\n    yield \"\";\n  } else if (acc.length > 0) {\n    yield acc;\n  }\n}\n\nasync function* asyncSequential(sep: string, iterable: AsyncIterable<string>) {\n  if (sep === \"\") {\n    return yield* iterable;\n  }\n\n  let acc = \"\";\n  let chr = \"\";\n\n  for await (chr of iterable) {\n    if (chr === sep) {\n      yield acc;\n      acc = \"\";\n    } else {\n      acc += chr;\n    }\n  }\n\n  if (chr === sep) {\n    yield \"\";\n  } else if (acc.length > 0) {\n    yield acc;\n  }\n}\n\nfunction async(\n  sep: string,\n  iterable: AsyncIterable<string>,\n): AsyncIterableIterator<string> {\n  let _iterator: AsyncIterator<string>;\n  return {\n    async next(_concurrent: any) {\n      if (_iterator === undefined) {\n        _iterator = isConcurrent(_concurrent)\n          ? asyncSequential(sep, concurrent(_concurrent.length, iterable))\n          : asyncSequential(sep, iterable);\n      }\n      return _iterator.next(_concurrent);\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n\n/**\n * Splits string by separator.\n *\n * @example\n * ```ts\n * const iter = split(',', '1,2,3,4');\n * iter.next(); // 1\n * iter.next(); // 2\n * iter.next(); // 3\n * iter.next(); // 4\n * iter.next(); // undefined\n *\n * // with pipe\n * pipe(\n *  \"üëç,üòÄ,üôá‚Äç‚ôÇÔ∏è,ü§©,üéâ\",\n *  split(',')\n * ); // [\"üëç\", \"üòÄ\", \"üôá‚Äç‚ôÇÔ∏è\", \"ü§©\", \"üéâ\"]\n * ```\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}\n */\nfunction split(\n  sep: string,\n  iterable: Iterable<string>,\n): IterableIterator<string>;\n\nfunction split(\n  sep: string,\n  iterable: AsyncIterable<string>,\n): AsyncIterableIterator<string>;\n\nfunction split<A extends Iterable<string> | AsyncIterable<string>>(\n  sep: string,\n): (iterable: A) => ReturnIterableIteratorType<A, string>;\n\nfunction split<A extends Iterable<string> | AsyncIterable<string>>(\n  sep: string,\n  iterable?: A,\n):\n  | IterableIterator<string>\n  | AsyncIterableIterator<string>\n  | ((iterable: A) => ReturnIterableIteratorType<A, string>) {\n  if (iterable === undefined) {\n    return (iterable: A): ReturnIterableIteratorType<A, string> => {\n      return split(sep, iterable as any) as ReturnIterableIteratorType<\n        A,\n        string\n      >;\n    };\n  }\n\n  if (isIterable<string>(iterable)) {\n    return sync(sep, iterable);\n  }\n\n  if (isAsyncIterable<string>(iterable)) {\n    return async(sep, iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default split;\n"]}