import toArray from "../toArray.js";
import isArray from "../isArray.js";
import isString from "../isString.js";
import { isAsyncIterable, isIterable } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
function* sync(iterable) {
    const arr = isArray(iterable) || isString(iterable) ? iterable : toArray(iterable);
    for (let i = arr.length - 1; i >= 0; i--) {
        yield arr[i];
    }
}
async function* asyncSequential(iterable) {
    const arr = await toArray(iterable);
    for (let i = arr.length - 1; i >= 0; i--) {
        yield arr[i];
    }
}
function async(iterable) {
    let iterator;
    return {
        [Symbol.asyncIterator]() {
            return this;
        },
        async next(_concurrent) {
            if (iterator === undefined) {
                iterator = isConcurrent(_concurrent)
                    ? asyncSequential(concurrent(_concurrent.length, iterable))
                    : asyncSequential(iterable);
            }
            return iterator.next(_concurrent);
        },
    };
}
function reverse(iterable) {
    if (isIterable(iterable)) {
        return sync(iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default reverse;
//# sourceMappingURL=reverse.js.map