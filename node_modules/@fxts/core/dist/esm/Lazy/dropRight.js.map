{"version":3,"file":"dropRight.js","sourceRoot":"","sources":["../../../src/Lazy/dropRight.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,YAAY,CAAC;AACjC,OAAO,QAAQ,MAAM,aAAa,CAAC;AACnC,OAAO,OAAO,MAAM,YAAY,CAAC;AAEjC,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AACjE,OAAO,UAAU,EAAE,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAExD,QAAQ,CAAC,CAAC,IAAI,CAAI,MAAc,EAAE,QAAqB;IACrD,MAAM,GAAG,GACP,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACzE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC5C,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KACd;AACH,CAAC;AAED,KAAK,SAAS,CAAC,CAAC,eAAe,CAAI,MAAc,EAAE,QAA0B;IAC3E,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC5C,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KACd;AACH,CAAC;AAED,SAAS,KAAK,CACZ,MAAc,EACd,QAA0B;IAE1B,IAAI,QAA0B,CAAC;IAC/B,OAAO;QACL,CAAC,MAAM,CAAC,aAAa,CAAC;YACpB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,CAAC,WAAgB;YACnB,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC;oBAClC,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;oBACnE,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;aACvC;YAED,OAAO,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC;KACF,CAAC;AACJ,CAAC;AA0DD,SAAS,SAAS,CAChB,MAAc,EACd,QAAY;IAKZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,CAAC,QAAW,EAAiC,EAAE;YACpD,OAAO,SAAS,CACd,MAAM,EACN,QAAe,CACiB,CAAC;QACrC,CAAC,CAAC;KACH;IAED,IAAI,MAAM,GAAG,CAAC,EAAE;QACd,MAAM,IAAI,UAAU,CAAC,iCAAiC,CAAC,CAAC;KACzD;IAED,IAAI,UAAU,CAAI,QAAQ,CAAC,EAAE;QAC3B,OAAO,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KAC/B;IAED,IAAI,eAAe,CAAI,QAAQ,CAAC,EAAE;QAChC,OAAO,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KAChC;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,SAAS,CAAC","sourcesContent":["import isArray from \"../isArray\";\nimport isString from \"../isString\";\nimport toArray from \"../toArray\";\nimport ReturnIterableIteratorType from \"../types/ReturnIterableIteratorType\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport concurrent, { isConcurrent } from \"./concurrent\";\n\nfunction* sync<T>(length: number, iterable: Iterable<T>) {\n  const arr =\n    isArray(iterable) || isString(iterable) ? iterable : toArray(iterable);\n  for (let i = 0; i < arr.length - length; i++) {\n    yield arr[i];\n  }\n}\n\nasync function* asyncSequential<T>(length: number, iterable: AsyncIterable<T>) {\n  const arr = await toArray(iterable);\n  for (let i = 0; i < arr.length - length; i++) {\n    yield arr[i];\n  }\n}\n\nfunction async<A>(\n  length: number,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A> {\n  let iterator: AsyncIterator<A>;\n  return {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n\n    next(_concurrent: any) {\n      if (iterator === undefined) {\n        iterator = isConcurrent(_concurrent)\n          ? asyncSequential(length, concurrent(_concurrent.length, iterable))\n          : asyncSequential(length, iterable);\n      }\n\n      return iterator.next(_concurrent);\n    },\n  };\n}\n\n/**\n * Returns all but the last `length` elements of the given iterable.\n *\n * @example\n * ```ts\n * const iter = dropRight(2, [1, 2, 3, 4]);\n * iter.next() // {done:false, value: 1}\n * iter.next() // {done:false, value: 2}\n * iter.next() // {done:true, value: undefined}\n *\n * // with pipe\n * pipe(\n *  [1, 2, 3, 4],\n *  dropRight(2),\n *  toArray,\n * ); // [1, 2]\n *\n * pipe(\n *  \"abcde\",\n *  dropRight(2),\n *  toArray,\n * ); // [\"a\", \"b\", \"c\"]\n *\n * await pipe(\n *  Promise.resolve([1, 2, 3, 4]),\n *  dropRight(2),\n *  toArray,\n * ); // [1, 2]\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3), Promise.resolve(4)],\n *  toAsync,\n *  dropRight(2),\n *  toArray,\n * ); // [1, 2]\n * ```\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\n// prettier-ignore\nfunction dropRight<A>(\n  length: number,\n  iterable: Iterable<A>\n): IterableIterator<A>;\n\nfunction dropRight<A>(\n  length: number,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A>;\n\nfunction dropRight<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  length: number,\n): (iterable: A) => ReturnIterableIteratorType<A>;\n\nfunction dropRight<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  length: number,\n  iterable?: A,\n):\n  | IterableIterator<A>\n  | AsyncIterableIterator<A>\n  | ((iterable: A) => ReturnIterableIteratorType<A>) {\n  if (iterable === undefined) {\n    return (iterable: A): ReturnIterableIteratorType<A> => {\n      return dropRight(\n        length,\n        iterable as any,\n      ) as ReturnIterableIteratorType<A>;\n    };\n  }\n\n  if (length < 0) {\n    throw new RangeError(\"'length' must be greater than 0\");\n  }\n\n  if (isIterable<A>(iterable)) {\n    return sync(length, iterable);\n  }\n\n  if (isAsyncIterable<A>(iterable)) {\n    return async(length, iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default dropRight;\n"]}