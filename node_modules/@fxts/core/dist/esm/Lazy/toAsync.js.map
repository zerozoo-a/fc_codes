{"version":3,"file":"toAsync.js","sourceRoot":"","sources":["../../../src/Lazy/toAsync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAS,OAAO,CAAI,IAA8B;IAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;IACzC,OAAO;QACL,KAAK,CAAC,IAAI;YACR,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxC,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;gBACpB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;aACjD;iBAAM;gBACL,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;aACxB;QACH,CAAC;QACD,CAAC,MAAM,CAAC,aAAa,CAAC;YACpB,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;AACJ,CAAC;AAED,eAAe,OAAO,CAAC","sourcesContent":["import { isPromise } from \"../_internal/utils\";\n\n/**\n * Returns AsyncIterable, `toAsync` used when you want to handle Promise values inside Iterable.\n *\n * @example\n * ```ts\n * let acc = 0;\n * for await (const item of toAsync([1, 2, 3, 4, 5])) {\n *   acc += item;\n * }\n * // acc: 15\n *\n * // with pipe\n * await pipe(\n *  [Promise.resolve(1),Promise.resolve(2),Promise.resolve(3)],\n *  toAsync,\n *  map(a => a + 10),\n *  toArray, // [11, 12, 13]\n * );\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-toasync-00nxr | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\nfunction toAsync<T>(iter: Iterable<T | Promise<T>>): AsyncIterableIterator<T> {\n  const iterator = iter[Symbol.iterator]();\n  return {\n    async next() {\n      const { value, done } = iterator.next();\n      if (isPromise(value)) {\n        return value.then((value) => ({ done, value }));\n      } else {\n        return { done, value };\n      }\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n\nexport default toAsync;\n"]}