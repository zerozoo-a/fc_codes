{"version":3,"file":"takeRight.js","sourceRoot":"","sources":["../../../src/Lazy/takeRight.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAGjE,OAAO,OAAO,MAAM,YAAY,CAAC;AACjC,OAAO,OAAO,MAAM,YAAY,CAAC;AACjC,OAAO,QAAQ,MAAM,aAAa,CAAC;AACnC,OAAO,UAAU,EAAE,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAExD,QAAQ,CAAC,CAAC,IAAI,CAAI,MAAc,EAAE,QAAqB;IACrD,MAAM,GAAG,GACP,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACzE,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;IAClC,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACvC,IAAI,GAAG,CAAC,CAAC,CAAC;YAAE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KAC1B;AACH,CAAC;AAED,KAAK,SAAS,CAAC,CAAC,eAAe,CAAI,MAAc,EAAE,QAA0B;IAC3E,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpC,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;IAClC,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACvC,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;YACV,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;SACd;KACF;AACH,CAAC;AAED,SAAS,KAAK,CACZ,MAAc,EACd,QAA0B;IAE1B,IAAI,QAA0B,CAAC;IAC/B,OAAO;QACL,CAAC,MAAM,CAAC,aAAa,CAAC;YACpB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,CAAC,WAAgB;YACnB,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC;oBAClC,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;oBACnE,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;aACvC;YAED,OAAO,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC;KACF,CAAC;AACJ,CAAC;AAsDD,SAAS,SAAS,CAChB,CAAS,EACT,QAAY;IAKZ,IAAI,CAAC,GAAG,CAAC,EAAE;QACT,MAAM,IAAI,UAAU,CAAC,iCAAiC,CAAC,CAAC;KACzD;IAED,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,CAAC,QAAW,EAAE,EAAE;YACrB,OAAO,SAAS,CAAC,CAAC,EAAE,QAAe,CAAkC,CAAC;QACxE,CAAC,CAAC;KACH;IAED,IAAI,UAAU,CAAmB,QAAQ,CAAC,EAAE;QAC1C,OAAO,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC1B;IAED,IAAI,eAAe,CAAmB,QAAQ,CAAC,EAAE;QAC/C,OAAO,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC3B;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,SAAS,CAAC","sourcesContent":["import { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport ReturnIterableIteratorType from \"../types/ReturnIterableIteratorType\";\nimport IterableInfer from \"../types/IterableInfer\";\nimport toArray from \"../toArray\";\nimport isArray from \"../isArray\";\nimport isString from \"../isString\";\nimport concurrent, { isConcurrent } from \"./concurrent\";\n\nfunction* sync<A>(length: number, iterable: Iterable<A>): IterableIterator<A> {\n  const arr =\n    isArray(iterable) || isString(iterable) ? iterable : toArray(iterable);\n  const index = arr.length - length;\n  for (let i = index; i < arr.length; i++) {\n    if (arr[i]) yield arr[i];\n  }\n}\n\nasync function* asyncSequential<T>(length: number, iterable: AsyncIterable<T>) {\n  const arr = await toArray(iterable);\n  const index = arr.length - length;\n  for (let i = index; i < arr.length; i++) {\n    if (arr[i]) {\n      yield arr[i];\n    }\n  }\n}\n\nfunction async<A>(\n  length: number,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A> {\n  let iterator: AsyncIterator<A>;\n  return {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    next(_concurrent: any) {\n      if (iterator === undefined) {\n        iterator = isConcurrent(_concurrent)\n          ? asyncSequential(length, concurrent(_concurrent.length, iterable))\n          : asyncSequential(length, iterable);\n      }\n\n      return iterator.next(_concurrent);\n    },\n  };\n}\n\n/**\n * Returns Iterable/AsyncIterable that taken the last argument `l` values from iterable\n *\n * @example\n * ```ts\n * const iter = takeRight(2, [0, 1, 2, 3, 4, 5, 6]);\n * iter.next() // {done:false, value: 5}\n * iter.next() // {done:false, value: 6}\n * iter.next() // {done:true, value: undefined}\n *\n * // with pipe\n * pipe(\n *  [0, 1, 2, 3, 4, 5, 6],\n *  takeRight(2),\n *  toArray,\n * ); // [5, 6]\n *\n * await pipe(\n *  Promise.resolve([0, 1, 2, 3, 4, 5, 6]),\n *  takeRight(2),\n *  toArray,\n * ); // [5, 6]\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve(0), Promise.resolve(1), Promise.resolve(2),\n *   Promise.resolve(3), Promise.resolve(4), Promise.resolve(5), Promise.resolve(6)],\n *  toAsync,\n *  takeRight(2),\n *  toArray,\n * ); // [5, 6]\n * ```\n *\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\n// prettier-ignore\nfunction takeRight<A>(\n  l: number,\n  iterable: Iterable<A>\n): IterableIterator<A>;\n\nfunction takeRight<A>(\n  l: number,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A>;\n\nfunction takeRight<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  l: number,\n): (iterable: A) => ReturnIterableIteratorType<A>;\n\nfunction takeRight<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  l: number,\n  iterable?: A,\n):\n  | IterableIterator<IterableInfer<A>>\n  | AsyncIterableIterator<IterableInfer<A>>\n  | ((iterable: A) => ReturnIterableIteratorType<A>) {\n  if (l < 0) {\n    throw new RangeError(\"'length' must be greater than 0\");\n  }\n\n  if (iterable === undefined) {\n    return (iterable: A) => {\n      return takeRight(l, iterable as any) as ReturnIterableIteratorType<A>;\n    };\n  }\n\n  if (isIterable<IterableInfer<A>>(iterable)) {\n    return sync(l, iterable);\n  }\n\n  if (isAsyncIterable<IterableInfer<A>>(iterable)) {\n    return async(l, iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default takeRight;\n"]}