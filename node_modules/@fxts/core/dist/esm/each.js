import { isAsyncIterable, isIterable, isPromise } from "./_internal/utils.js";
function sync(f, iterable) {
    for (const a of iterable) {
        f(a);
    }
}
async function async(f, iterable) {
    for await (const item of iterable) {
        const value = f(item);
        if (isPromise(value)) {
            await value;
        }
    }
}
function each(f, iterable) {
    if (iterable === undefined) {
        return (iterable) => {
            return each(f, iterable);
        };
    }
    if (isIterable(iterable)) {
        return sync(f, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(f, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default each;
//# sourceMappingURL=each.js.map