import find from "./find.js";
import zipWithIndex from "./Lazy/zipWithIndex.js";
import pipe from "./pipe.js";
import pipe1 from "./pipe1.js";
import { isAsyncIterable, isIterable } from "./_internal/utils.js";
function findIndex(f, iterable) {
    if (iterable === undefined) {
        return (iterable) => findIndex(f, iterable);
    }
    if (isIterable(iterable)) {
        return pipe(zipWithIndex(iterable), find(([, a]) => f(a)), (res) => (res ? res[0] : -1));
    }
    if (isAsyncIterable(iterable)) {
        return pipe(zipWithIndex(iterable), find(([, a]) => pipe1(a, f)), (res) => (res ? res[0] : -1));
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default findIndex;
//# sourceMappingURL=findIndex.js.map