import peek from "./Lazy/peek.js";
import pipe from "./pipe.js";
import sum from "./sum.js";
import { isAsyncIterable, isIterable } from "./_internal/utils.js";
/**
 * Returns the average of the given (Iterable/AsyncIterable) (mean)
 *
 * @example
 * ```ts
 * average([]); // NaN
 * average([1, 2, 3, 4, 5]); // 6
 * await average(toAsync([1, 2, 3, 4, 5])); // 6
 *
 * // with pipe
 * pipe(
 *  [1, 2, 3, 4, 5],
 *  average,
 * ); // 6
 * ```
 *
 * see {@link https://fxts.dev/docs/pipe | pipe}
 */
function average(iterable) {
    let size = 0;
    if (isIterable(iterable)) {
        return pipe(iterable, peek(() => size++), sum, (a) => (size === 0 ? NaN : a / size));
    }
    if (isAsyncIterable(iterable)) {
        return pipe(iterable, peek(() => size++), sum, (a) => (size === 0 ? NaN : a / size));
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default average;
//# sourceMappingURL=average.js.map