{"version":3,"file":"tap.js","sourceRoot":"","sources":["../../src/tap.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAyB9C,SAAS,GAAG,CACV,CAAyB,EACzB,CAAK;IAKL,IAAI,CAAC,KAAK,SAAS,EAAE;QACnB,OAAO,CAAC,CAAI,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAC5B;IAED,MAAM,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAQ,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CAAe,CAAS,CAAC;IAC1E,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE;QAClB,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;KAC1B;IAED,OAAO,CAAC,CAAC;AACX,CAAC;AAED,eAAe,GAAG,CAAC","sourcesContent":["import Awaited from \"./types/Awaited\";\nimport { isPromise } from \"./_internal/utils\";\n/**\n * This method invokes interceptor and returns a value.\n * The interceptor is invoked with one argument.\n *\n * @example\n * ```ts\n * tap(console.log, [1,2,3,4,5])\n * // log [1, 2, 3, 4, 5]\n * // return [1, 2, 3, 4, 5]\n *\n * tap(async (a) => console.log(a), [1,2,3,4,5]);\n * // log [1, 2, 3, 4, 5]\n * // return Promise<[1, 2, 3, 4, 5]>\n * ```\n */\nfunction tap<T, U>(\n  f: (arg: Awaited<T>) => U,\n  v: T,\n): U extends Promise<any> ? Promise<Awaited<T>> : T;\n\nfunction tap<T, U>(\n  f: (arg: Awaited<T>) => U,\n): (v: T) => U extends Promise<any> ? Promise<Awaited<T>> : T;\n\nfunction tap<T, U>(\n  f: (arg: Awaited<T>) => U,\n  v?: T,\n):\n  | T\n  | Promise<T>\n  | ((v: T) => U extends Promise<any> ? Promise<Awaited<T>> : T) {\n  if (v === undefined) {\n    return (v: T) => tap(f, v);\n  }\n\n  const res = isPromise(v) ? v.then(f as any) : (f(v as Awaited<T>) as any);\n  if (isPromise(res)) {\n    return res.then(() => v);\n  }\n\n  return v;\n}\n\nexport default tap;\n"]}