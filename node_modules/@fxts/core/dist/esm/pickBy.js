import toArray from "./toArray.js";
import filter from "./Lazy/filter.js";
import toAsync from "./Lazy/toAsync.js";
import map from "./Lazy/map.js";
import zip from "./Lazy/zip.js";
import pipe from "./pipe.js";
import { isPromise } from "./_internal/utils.js";
function pickBy(f, obj) {
    if (obj === undefined) {
        return (obj) => pickBy(f, obj);
    }
    const entries = Object.entries(obj);
    const conditions = entries.map((entry) => f(entry));
    const isAsync = conditions.some((c) => isPromise(c));
    if (isAsync) {
        return pipe(entries, zip(toAsync(conditions)), filter(([cond]) => cond), map(([, entry]) => entry), toArray, Object.fromEntries);
    }
    else {
        return pipe(entries, zip(conditions), filter(([cond]) => cond), map(([, entry]) => entry), Object.fromEntries);
    }
}
export default pickBy;
//# sourceMappingURL=pickBy.js.map