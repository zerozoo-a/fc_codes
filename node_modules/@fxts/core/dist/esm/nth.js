import { isAsyncIterable, isIterable } from "./_internal/utils.js";
function sync(index, iterable) {
    let idx = 0;
    for (const item of iterable) {
        if (idx++ === index) {
            return item;
        }
    }
}
async function async(index, iterable) {
    let idx = 0;
    for await (const item of iterable) {
        if (idx++ === index) {
            return item;
        }
    }
}
function nth(index, iterable) {
    if (iterable === undefined) {
        return (iterable) => {
            return nth(index, iterable);
        };
    }
    if (index < 0) {
        throw new RangeError("'index' must be over 0");
    }
    if (isIterable(iterable)) {
        return sync(index, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(index, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default nth;
//# sourceMappingURL=nth.js.map