import { isAsyncIterable, isIterable } from "./_internal/utils.js";
import toArray from "./toArray.js";
function inner(obj, keys) {
    return Object.fromEntries(Object.entries(obj).filter(([k]) => keys.has(k)));
}
function sync(iterable, obj) {
    const keys = new Set(iterable);
    return inner(obj, keys);
}
async function async(iterable, obj) {
    const keys = new Set(await toArray(iterable));
    return inner(obj, keys);
}
function pick(iterable, obj) {
    if (obj === undefined) {
        return (obj) => pick(iterable, obj);
    }
    if (isIterable(iterable)) {
        return sync(iterable, obj);
    }
    else if (isAsyncIterable(iterable)) {
        return async(iterable, obj);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default pick;
//# sourceMappingURL=pick.js.map