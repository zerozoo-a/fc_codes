import { isAsyncIterable, isIterable, isPromise } from "./_internal/utils.js";
import { AsyncFunctionException } from "./_internal/error.js";
import reduce from "./reduce.js";
function groupBy(f, iterable) {
    if (iterable === undefined) {
        return (iterable) => {
            return groupBy(f, iterable);
        };
    }
    const obj = {};
    if (isIterable(iterable)) {
        return reduce((group, a) => {
            const key = f(a);
            if (isPromise(key)) {
                throw new AsyncFunctionException();
            }
            return (group[key] || (group[key] = [])).push(a), group;
        }, obj, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return reduce(async (group, a) => {
            const key = await f(a);
            return (group[key] || (group[key] = [])).push(a), group;
        }, obj, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default groupBy;
//# sourceMappingURL=groupBy.js.map