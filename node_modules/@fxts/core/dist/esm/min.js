import { isAsyncIterable, isIterable } from "./_internal/utils.js";
function sync(iterable) {
    let n = NaN;
    for (const a of iterable) {
        if (Number.isNaN(a)) {
            return a;
        }
        else if (a < n || Number.isNaN(n)) {
            n = a;
        }
    }
    if (Number.isNaN(n)) {
        return Infinity;
    }
    return n;
}
async function async(iterable) {
    let n = NaN;
    for await (const a of iterable) {
        if (Number.isNaN(a)) {
            return a;
        }
        else if (a < n || Number.isNaN(n)) {
            n = a;
        }
    }
    if (Number.isNaN(n)) {
        return Infinity;
    }
    return n;
}
function min(iterable) {
    if (isIterable(iterable)) {
        return sync(iterable);
    }
    else if (isAsyncIterable(iterable)) {
        return async(iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default min;
//# sourceMappingURL=min.js.map