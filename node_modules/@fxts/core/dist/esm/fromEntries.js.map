{"version":3,"file":"fromEntries.js","sourceRoot":"","sources":["../../src/fromEntries.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,UAAU,CAAC;AAI9B,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAoChE,SAAS,WAAW,CAClB,IAAoC;IAEpC,MAAM,GAAG,GAAqB,EAAE,CAAC;IACjC,MAAM,OAAO,GAAG,CAAC,GAAqB,EAAE,CAAC,GAAG,EAAE,GAAG,CAAI,EAAoB,EAAE;QACzE,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QACf,OAAO,GAAG,CAAC;IACb,CAAC,CAAC;IACF,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE;QACzB,OAAO,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KACnC;SAAM,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;QAC3B,OAAO,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KACnC;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,WAAW,CAAC","sourcesContent":["import reduce from \"./reduce\";\nimport IterableInfer from \"./types/IterableInfer\";\nimport Key from \"./types/Key\";\nimport ReturnValueType from \"./types/ReturnValueType\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\n\n/**\n * Returns an object from string keyed-value pairs.\n *\n * @example\n * ```ts\n * const arr = [\n *     [\"a\", 1],\n *     [\"b\", true],\n *     [\"c\", \"hello\"],\n *     [\"d\", { d1: 1, d2: 3 }],\n * ] as (\n *     | [\"a\", number]\n *     | [\"b\", boolean]\n *     | [\"c\", string]\n *     | [\"d\", { d1: number, d2: number; }]\n * )[];\n * fromEntries(arr); // { a: 1, b: true, c: 'hello', d: { d1: 1, d2: 3 } }\n * ```\n *\n *\n * see {@link https://fxts.dev/docs/entries | entries}\n */\n\nfunction fromEntries<\n  U extends [Key, any] | readonly [Key, any],\n  T extends Iterable<U> | AsyncIterable<U>,\n>(\n  iterable: T,\n): ReturnValueType<\n  T,\n  {\n    [K in IterableInfer<T> as K[0]]: K[1];\n  }\n>;\nfunction fromEntries<T extends [Key, any]>(\n  iter: Iterable<T> | AsyncIterable<T>,\n) {\n  const obj: Record<Key, any> = {};\n  const reducer = (obj: Record<Key, any>, [key, val]: T): Record<Key, any> => {\n    obj[key] = val;\n    return obj;\n  };\n  if (isAsyncIterable(iter)) {\n    return reduce(reducer, obj, iter);\n  } else if (isIterable(iter)) {\n    return reduce(reducer, obj, iter);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default fromEntries;\n"]}