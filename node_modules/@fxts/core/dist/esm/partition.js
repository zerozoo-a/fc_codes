import { isAsyncIterable, isIterable, isPromise } from "./_internal/utils.js";
import groupBy from "./groupBy.js";
import { AsyncFunctionException } from "./_internal/error.js";
function partition(f, iterable) {
    if (iterable === undefined) {
        return (iterable) => {
            return partition(f, iterable);
        };
    }
    if (isIterable(iterable)) {
        const group = groupBy((a) => {
            const key = f(a);
            if (isPromise(key)) {
                throw new AsyncFunctionException();
            }
            return `${Boolean(key)}`;
        }, iterable);
        return [group["true"] || [], group["false"] || []];
    }
    if (isAsyncIterable(iterable)) {
        const group = groupBy(async (a) => `${Boolean(await f(a))}`, iterable);
        return group.then((group) => [group["true"] || [], group["false"] || []]);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default partition;
//# sourceMappingURL=partition.js.map