{"version":3,"file":"head.js","sourceRoot":"","sources":["../../src/head.ts"],"names":[],"mappings":";;;AAAA,6DAA+B;AAC/B,wDAA0B;AAC1B,8DAAgC;AAChC,2CAAgE;AA8ChE,SAAS,IAAI,CAAI,QAAwC;IACvD,IAAI,IAAA,kBAAU,EAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,IAAA,cAAI,EAAC,IAAA,cAAI,EAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,iBAAO,EAAE,UAAC,EAAG;gBAAH,KAAA,qBAAG,EAAF,CAAC,QAAA;YAAM,OAAA,CAAC;QAAD,CAAC,CAAC,CAAC;KACrD;IACD,IAAI,IAAA,uBAAe,EAAC,QAAQ,CAAC,EAAE;QAC7B,OAAO,IAAA,cAAI,EAAC,IAAA,cAAI,EAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,iBAAO,EAAE,UAAC,EAAG;gBAAH,KAAA,qBAAG,EAAF,CAAC,QAAA;YAAM,OAAA,CAAC;QAAD,CAAC,CAAC,CAAC;KACrD;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,kBAAe,IAAI,CAAC","sourcesContent":["import take from \"./Lazy/take\";\nimport pipe from \"./pipe\";\nimport toArray from \"./toArray\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\n\ntype HeadReturnType<T> = T extends readonly [a: infer H, ...rest: any[]]\n  ? H\n  : T extends readonly never[]\n  ? undefined\n  : T extends AsyncIterable<infer U>\n  ? Promise<U | undefined>\n  : T extends Iterable<infer U>\n  ? U | undefined\n  : never;\n\n/**\n * Returns the first element of Iterable/AsyncIterable.\n *\n * @example\n * ```ts\n * head([1, 2, 3, 4, 5]); // 1\n *\n * // with pipe\n * pipe(\n *  [1, 2, 3, 4, 5],\n *  head,\n * ); // 1\n *\n * await pipe(\n *  Promise.resolve([1, 2, 3, 4, 5]),\n *  head,\n * ); // 1\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)],\n *  toAsync,\n *  head,\n * ); // 1\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-head-4sh8u | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync}\n */\nfunction head<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  iterable: T,\n): HeadReturnType<T>;\n\nfunction head<A>(iterable: Iterable<A> | AsyncIterable<A>) {\n  if (isIterable(iterable)) {\n    return pipe(take(1, iterable), toArray, ([a]) => a);\n  }\n  if (isAsyncIterable(iterable)) {\n    return pipe(take(1, iterable), toArray, ([a]) => a);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default head;\n"]}