{"version":3,"file":"sum.js","sourceRoot":"","sources":["../../src/sum.ts"],"names":[],"mappings":";;;AAAA,sDAAwB;AACxB,4DAA8B;AAE9B,2CAAgE;AAEhE;;;;;;;;;;GAUG;AACH,SAAS,GAAG,CAMV,QAAW;IACX,IAAI,IAAA,kBAAU,EAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,IAAA,gBAAM,EAAC,aAAG,EAAE,QAAQ,CAAuB,CAAC;KACpD;IAED,IAAI,IAAA,uBAAe,EAAC,QAAQ,CAAC,EAAE;QAC7B,OAAO,IAAA,gBAAM,EAAC,aAAG,EAAE,QAAQ,CAAuB,CAAC;KACpD;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,kBAAe,GAAG,CAAC","sourcesContent":["import add from \"./add\";\nimport reduce from \"./reduce\";\nimport ReturnValueType from \"./types/ReturnValueType\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\n\n/**\n * Adds all the elements of a Iterable/AsyncIterable.\n *\n * @example\n * ```ts\n * sum([1, 2, 3, 4]); // 10\n * sum(['a', 'b', 'c']); // 'abc'\n * await sum(toAsync([1, 2, 3, 4])); // 10\n * await sum(toAsync(['a', 'b', 'c'])); // 'abc'\n * ```\n */\nfunction sum<\n  A extends\n    | Iterable<number>\n    | AsyncIterable<number>\n    | Iterable<string>\n    | AsyncIterable<string>,\n>(iterable: A): ReturnValueType<A> {\n  if (isIterable(iterable)) {\n    return reduce(add, iterable) as ReturnValueType<A>;\n  }\n\n  if (isAsyncIterable(iterable)) {\n    return reduce(add, iterable) as ReturnValueType<A>;\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default sum;\n"]}