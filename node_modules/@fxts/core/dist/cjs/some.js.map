{"version":3,"file":"some.js","sourceRoot":"","sources":["../../src/some.ts"],"names":[],"mappings":";;;AAAA,4DAA8B;AAC9B,2DAA6B;AAC7B,uEAAyC;AACzC,wDAA0B;AAC1B,gEAAkC;AAClC,2CAAgE;AA0DhE,SAAS,IAAI,CAIX,CAA6B,EAC7B,QAAY;IAEZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,UAAC,QAAW;YACjB,OAAO,IAAI,CAAC,CAAC,EAAE,QAAe,CAAgC,CAAC;QACjE,CAAC,CAAC;KACH;IAED,IAAI,IAAA,kBAAU,EAAmB,QAAQ,CAAC,EAAE;QAC1C,OAAO,IAAA,cAAI,EACT,IAAA,aAAG,EAAC,CAAC,EAAE,QAAQ,CAAC,EAChB,IAAA,mBAAS,EAAC,kBAAQ,CAAC,EACnB,IAAA,gBAAM,EAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,IAAI,CAAC,EAAN,CAAM,CAAC,EACxB,OAAO,CACR,CAAC;KACH;IAED,IAAI,IAAA,uBAAe,EAAmB,QAAQ,CAAC,EAAE;QAC/C,OAAO,IAAA,cAAI,EACT,IAAA,aAAG,EAAC,CAAC,EAAE,QAAQ,CAAC,EAChB,IAAA,mBAAS,EAAC,kBAAQ,CAAC,EACnB,IAAA,gBAAM,EAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,IAAI,CAAC,EAAN,CAAM,CAAC,EACxB,OAAO,CACR,CAAC;KACH;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,kBAAe,IAAI,CAAC","sourcesContent":["import reduce from \"./reduce\";\nimport map from \"./Lazy/map\";\nimport takeUntil from \"./Lazy/takeUntil\";\nimport pipe from \"./pipe\";\nimport identity from \"./identity\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\nimport IterableInfer from \"./types/IterableInfer\";\nimport ReturnValueType from \"./types/ReturnValueType\";\nimport Arrow from \"./types/Arrow\";\n\n/**\n * Returns true if any of the values in Iterable/AsyncIterable pass `f` truth test\n *\n * @example\n * ```ts\n * some(a=> a, [null, 0, 1, false]); // true\n *\n * // with pipe\n * pipe(\n *  [{id:1, age: 27}, {id:2, age: 36}, {id:3, age: 42}],\n *  map(user => user.age),\n *  some(age => age > 40),\n * ); // true\n *\n * await pipe(\n *  Promise.resolve([{id:1, age: 27}, {id:2, age: 36}, {id:3, age: 42}]),\n *  map(user => user.age),\n *  some(age => age > 40),\n * ); // true\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve({id:1, age: 27}), Promise.resolve({id:2, age: 36}), Promise.resolve({id:3, age: 42})],\n *  toAsync,\n *  map(user => user.age),\n *  some(age => age > 40),\n * ); // true\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-some-inp3l | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/map | map}\n */\n// prettier-ignore\n\nfunction some<A extends readonly []>(\n    f: Arrow,\n    iterable: A\n): false;\n\nfunction some<A, B = unknown>(f: (a: A) => B, iterable: Iterable<A>): boolean;\n\nfunction some<A, B = unknown>(\n  f: (a: A) => B,\n  iterable: AsyncIterable<A>,\n): Promise<boolean>;\n\nfunction some<\n  A extends Iterable<unknown> | AsyncIterable<unknown>,\n  B = unknown,\n>(f: (a: IterableInfer<A>) => B): (a: A) => ReturnValueType<A, boolean>;\n\nfunction some<\n  A extends Iterable<unknown> | AsyncIterable<unknown>,\n  B = unknown,\n>(\n  f: (a: IterableInfer<A>) => B,\n  iterable?: A,\n): boolean | Promise<boolean> | ((iterable: A) => ReturnValueType<A, boolean>) {\n  if (iterable === undefined) {\n    return (iterable: A) => {\n      return some(f, iterable as any) as ReturnValueType<A, boolean>;\n    };\n  }\n\n  if (isIterable<IterableInfer<A>>(iterable)) {\n    return pipe(\n      map(f, iterable),\n      takeUntil(identity),\n      reduce((a, b) => a || b),\n      Boolean,\n    );\n  }\n\n  if (isAsyncIterable<IterableInfer<A>>(iterable)) {\n    return pipe(\n      map(f, iterable),\n      takeUntil(identity),\n      reduce((a, b) => a || b),\n      Boolean,\n    );\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default some;\n"]}