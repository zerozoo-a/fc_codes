"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var take_1 = tslib_1.__importDefault(require("./take"));
var toArray_1 = tslib_1.__importDefault(require("../toArray"));
var utils_1 = require("../_internal/utils");
var concurrent_1 = tslib_1.__importStar(require("./concurrent"));
function sync(size, iterable) {
    var iterator, c;
    var _a;
    return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                iterator = iterable[Symbol.iterator]();
                _b.label = 1;
            case 1:
                if (!true) return [3 /*break*/, 4];
                c = (0, toArray_1.default)((0, take_1.default)(size, (_a = {},
                    _a[Symbol.iterator] = function () {
                        return iterator;
                    },
                    _a)));
                if (!(c.length > 0)) return [3 /*break*/, 3];
                return [4 /*yield*/, c];
            case 2:
                _b.sent();
                _b.label = 3;
            case 3:
                if (c.length < size)
                    return [2 /*return*/];
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/];
        }
    });
}
function asyncSequential(size, iterable) {
    return tslib_1.__asyncGenerator(this, arguments, function asyncSequential_1() {
        var i, items, iterable_1, iterable_1_1, item, e_1_1;
        var e_1, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    i = 0;
                    items = [];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 8, 9, 14]);
                    iterable_1 = tslib_1.__asyncValues(iterable);
                    _b.label = 2;
                case 2: return [4 /*yield*/, tslib_1.__await(iterable_1.next())];
                case 3:
                    if (!(iterable_1_1 = _b.sent(), !iterable_1_1.done)) return [3 /*break*/, 7];
                    item = iterable_1_1.value;
                    if (i++ < size) {
                        items.push(item);
                    }
                    if (!(i === size)) return [3 /*break*/, 6];
                    return [4 /*yield*/, tslib_1.__await(items)];
                case 4: return [4 /*yield*/, _b.sent()];
                case 5:
                    _b.sent();
                    i = 0;
                    items = [];
                    _b.label = 6;
                case 6: return [3 /*break*/, 2];
                case 7: return [3 /*break*/, 14];
                case 8:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 14];
                case 9:
                    _b.trys.push([9, , 12, 13]);
                    if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) return [3 /*break*/, 11];
                    return [4 /*yield*/, tslib_1.__await(_a.call(iterable_1))];
                case 10:
                    _b.sent();
                    _b.label = 11;
                case 11: return [3 /*break*/, 13];
                case 12:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 13: return [7 /*endfinally*/];
                case 14:
                    if (!items.length) return [3 /*break*/, 17];
                    return [4 /*yield*/, tslib_1.__await(items)];
                case 15: return [4 /*yield*/, _b.sent()];
                case 16:
                    _b.sent();
                    _b.label = 17;
                case 17: return [2 /*return*/];
            }
        });
    });
}
function async(size, iterable) {
    var _a;
    var _iterator;
    return _a = {
            next: function (_concurrent) {
                return tslib_1.__awaiter(this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        if (_iterator === undefined) {
                            _iterator = (0, concurrent_1.isConcurrent)(_concurrent)
                                ? asyncSequential(size, (0, concurrent_1.default)(_concurrent.length, iterable))
                                : asyncSequential(size, iterable);
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function chunk(size, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return chunk(size, iterable);
        };
    }
    if ((0, utils_1.isIterable)(iterable)) {
        if (size < 1) {
            return (0, utils_1.empty)();
        }
        else {
            return sync(size, iterable);
        }
    }
    if ((0, utils_1.isAsyncIterable)(iterable)) {
        if (size < 1) {
            return (0, utils_1.asyncEmpty)();
        }
        else {
            return async(size, iterable);
        }
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
exports.default = chunk;
//# sourceMappingURL=chunk.js.map