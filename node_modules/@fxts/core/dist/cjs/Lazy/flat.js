"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var concurrent_1 = tslib_1.__importStar(require("./concurrent"));
var last_1 = tslib_1.__importDefault(require("../last"));
var utils_1 = require("../_internal/utils");
var append_1 = tslib_1.__importDefault(require("./append"));
var concat_1 = tslib_1.__importDefault(require("./concat"));
var isFlatAble = function (a) {
    return typeof a !== "string" && (0, utils_1.isIterable)(a);
};
function sync(iterable, depth) {
    var _a;
    var iterator = iterable[Symbol.iterator]();
    var iteratorStack = [
        iterator,
    ];
    return _a = {},
        _a[Symbol.iterator] = function () {
            return this;
        },
        _a.next = function () {
            var iterator = (0, last_1.default)(iteratorStack);
            if (!iterator) {
                return { done: true, value: undefined };
            }
            var _a = iterator.next(), value = _a.value, done = _a.done;
            if (done) {
                iteratorStack.pop();
                return this.next();
            }
            if (isFlatAble(value) && iteratorStack.length < depth + 1) {
                iteratorStack.push(value[Symbol.iterator]());
                return this.next();
            }
            return {
                done: false,
                value: value,
            };
        },
        _a;
}
function asyncConcurrent(iterable, depth) {
    var _a;
    var _this = this;
    var originIterator = iterable[Symbol.asyncIterator]();
    var prevItem = Promise.resolve();
    var flattenIterator = (0, utils_1.empty)();
    var finished = false;
    var settlementQueue = [];
    var fillItem = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var _a, done, value;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, originIterator.next()];
                case 1:
                    _a = _b.sent(), done = _a.done, value = _a.value;
                    if (done) {
                        return [2 /*return*/, false];
                    }
                    if (isFlatAble(value)) {
                        flattenIterator = (0, concat_1.default)(sync(value, depth - 1), flattenIterator);
                    }
                    else {
                        flattenIterator = (0, append_1.default)(value, flattenIterator);
                    }
                    return [2 /*return*/, true];
            }
        });
    }); };
    var pullItem = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var _a, value, done, hasItem;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (finished) {
                        return [2 /*return*/, { done: true, value: undefined }];
                    }
                    _a = flattenIterator.next(), value = _a.value, done = _a.done;
                    if (!done) return [3 /*break*/, 2];
                    return [4 /*yield*/, fillItem()];
                case 1:
                    hasItem = _b.sent();
                    if (hasItem) {
                        return [2 /*return*/, pullItem()];
                    }
                    return [2 /*return*/, { done: true, value: undefined }];
                case 2: return [2 /*return*/, { done: false, value: value }];
            }
        });
    }); };
    var resolveItem = function (_a) {
        var done = _a.done, value = _a.value;
        if (done || finished) {
            while (settlementQueue.length > 0) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                var _b = tslib_1.__read(settlementQueue.shift(), 1), resolve_1 = _b[0];
                resolve_1({ done: true, value: undefined });
            }
            return;
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        var _c = tslib_1.__read(settlementQueue.shift(), 1), resolve = _c[0];
        resolve({ done: done, value: value });
    };
    var catchItem = function (err) {
        finished = true;
        // eslint-disable-next-line
        var _a = tslib_1.__read(settlementQueue.shift(), 2), _ = _a[0], reject = _a[1];
        reject(err);
    };
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            settlementQueue.push([resolve, reject]);
                            prevItem = prevItem
                                .then(function () { return pullItem(); })
                                .then(resolveItem)
                                .catch(catchItem);
                        })];
                });
            });
        },
        _a;
}
function asyncSequential(iterable, depth) {
    var _a;
    var iterator = iterable[Symbol.asyncIterator]();
    var iteratorStack = [
        iterator,
    ];
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var iterator, _a, value, done;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            iterator = (0, last_1.default)(iteratorStack);
                            if (!iterator) {
                                return [2 /*return*/, { done: true, value: undefined }];
                            }
                            return [4 /*yield*/, iterator.next()];
                        case 1:
                            _a = _b.sent(), value = _a.value, done = _a.done;
                            if (done) {
                                iteratorStack.pop();
                                return [2 /*return*/, this.next()];
                            }
                            if (isFlatAble(value) && iteratorStack.length < depth + 1) {
                                iteratorStack.push(value[Symbol.iterator]());
                                return [2 /*return*/, this.next()];
                            }
                            return [2 /*return*/, {
                                    done: false,
                                    value: value,
                                }];
                    }
                });
            });
        },
        _a;
}
function async(iterable, depth) {
    var _a;
    var _iterator = null;
    return _a = {
            next: function (_concurrent) {
                return tslib_1.__awaiter(this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        if (_iterator === null) {
                            _iterator = (0, concurrent_1.isConcurrent)(_concurrent)
                                ? asyncConcurrent((0, concurrent_1.default)(_concurrent.length, iterable), depth)
                                : asyncSequential(iterable, depth);
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function flat(iterable, depth) {
    if (depth === void 0) { depth = 1; }
    if ((0, utils_1.isIterable)(iterable)) {
        return sync(iterable, depth);
    }
    if ((0, utils_1.isAsyncIterable)(iterable)) {
        return async(iterable, depth);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
exports.default = flat;
//# sourceMappingURL=flat.js.map