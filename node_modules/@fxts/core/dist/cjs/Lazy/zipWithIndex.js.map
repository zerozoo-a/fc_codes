{"version":3,"file":"zipWithIndex.js","sourceRoot":"","sources":["../../../src/Lazy/zipWithIndex.ts"],"names":[],"mappings":";;;AAAA,sDAAwB;AACxB,iEAAwD;AACxD,4CAAiE;AAGjE,SAAS,aAAa,CACpB,QAAW;IAEX,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAEX,OAAO,IAAA,aAAG,EAAC,UAAC,CAAC,IAAK,OAAA,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAR,CAAQ,EAAE,QAAe,CAAQ,CAAC;AACtD,CAAC;AAED,SAAS,KAAK,CAAI,QAA0B;;IAC1C,IAAI,SAAqC,CAAC;IAC1C;YACQ,IAAI,EAAV,UAAW,WAAgB;;;wBACzB,IAAI,SAAS,KAAK,SAAS,EAAE;4BAC3B,SAAS,GAAG,IAAA,yBAAY,EAAC,WAAW,CAAC;gCACnC,CAAC,CAAC,aAAa,CAAC,IAAA,oBAAU,EAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gCACzD,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;yBAC7B;wBACD,sBAAO,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,EAAC;;;aACpC;;QACD,GAAC,MAAM,CAAC,aAAa,IAArB;YACE,OAAO,IAAI,CAAC;QACd,CAAC;WACD;AACJ,CAAC;AA6CD,SAAS,YAAY,CACnB,QAAwC;IAExC,IAAI,IAAA,uBAAe,EAAC,QAAQ,CAAC,EAAE;QAC7B,OAAO,KAAK,CAAC,QAAQ,CAAC,CAAC;KACxB;IACD,IAAI,IAAA,kBAAU,EAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,aAAa,CAAC,QAAQ,CAAC,CAAC;KAChC;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import map from \"./map\";\nimport concurrent, { isConcurrent } from \"./concurrent\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport ReturnZipWithIndexType from \"../types/ReturnZipWithIndexType\";\n\nfunction _zipWithIndex<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  iterable: T,\n): ReturnZipWithIndexType<T> {\n  let i = -1;\n\n  return map((a) => [++i, a], iterable as any) as any;\n}\n\nfunction async<T>(iterable: AsyncIterable<T>) {\n  let _iterator: AsyncIterator<[number, T]>;\n  return {\n    async next(_concurrent: any) {\n      if (_iterator === undefined) {\n        _iterator = isConcurrent(_concurrent)\n          ? _zipWithIndex(concurrent(_concurrent.length, iterable))\n          : _zipWithIndex(iterable);\n      }\n      return _iterator.next(_concurrent);\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n\n/**\n * Returns Iterable/AsyncIterable including an index to the existing Iterable/AsyncIterable value.\n *\n * @example\n * ```ts\n * const iter = zipWithIndex([\"a\", \"b\", \"c\", \"d\"]);\n * iter.next() // {done:false, value: [0, \"a\"]}\n * iter.next() // {done:false, value: [1, \"b\"]}\n * iter.next() // {done:false, value: [2, \"c\"]}\n * iter.next() // {done:false, value: [3, \"d\"]}\n * iter.next() // {done:true, value: undefined}\n *\n * // with pipe\n * pipe(\n *  [\"a\", \"b\", \"c\", \"d\"],\n *  zipWithIndex,\n *  toArray,\n * ); // [[0, \"a\"], [1, \"b\"], [2, \"c\"], [3, \"d\"]]\n *\n * await pipe(\n *  Promise.resolve([\"a\", \"b\", \"c\", \"d\"]),\n *  zipWithIndex,\n *  toArray,\n * ); // [[0, \"a\"], [1, \"b\"], [2, \"c\"], [3, \"d\"]]\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve(\"a\"), Promise.resolve(\"b\"), Promise.resolve(\"c\"), Promise.resolve(\"d\")],\n *  toAsync,\n *  zipWithIndex,\n *  toArray,\n * ); // [[0, \"a\"], [1, \"b\"], [2, \"c\"], [3, \"d\"]]\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-zipwithindex-p1k31 | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\nfunction zipWithIndex<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  iterable: T,\n): ReturnZipWithIndexType<T>;\n\nfunction zipWithIndex<T>(\n  iterable: Iterable<T> | AsyncIterable<T>,\n): IterableIterator<[number, T]> | AsyncIterableIterator<[number, T]> {\n  if (isAsyncIterable(iterable)) {\n    return async(iterable);\n  }\n  if (isIterable(iterable)) {\n    return _zipWithIndex(iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default zipWithIndex;\n"]}