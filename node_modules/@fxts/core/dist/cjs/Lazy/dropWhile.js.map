{"version":3,"file":"dropWhile.js","sourceRoot":"","sources":["../../../src/Lazy/dropWhile.ts"],"names":[],"mappings":";;;AAEA,4CAA4D;AAC5D,4CAA4E;AAC5E,iEAAwD;AAExD,SAAU,IAAI,CAAO,CAAc,EAAE,QAAqB;;;;;;gBAClD,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACvC,gBAAgB;oBACpB,GAAC,MAAM,CAAC,QAAQ,IAAhB;wBACE,OAAO,QAAQ,CAAC;oBAClB,CAAC;uBACF,CAAC;;;;gBAEc,qBAAA,iBAAA,gBAAgB,CAAA;;;;gBAArB,CAAC;gBACJ,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjB,IAAI,IAAA,iBAAS,EAAC,GAAG,CAAC,EAAE;oBAClB,MAAM,IAAI,8BAAsB,EAAE,CAAC;iBACpC;gBAED,IAAI,GAAG,EAAE;oBACP,wBAAS;iBACV;gBACD,qBAAM,CAAC,EAAA;;gBAAP,SAAO,CAAC;gBACR,sBAAA,iBAAO,gBAAgB,CAAA,EAAA;;gBAAvB,SAAuB,CAAC;;;;;;;;;;;;;;;;;;;CAE3B;AAED,SAAgB,eAAe,CAC7B,CAAc,EACd,QAA0B;;;;;;;;oBAEpB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;oBAC5C,gBAAgB;wBACpB,GAAC,MAAM,CAAC,aAAa,IAArB;4BACE,OAAO,QAAQ,CAAC;wBAClB,CAAC;2BACF,CAAC;;;;oBAEoB,qBAAA,sBAAA,gBAAgB,CAAA;;;;;oBAArB,CAAC,6BAAA,CAAA;oBACZ,qCAAM,CAAC,CAAC,CAAC,CAAC,GAAA;;oBAAd,IAAI,SAAU,EAAE;wBACd,wBAAS;qBACV;yDAEK,CAAC;wBAAP,gCAAO;;oBAAP,SAAO,CAAC;oBACR,sBAAA,iBAAO,yBAAA,sBAAA,gBAAgB,CAAA,CAAA,CAAA,EAAA;wBAAvB,oDAAA,SAAuB,IAAA;;oBAAvB,SAAuB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;CAE3B;AAED,SAAS,KAAK,CACZ,CAAc,EACd,QAA0B;;IAE1B,IAAI,QAA0B,CAAC;IAC/B;QACE,GAAC,MAAM,CAAC,aAAa,IAArB;YACE,OAAO,IAAI,CAAC;QACd,CAAC;QAEK,OAAI,GAAV,UAAW,WAAgB;;;oBACzB,IAAI,QAAQ,KAAK,SAAS,EAAE;wBAC1B,QAAQ,GAAG,IAAA,yBAAY,EAAC,WAAW,CAAC;4BAClC,CAAC,CAAC,eAAe,CAAC,CAAC,EAAE,IAAA,oBAAU,EAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;4BAC9D,CAAC,CAAC,eAAe,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;qBAClC;oBAED,sBAAO,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,EAAC;;;SACnC;WACD;AACJ,CAAC;AA2DD,SAAS,SAAS,CAChB,CAA6B,EAC7B,QAAY;IAKZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,UAAC,QAAW;YACjB,OAAO,SAAS,CAAC,CAAC,EAAE,QAAe,CAAkC,CAAC;QACxE,CAAC,CAAC;KACH;IAED,IAAI,IAAA,kBAAU,EAAmB,QAAQ,CAAC,EAAE;QAC1C,OAAO,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC1B;IAED,IAAI,IAAA,uBAAe,EAAmB,QAAQ,CAAC,EAAE;QAC/C,OAAO,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC3B;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,kBAAe,SAAS,CAAC","sourcesContent":["import IterableInfer from \"../types/IterableInfer\";\nimport ReturnIterableIteratorType from \"../types/ReturnIterableIteratorType\";\nimport { AsyncFunctionException } from \"../_internal/error\";\nimport { isAsyncIterable, isIterable, isPromise } from \"../_internal/utils\";\nimport concurrent, { isConcurrent } from \"./concurrent\";\n\nfunction* sync<A, B>(f: (a: A) => B, iterable: Iterable<A>) {\n  const iterator = iterable[Symbol.iterator]();\n  const iterableIterator = {\n    [Symbol.iterator]() {\n      return iterator;\n    },\n  };\n\n  for (const a of iterableIterator) {\n    const res = f(a);\n    if (isPromise(res)) {\n      throw new AsyncFunctionException();\n    }\n\n    if (res) {\n      continue;\n    }\n    yield a;\n    yield* iterableIterator;\n  }\n}\n\nasync function* asyncSequential<A, B>(\n  f: (a: A) => B,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A> {\n  const iterator = iterable[Symbol.asyncIterator]();\n  const iterableIterator = {\n    [Symbol.asyncIterator]() {\n      return iterator;\n    },\n  };\n\n  for await (const a of iterableIterator) {\n    if (await f(a)) {\n      continue;\n    }\n\n    yield a;\n    yield* iterableIterator;\n  }\n}\n\nfunction async<A, B>(\n  f: (a: A) => B,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A> {\n  let iterator: AsyncIterator<A>;\n  return {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n\n    async next(_concurrent: any) {\n      if (iterator === undefined) {\n        iterator = isConcurrent(_concurrent)\n          ? asyncSequential(f, concurrent(_concurrent.length, iterable))\n          : asyncSequential(f, iterable);\n      }\n\n      return iterator.next(_concurrent);\n    },\n  };\n}\n\n/**\n * Returns Iterable/AsyncIterable excluding elements dropped from the beginning. Elements are dropped until the value applied to `f` returns falsey.\n *\n * @example\n * ```ts\n * const iter = dropWhile((a) => a < 3, [1, 2, 3, 4, 5]);\n * iter.next(); // {done:false, value: 3}\n * iter.next(); // {done:false, value: 4}\n * iter.next(); // {done:false, value: 5}\n *\n * // with pipe\n * pipe(\n *  [1, 2, 3, 4, 5],\n *  dropWhile((a) => a < 3),\n *  toArray,\n * ); // [3, 4, 5]\n *\n * await pipe(\n *  Promise.resolve([1, 2, 3, 4, 5]),\n *  dropWhile((a) => a < 3),\n *  toArray,\n * ); // [3, 4, 5]\n *\n * // if you want to use asynchronous callback\n * await pipe(\n *  Promise.resolve([1, 2, 3, 4, 5]),\n *  toAsync,\n *  dropWhile(async (a) => a < 3),\n *  toArray,\n * ); // [3, 4, 5]\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3), Promise.resolve(4), Promise.resolve(5)],\n *  toAsync,\n *  dropWhile((a) => a < 3),\n *  toArray,\n * ); // [3, 4, 5]\n *\n * ```\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\nfunction dropWhile<A, B = unknown>(\n  f: (a: A) => B,\n  iterable: Iterable<A>,\n): IterableIterator<A>;\n\nfunction dropWhile<A, B = unknown>(\n  f: (a: A) => B,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A>;\n\nfunction dropWhile<A extends Iterable<unknown> | AsyncIterable<unknown>, B>(\n  f: (a: IterableInfer<A>) => B,\n): (iterable: A) => ReturnIterableIteratorType<A>;\n\nfunction dropWhile<A extends Iterable<unknown> | AsyncIterable<unknown>, B>(\n  f: (a: IterableInfer<A>) => B,\n  iterable?: A,\n):\n  | IterableIterator<IterableInfer<A>>\n  | AsyncIterableIterator<IterableInfer<A>>\n  | ((iterable: A) => ReturnIterableIteratorType<A>) {\n  if (iterable === undefined) {\n    return (iterable: A) => {\n      return dropWhile(f, iterable as any) as ReturnIterableIteratorType<A>;\n    };\n  }\n\n  if (isIterable<IterableInfer<A>>(iterable)) {\n    return sync(f, iterable);\n  }\n\n  if (isAsyncIterable<IterableInfer<A>>(iterable)) {\n    return async(f, iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default dropWhile;\n"]}