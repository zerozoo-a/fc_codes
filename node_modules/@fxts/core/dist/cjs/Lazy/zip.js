"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_1 = tslib_1.__importDefault(require("./map"));
var pipe_1 = tslib_1.__importDefault(require("../pipe"));
var toArray_1 = tslib_1.__importDefault(require("../toArray"));
var toAsync_1 = tslib_1.__importDefault(require("./toAsync"));
var utils_1 = require("../_internal/utils");
var range_1 = tslib_1.__importDefault(require("./range"));
var takeWhile_1 = tslib_1.__importDefault(require("./takeWhile"));
var every_1 = tslib_1.__importDefault(require("../every"));
function sync(iterable) {
    var iterators = (0, toArray_1.default)((0, map_1.default)(function (a) { return (0, utils_1.toIterator)(a); }, iterable));
    return (0, pipe_1.default)((0, range_1.default)(Infinity), (0, map_1.default)(function () { return (0, toArray_1.default)((0, map_1.default)(function (it) { return it.next(); }, iterators)); }), (0, takeWhile_1.default)((0, every_1.default)(function (cur2) { return !cur2.done; })), (0, map_1.default)(function (cur1) { return (0, toArray_1.default)((0, map_1.default)(function (cur2) { return cur2.value; }, cur1)); }));
}
function async(iterable) {
    var _a;
    var iterators = (0, toArray_1.default)((0, map_1.default)(utils_1.toIterator, iterable));
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function (_concurrent) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var headIterators, hasDone;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, pipe_1.default)((0, toAsync_1.default)(iterators), (0, map_1.default)(function (it) { return it.next(_concurrent); }), toArray_1.default)];
                        case 1:
                            headIterators = _a.sent();
                            hasDone = headIterators.some(function (it) { return it.done; });
                            if (hasDone) {
                                return [2 /*return*/, { done: true, value: undefined }];
                            }
                            return [2 /*return*/, {
                                    done: false,
                                    value: headIterators.map(function (it) { return it.value; }),
                                }];
                    }
                });
            });
        },
        _a;
}
function zip() {
    var iterables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        iterables[_i] = arguments[_i];
    }
    if (iterables.length < 2) {
        return function () {
            var iterables2 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                iterables2[_i] = arguments[_i];
            }
            return zip.apply(void 0, tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(iterables), false), tslib_1.__read(iterables2), false));
        };
    }
    if (iterables.some(function (a) { return !(0, utils_1.isIterable)(a) && !(0, utils_1.isAsyncIterable)(a); })) {
        throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
    }
    var hasAsyncIterable = iterables.some(function (iterable) {
        return (0, utils_1.isAsyncIterable)(iterable);
    });
    if (hasAsyncIterable) {
        return async(iterables);
    }
    return sync(iterables);
}
exports.default = zip;
//# sourceMappingURL=zip.js.map