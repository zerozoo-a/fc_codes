{"version":3,"file":"reverse.js","sourceRoot":"","sources":["../../../src/Lazy/reverse.ts"],"names":[],"mappings":";;;AAAA,+DAAiC;AACjC,+DAAiC;AACjC,iEAAmC;AACnC,4CAAiE;AAEjE,iEAAwD;AAExD,SAAU,IAAI,CAAI,QAAqB;;;;;gBAC/B,GAAG,GACP,IAAA,iBAAO,EAAC,QAAQ,CAAC,IAAI,IAAA,kBAAQ,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAA,iBAAO,EAAC,QAAQ,CAAC,CAAC;gBAChE,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC;;;qBAAE,CAAA,CAAC,IAAI,CAAC,CAAA;gBACjC,qBAAM,GAAG,CAAC,CAAC,CAAC,EAAA;;gBAAZ,SAAY,CAAC;;;gBADsB,CAAC,EAAE,CAAA;;;;;CAGzC;AAED,SAAgB,eAAe,CAAI,QAA0B;;;;;wBAC/C,qCAAM,IAAA,iBAAO,EAAC,QAAQ,CAAC,GAAA;;oBAA7B,GAAG,GAAG,SAAuB;oBAC1B,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC;;;yBAAE,CAAA,CAAC,IAAI,CAAC,CAAA;yDAC3B,GAAG,CAAC,CAAC,CAAC;wBAAZ,gCAAY;;oBAAZ,SAAY,CAAC;;;oBADsB,CAAC,EAAE,CAAA;;;;;;CAGzC;AAED,SAAS,KAAK,CAAI,QAA0B;;IAC1C,IAAI,QAA0B,CAAC;IAC/B;QACE,GAAC,MAAM,CAAC,aAAa,IAArB;YACE,OAAO,IAAI,CAAC;QACd,CAAC;QAEK,OAAI,GAAV,UAAW,WAAgB;;;oBACzB,IAAI,QAAQ,KAAK,SAAS,EAAE;wBAC1B,QAAQ,GAAG,IAAA,yBAAY,EAAC,WAAW,CAAC;4BAClC,CAAC,CAAC,eAAe,CAAC,IAAA,oBAAU,EAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;4BAC3D,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;qBAC/B;oBAED,sBAAO,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,EAAC;;;SACnC;WACD;AACJ,CAAC;AAwCD,SAAS,OAAO,CACd,QAAW;IAEX,IAAI,IAAA,kBAAU,EAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC;KACvB;IAED,IAAI,IAAA,uBAAe,EAAC,QAAQ,CAAC,EAAE;QAC7B,OAAO,KAAK,CAAC,QAAQ,CAAC,CAAC;KACxB;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,kBAAe,OAAO,CAAC","sourcesContent":["import toArray from \"../toArray\";\nimport isArray from \"../isArray\";\nimport isString from \"../isString\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport ReturnIterableIteratorType from \"../types/ReturnIterableIteratorType\";\nimport concurrent, { isConcurrent } from \"./concurrent\";\n\nfunction* sync<T>(iterable: Iterable<T>) {\n  const arr =\n    isArray(iterable) || isString(iterable) ? iterable : toArray(iterable);\n  for (let i = arr.length - 1; i >= 0; i--) {\n    yield arr[i];\n  }\n}\n\nasync function* asyncSequential<T>(iterable: AsyncIterable<T>) {\n  const arr = await toArray(iterable);\n  for (let i = arr.length - 1; i >= 0; i--) {\n    yield arr[i];\n  }\n}\n\nfunction async<T>(iterable: AsyncIterable<T>): AsyncIterableIterator<T> {\n  let iterator: AsyncIterator<T>;\n  return {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n\n    async next(_concurrent: any) {\n      if (iterator === undefined) {\n        iterator = isConcurrent(_concurrent)\n          ? asyncSequential(concurrent(_concurrent.length, iterable))\n          : asyncSequential(iterable);\n      }\n\n      return iterator.next(_concurrent);\n    },\n  };\n}\n\n/**\n * Returns Iterable/AsyncIterable of the given elements in reverse order.\n * Note:Evaluates all Iterable, except for array, and returns a lazy-reversed iterator.\n *\n * @example\n * ```ts\n * const iter1 = reverse([1, 2, 3]);\n * iter1.next(); // {value: 3, done: false}\n * iter1.next(); // {value: 2, done: false}\n * iter1.next(); // {value: 1, done: false}\n * iter1.next(); // {value: undefined, done: true}\n *\n * const iter2 = reverse(\"abc\");\n * iter2.next(); // {value: \"c\", done: false}\n * iter2.next(); // {value: \"b\", done: false}\n * iter2.next(); // {value: \"a\", done: false}\n * iter2.next(); // {value: undefined, done: true}\n *\n * // with pipe\n * pipe(\n *  [1, 2, 3, 4, 5],\n *  reverse,\n *  toArray,\n * ); // [5, 4, 3, 2, 1]\n *\n * pipe(\n *  \"abcde\",\n *  reverse,\n *  toArray,\n * ); // \"edcba\"\n * ```\n *\n * see {@link https://fxts.dev/docs/pipe | pipe} {@link https://fxts.dev/docs/toArray | toArray}\n */\nfunction reverse<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  iterable: T,\n): ReturnIterableIteratorType<T>;\n\nfunction reverse<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  iterable: T,\n) {\n  if (isIterable(iterable)) {\n    return sync(iterable);\n  }\n\n  if (isAsyncIterable(iterable)) {\n    return async(iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default reverse;\n"]}