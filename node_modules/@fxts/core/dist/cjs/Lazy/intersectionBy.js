"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_1 = tslib_1.__importDefault(require("./map"));
var filter_1 = tslib_1.__importDefault(require("./filter"));
var toAsync_1 = tslib_1.__importDefault(require("./toAsync"));
var toArray_1 = tslib_1.__importDefault(require("../toArray"));
var concurrent_1 = tslib_1.__importStar(require("./concurrent"));
var utils_1 = require("../_internal/utils");
var pipe1_1 = tslib_1.__importDefault(require("../pipe1"));
var pipe_1 = tslib_1.__importDefault(require("../pipe"));
var uniq_1 = tslib_1.__importDefault(require("./uniq"));
function sync(f, iterable1, iterable2) {
    var set;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                set = new Set((0, map_1.default)(f, iterable1));
                return [5 /*yield**/, tslib_1.__values((0, pipe_1.default)(iterable2, (0, filter_1.default)(function (a) { return (0, pipe1_1.default)(f(a), function (b) { return set.has(b); }); }), uniq_1.default))];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}
function asyncSequential(f, iterable1, iterable2) {
    return tslib_1.__asyncGenerator(this, arguments, function asyncSequential_1() {
        var set, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = Set.bind;
                    return [4 /*yield*/, tslib_1.__await((0, toArray_1.default)((0, map_1.default)(f, iterable1)))];
                case 1:
                    set = new (_a.apply(Set, [void 0, _b.sent()]))();
                    return [5 /*yield**/, tslib_1.__values(tslib_1.__asyncDelegator(tslib_1.__asyncValues((0, pipe_1.default)(iterable2, (0, filter_1.default)(function (a) { return (0, pipe1_1.default)(f(a), function (b) { return set.has(b); }); }), uniq_1.default))))];
                case 2: return [4 /*yield*/, tslib_1.__await.apply(void 0, [_b.sent()])];
                case 3:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function async(f, iterable1, iterable2) {
    var _a;
    var _iterator;
    return _a = {
            next: function (_concurrent) {
                return tslib_1.__awaiter(this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        if (_iterator === undefined) {
                            _iterator = (0, concurrent_1.isConcurrent)(_concurrent)
                                ? asyncSequential(f, iterable1, (0, concurrent_1.default)(_concurrent.length, iterable2))
                                : asyncSequential(f, iterable1, iterable2);
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function intersectionBy(f, iterable1, iterable2) {
    if ((0, utils_1.isIterable)(iterable1) && (0, utils_1.isIterable)(iterable2)) {
        return sync(f, iterable1, iterable2);
    }
    if ((0, utils_1.isIterable)(iterable1) && (0, utils_1.isAsyncIterable)(iterable2)) {
        return async(f, (0, toAsync_1.default)(iterable1), iterable2);
    }
    if ((0, utils_1.isAsyncIterable)(iterable1) && (0, utils_1.isIterable)(iterable2)) {
        return async(f, iterable1, (0, toAsync_1.default)(iterable2));
    }
    if ((0, utils_1.isAsyncIterable)(iterable1) && (0, utils_1.isAsyncIterable)(iterable2)) {
        return async(f, iterable1, iterable2);
    }
    throw new TypeError("'iterable1' and 'iterable2' must be type of Iterable or AsyncIterable");
}
exports.default = intersectionBy;
//# sourceMappingURL=intersectionBy.js.map