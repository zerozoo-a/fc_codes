"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var uniqBy_1 = tslib_1.__importDefault(require("./uniqBy"));
var utils_1 = require("../_internal/utils");
var identity_1 = tslib_1.__importDefault(require("../identity"));
/**
 * Returns Iterable/AsyncIterable with duplicate values removed inside the given Iterable/AsyncIterable.
 * Only primitive values can be compared.
 *
 * @example
 * ```ts
 * const iter = uniq([1, 2, 1, 3, 2]);
 * iter.next() // {done:false, value: 1}
 * iter.next() // {done:false, value: 2}
 * iter.next() // {done:false, value: 3}
 * iter.next() // {done:true, value: undefined}
 *
 * // with pipe
 * pipe(
 *  [1, 2, 1, 3],
 *  uniq,
 *  toArray,
 * ); // [1, 2, 3]
 *
 * await pipe(
 *  Promise.resolve([1, 2, 1, 3]),
 *  uniq,
 *  toArray,
 * ); // [1, 2, 3]
 *
 * // with toAsync
 * await pipe(
 *  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(1), Promise.resolve(3)],
 *  toAsync,
 *  uniq,
 *  toArray,
 * ); // [1, 2, 3]
 * ```
 *
 * {@link https://codesandbox.io/s/fxts-uniq-uljmk | Try It}
 *
 * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},
 * {@link https://fxts.dev/docs/toArray | toArray}
 */
function uniq(iterable) {
    if ((0, utils_1.isIterable)(iterable)) {
        return (0, uniqBy_1.default)(identity_1.default, iterable);
    }
    if ((0, utils_1.isAsyncIterable)(iterable)) {
        return (0, uniqBy_1.default)(identity_1.default, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
exports.default = uniq;
//# sourceMappingURL=uniq.js.map