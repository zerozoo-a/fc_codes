"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils_1 = require("../_internal/utils");
function sync(a, b) {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [5 /*yield**/, tslib_1.__values(a)];
            case 1:
                _a.sent();
                return [5 /*yield**/, tslib_1.__values(b)];
            case 2:
                _a.sent();
                return [2 /*return*/];
        }
    });
}
function async(a, b) {
    var _a;
    var leftDone = false;
    var leftIterator = a[Symbol.asyncIterator]();
    var rightIterator = b[Symbol.asyncIterator]();
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function (_concurrent) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var iterator, _a, done, value;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            iterator = leftDone ? rightIterator : leftIterator;
                            return [4 /*yield*/, iterator.next(_concurrent)];
                        case 1:
                            _a = _b.sent(), done = _a.done, value = _a.value;
                            if (done) {
                                if (iterator === leftIterator) {
                                    leftDone = true;
                                }
                                return [2 /*return*/, rightIterator.next(_concurrent)];
                            }
                            else {
                                return [2 /*return*/, { done: done, value: value }];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        },
        _a;
}
function toAsyncIterable(iterable) {
    var _a;
    if ((0, utils_1.isAsyncIterable)(iterable)) {
        return iterable;
    }
    var iterator = iterable[Symbol.iterator]();
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return iterator;
        },
        _a;
}
function concat(iterable1, iterable2) {
    if (iterable2 === undefined) {
        return function (iterable2) {
            return concat(iterable1, iterable2);
        };
    }
    if ((0, utils_1.isAsyncIterable)(iterable1) || (0, utils_1.isAsyncIterable)(iterable2)) {
        // prettier-ignore
        return async(toAsyncIterable(iterable1), toAsyncIterable(iterable2));
    }
    if ((0, utils_1.isIterable)(iterable1) && (0, utils_1.isIterable)(iterable2)) {
        return sync(iterable1, iterable2);
    }
    throw new TypeError("'iterable1','iterable2' must be type of Iterable or AsyncIterable");
}
exports.default = concat;
//# sourceMappingURL=concat.js.map