{"version":3,"file":"lt.js","sourceRoot":"","sources":["../../src/lt.ts"],"names":[],"mappings":";;AAuBA,SAAS,EAAE,CAAC,CAAM,EAAE,CAAO;IACzB,IAAI,CAAC,KAAK,SAAS,EAAE;QACnB,OAAO,UAAC,EAAO,IAAK,OAAA,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAT,CAAS,CAAC;KAC/B;IAED,IAAI,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,WAAW,EAAE;QACnC,MAAM,IAAI,SAAS,CACjB,yDAAyD,CAC1D,CAAC;KACH;IAED,OAAO,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;AAED,kBAAe,EAAE,CAAC","sourcesContent":["/**\n * Returns true if the first argument is less than the second; false otherwise.\n *\n * @example\n * ```ts\n * lt(5, 1) // expected false\n * lt(1, 5) // expected true\n * lt(\"a\", \"b\") // expected true\n * lt(\"b\", \"a\") // expected false\n *\n * filter(lt(5), [1, 2, 4, 5, 8, 9]) // Iterable<[8, 9]>\n * filter(lt(7), [5, 6, 7]) // Iterable<[]>\n * filter(lt(\"b\"), [\"a\", \"b\", \"c\"]) // Iterable<[\"c\"]>\n * filter(lt(\"e\"), [\"b\", \"c\", \"d\"]) // Itreable<[]>\n * ```\n */\nfunction lt(a: string): (b: string) => boolean;\nfunction lt(a: number): (b: number) => boolean;\nfunction lt(a: Date): (b: Date) => boolean;\nfunction lt(a: string, b: string): boolean;\nfunction lt(a: number, b: number): boolean;\nfunction lt(a: Date, b: Date): boolean;\n\nfunction lt(a: any, b?: any): ((b: any) => boolean) | boolean {\n  if (b === undefined) {\n    return (_b: any) => lt(a, _b);\n  }\n\n  if (a.constructor !== b.constructor) {\n    throw new TypeError(\n      \"The values you want to compare must be of the same type\",\n    );\n  }\n\n  return a < b;\n}\n\nexport default lt;\n"]}