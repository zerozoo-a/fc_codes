{"version":3,"file":"add.js","sourceRoot":"","sources":["../../src/add.ts"],"names":[],"mappings":";;;AAAA,gEAAkC;AAClC,gEAAkC;AAElC,2CAA8C;AAU9C,SAAS,IAAI,CAAC,CAAkB,EAAE,CAAkB;IAClD,IAAI,IAAA,kBAAQ,EAAC,CAAC,CAAC,IAAI,IAAA,kBAAQ,EAAC,CAAC,CAAC,EAAE;QAC9B,OAAO,CAAC,GAAG,CAAC,CAAC;KACd;IAED,IAAI,IAAA,kBAAQ,EAAC,CAAC,CAAC,IAAI,IAAA,kBAAQ,EAAC,CAAC,CAAC,EAAE;QAC9B,OAAO,CAAC,GAAG,CAAC,CAAC;KACd;IAED,MAAM,IAAI,SAAS,CAAC,6CAA6C,CAAC,CAAC;AACrE,CAAC;AAED,SAAe,KAAK,CAAC,CAA2B,EAAE,CAA2B;;;;;;oBACpE,KAAA,IAAI,CAAA;oBAAC,qBAAM,CAAC,EAAA;;0BAAP,SAAO;oBAAE,qBAAM,CAAC,EAAA;wBAA5B,sBAAO,4BAAc,SAAO,GAAC,EAAC;;;;CAC/B;AAqCD,SAAS,GAAG,CAGV,CAAI,EAAE,CAAK;IACX,IAAI,CAAC,KAAK,SAAS,EAAE;QACnB,OAAO,UAAC,CAAI;YACV,OAAO,GAAG,CAAC,CAAQ,EAAE,CAAQ,CAAC,CAAC;QACjC,CAAC,CAAC;KACH;IAED,IAAI,IAAA,iBAAS,EAAC,CAAC,CAAC,IAAI,IAAA,iBAAS,EAAC,CAAC,CAAC,EAAE;QAChC,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;KACtD;IAED,OAAO,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACpB,CAAC;AAED,kBAAe,GAAG,CAAC","sourcesContent":["import isNumber from \"./isNumber\";\nimport isString from \"./isString\";\nimport Awaited from \"./types/Awaited\";\nimport { isPromise } from \"./_internal/utils\";\n\n// prettier-ignore\ntype ReturnAddType<T, A extends T, B extends T> = \n  | [A] extends [Promise<Awaited<T>>]\n  ? Promise<Awaited<T>>\n  : [B] extends [Promise<Awaited<T>>]\n  ? Promise<Awaited<T>>\n  : Awaited<T>;\n\nfunction sync(a: number | string, b: number | string) {\n  if (isNumber(a) && isNumber(b)) {\n    return a + b;\n  }\n\n  if (isString(a) && isString(b)) {\n    return a + b;\n  }\n\n  throw new TypeError(\"'a' or 'b' must be type of number or string\");\n}\n\nasync function async(a: Promise<number | string>, b: Promise<number | string>) {\n  return sync(await a, await b);\n}\n\n/**\n * Adds two values.\n *\n * @example\n * ```ts\n * add(1, 2); // 3\n * await add(1, Promise.resolve(2)); // 3\n * await add(Promise.resolve(1), 2); // 3\n * await add(Promise.resolve(1), Promise.resolve(2)); // 3\n *\n * add('a', 'b'); // 'ab'\n * await add('a', Promise.resolve('b')); // 'ab'\n * await add(Promise.resolve('a'), 'b'); // 'ab'\n * await add(Promise.resolve('a'), Promise.resolve('b')); // 'ab'\n * ```\n */\nfunction add<\n  A extends number | Promise<number>,\n  B extends number | Promise<number>,\n>(a: A, b: B): ReturnAddType<number | Promise<number>, A, B>;\nfunction add<\n  A extends string | Promise<string>,\n  B extends string | Promise<string>,\n>(a: A, b: B): ReturnAddType<string | Promise<string>, A, B>;\n\nfunction add<\n  A extends number | Promise<number>,\n  B extends number | Promise<number>,\n>(a: A): (b: B) => ReturnAddType<number | Promise<number>, A, B>;\n\nfunction add<\n  A extends string | Promise<string>,\n  B extends string | Promise<string>,\n>(a: A): (b: B) => ReturnAddType<string | Promise<string>, A, B>;\n\nfunction add<\n  A extends string | number | Promise<string | number>,\n  B extends string | number | Promise<string | number>,\n>(a: A, b?: B): number | string | Promise<string | number> | ((b: B) => any) {\n  if (b === undefined) {\n    return (b: B) => {\n      return add(a as any, b as any);\n    };\n  }\n\n  if (isPromise(a) || isPromise(b)) {\n    return async(Promise.resolve(a), Promise.resolve(b));\n  }\n\n  return sync(a, b);\n}\n\nexport default add;\n"]}