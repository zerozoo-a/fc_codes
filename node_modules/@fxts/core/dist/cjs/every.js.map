{"version":3,"file":"every.js","sourceRoot":"","sources":["../../src/every.ts"],"names":[],"mappings":";;;AAAA,4DAA8B;AAC9B,2DAA6B;AAC7B,uEAAyC;AACzC,sDAAwB;AACxB,wDAA0B;AAC1B,2CAAgE;AAsChE,SAAS,KAAK,CAIZ,CAA6B,EAC7B,QAAY;IAEZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,UAAC,QAAW;YACjB,OAAO,KAAK,CAAC,CAAC,EAAE,QAAe,CAAgC,CAAC;QAClE,CAAC,CAAC;KACH;IAED,IAAI,IAAA,kBAAU,EAAmB,QAAQ,CAAC,EAAE;QAC1C,OAAO,IAAA,cAAI,EACT,IAAA,aAAG,EAAC,CAAC,EAAE,QAAQ,CAAC,EAChB,IAAA,mBAAS,EAAC,aAAG,CAAC,EACd,IAAA,gBAAM,EAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,IAAI,CAAC,EAAN,CAAM,CAAC,EACxB,UAAC,CAAC,IAAK,OAAA,CAAC,aAAD,CAAC,cAAD,CAAC,GAAI,IAAI,EAAT,CAAS,EAChB,OAAO,CACR,CAAC;KACH;IAED,IAAI,IAAA,uBAAe,EAAmB,QAAQ,CAAC,EAAE;QAC/C,OAAO,IAAA,cAAI,EACT,IAAA,aAAG,EAAC,CAAC,EAAE,QAAQ,CAAC,EAChB,IAAA,mBAAS,EAAC,aAAG,CAAC,EACd,IAAA,gBAAM,EAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,IAAI,CAAC,EAAN,CAAM,CAAC,EACxB,UAAC,CAAC,IAAK,OAAA,CAAC,aAAD,CAAC,cAAD,CAAC,GAAI,IAAI,EAAT,CAAS,EAChB,OAAO,CACR,CAAC;KACH;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,kBAAe,KAAK,CAAC","sourcesContent":["import reduce from \"./reduce\";\nimport map from \"./Lazy/map\";\nimport takeUntil from \"./Lazy/takeUntil\";\nimport not from \"./not\";\nimport pipe from \"./pipe\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\nimport IterableInfer from \"./types/IterableInfer\";\nimport ReturnValueType from \"./types/ReturnValueType\";\nimport Arrow from \"./types/Arrow\";\n\n/**\n * Returns true if all of the values in Iterable/AsyncIterable pass the `f` truth test.\n *\n * @example\n * ```ts\n * every((a) => a % 2 === 0, [2, 4, 6, 8, 10]);\n * // true\n *\n * every((a) => a % 2 === 0, [2, 4, 6, 7, 10]);\n * // false\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-every-g91dh | Try It}\n */\n\nfunction every<A extends readonly []>(f: Arrow, iterable: A): true;\n\n// prettier-ignore\nfunction every<A, B = unknown>(\n  f: (a: A) => B,\n  iterable: Iterable<A>,\n): boolean;\n\nfunction every<A, B = unknown>(\n  f: (a: A) => B,\n  iterable: AsyncIterable<A>,\n): Promise<boolean>;\n\nfunction every<\n  A extends Iterable<unknown> | AsyncIterable<unknown>,\n  B = unknown,\n>(f: (a: IterableInfer<A>) => B): (a: A) => ReturnValueType<A, boolean>;\n\nfunction every<\n  A extends Iterable<unknown> | AsyncIterable<unknown>,\n  B = unknown,\n>(\n  f: (a: IterableInfer<A>) => B,\n  iterable?: A,\n): boolean | Promise<boolean> | ((iterable: A) => ReturnValueType<A, boolean>) {\n  if (iterable === undefined) {\n    return (iterable: A) => {\n      return every(f, iterable as any) as ReturnValueType<A, boolean>;\n    };\n  }\n\n  if (isIterable<IterableInfer<A>>(iterable)) {\n    return pipe(\n      map(f, iterable),\n      takeUntil(not),\n      reduce((a, b) => a && b),\n      (a) => a ?? true,\n      Boolean,\n    );\n  }\n\n  if (isAsyncIterable<IterableInfer<A>>(iterable)) {\n    return pipe(\n      map(f, iterable),\n      takeUntil(not),\n      reduce((a, b) => a && b),\n      (a) => a ?? true,\n      Boolean,\n    );\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default every;\n"]}