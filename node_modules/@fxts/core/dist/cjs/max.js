"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils_1 = require("./_internal/utils");
function sync(iterable) {
    var e_1, _a;
    var n = NaN;
    try {
        for (var iterable_1 = tslib_1.__values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
            var a = iterable_1_1.value;
            if (Number.isNaN(a)) {
                return a;
            }
            else if (a > n || Number.isNaN(n)) {
                n = a;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (Number.isNaN(n)) {
        return -Infinity;
    }
    return n;
}
function async(iterable) {
    var iterable_2, iterable_2_1;
    var e_2, _a;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var n, a, e_2_1;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    n = NaN;
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 6, 7, 12]);
                    iterable_2 = tslib_1.__asyncValues(iterable);
                    _b.label = 2;
                case 2: return [4 /*yield*/, iterable_2.next()];
                case 3:
                    if (!(iterable_2_1 = _b.sent(), !iterable_2_1.done)) return [3 /*break*/, 5];
                    a = iterable_2_1.value;
                    if (Number.isNaN(a)) {
                        return [2 /*return*/, a];
                    }
                    else if (a > n || Number.isNaN(n)) {
                        n = a;
                    }
                    _b.label = 4;
                case 4: return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 12];
                case 6:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 12];
                case 7:
                    _b.trys.push([7, , 10, 11]);
                    if (!(iterable_2_1 && !iterable_2_1.done && (_a = iterable_2.return))) return [3 /*break*/, 9];
                    return [4 /*yield*/, _a.call(iterable_2)];
                case 8:
                    _b.sent();
                    _b.label = 9;
                case 9: return [3 /*break*/, 11];
                case 10:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 11: return [7 /*endfinally*/];
                case 12:
                    if (Number.isNaN(n)) {
                        return [2 /*return*/, -Infinity];
                    }
                    return [2 /*return*/, n];
            }
        });
    });
}
function max(iterable) {
    if ((0, utils_1.isIterable)(iterable)) {
        return sync(iterable);
    }
    else if ((0, utils_1.isAsyncIterable)(iterable)) {
        return async(iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
exports.default = max;
//# sourceMappingURL=max.js.map