{"version":3,"file":"gt.js","sourceRoot":"","sources":["../../src/gt.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;AASH,SAAS,EAAE,CAAC,CAAM,EAAE,CAAO;IACzB,IAAI,CAAC,KAAK,SAAS,EAAE;QACnB,OAAO,UAAC,EAAO,IAAK,OAAA,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAT,CAAS,CAAC;KAC/B;IAED,IAAI,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,WAAW,EAAE;QACnC,MAAM,IAAI,SAAS,CACjB,yDAAyD,CAC1D,CAAC;KACH;IAED,OAAO,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;AAED,kBAAe,EAAE,CAAC","sourcesContent":["/**\n * Returns true if the first argument is greater than the second; false otherwise.\n *\n * @example\n * ```ts\n * gt(5, 1) // expected true\n * gt(1, 5) // expected false\n * gt(\"a\", \"b\") // expected false\n * gt(\"b\", \"a\") // expected true\n *\n * filter(gt(5), [1, 2, 4, 5, 8, 9]) // Iterable<[1, 2, 4]>\n * filter(gt(1), [1, 2, 3, 4, 5]) // Iterable<[]>\n * filter(gt(\"b\"), [\"a\", \"b\", \"c\"]) // Iterable<[\"a\"]>\n * filter(gt(\"a\"), [\"a\", \"b\"]) // Itreable<[]>\n * ```\n */\n\nfunction gt(a: string): (b: string) => boolean;\nfunction gt(a: number): (b: number) => boolean;\nfunction gt(a: Date): (b: Date) => boolean;\nfunction gt(a: string, b: string): boolean;\nfunction gt(a: number, b: number): boolean;\nfunction gt(a: Date, b: Date): boolean;\n\nfunction gt(a: any, b?: any): ((b: any) => boolean) | boolean {\n  if (b === undefined) {\n    return (_b: any) => gt(a, _b);\n  }\n\n  if (a.constructor !== b.constructor) {\n    throw new TypeError(\n      \"The values you want to compare must be of the same type\",\n    );\n  }\n\n  return a > b;\n}\n\nexport default gt;\n"]}