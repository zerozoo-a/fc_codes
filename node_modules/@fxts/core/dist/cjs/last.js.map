{"version":3,"file":"last.js","sourceRoot":"","sources":["../../src/last.ts"],"names":[],"mappings":";;;AAAA,8DAAgC;AAChC,gEAAkC;AAClC,4DAA8B;AAC9B,2CAAgE;AA8ChE,SAAS,IAAI,CAAI,QAAwC;IACvD,IAAI,IAAA,iBAAO,EAAC,QAAQ,CAAC,IAAI,IAAA,kBAAQ,EAAC,QAAQ,CAAC,EAAE;QAC3C,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KACtC;IACD,IAAI,IAAA,kBAAU,EAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,IAAA,gBAAM,EAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,EAAE,QAAQ,CAAC,CAAC;KACtC;SAAM,IAAI,IAAA,uBAAe,EAAC,QAAQ,CAAC,EAAE;QACpC,OAAO,IAAA,gBAAM,EAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,EAAE,QAAQ,CAAC,CAAC;KACtC;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,kBAAe,IAAI,CAAC","sourcesContent":["import isArray from \"./isArray\";\nimport isString from \"./isString\";\nimport reduce from \"./reduce\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\n\ntype LastReturnType<T> = T extends readonly [...rest: any[], a: infer L]\n  ? L\n  : T extends readonly never[]\n  ? undefined\n  : T extends AsyncIterable<infer U>\n  ? Promise<U | undefined>\n  : T extends Iterable<infer U>\n  ? U | undefined\n  : never;\n\n/**\n * Returns the last element of Iterable/AsyncIterable\n *\n * @example\n * ```ts\n * last([1, 2, 3, 4, 5]); // 5\n *\n * // with pipe\n * pipe(\n *  [1, 2, 3, 4, 5],\n *  last,\n * ); // 5\n *\n * await pipe(\n *  Promise.resolve([1, 2, 3, 4, 5]),\n *  last,\n * ); // 5\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)],\n *  toAsync,\n *  last,\n * ); // 3\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-last-zbvq8 | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync}\n */\nfunction last<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  iterable: T,\n): LastReturnType<T>;\n\nfunction last<A>(iterable: Iterable<A> | AsyncIterable<A>) {\n  if (isArray(iterable) || isString(iterable)) {\n    return iterable[iterable.length - 1];\n  }\n  if (isIterable(iterable)) {\n    return reduce((_, a) => a, iterable);\n  } else if (isAsyncIterable(iterable)) {\n    return reduce((_, a) => a, iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default last;\n"]}