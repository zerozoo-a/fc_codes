{"version":3,"file":"nth.js","sourceRoot":"","sources":["../../src/nth.ts"],"names":[],"mappings":";;;AAEA,2CAAgE;AAEhE,SAAS,IAAI,CAAI,KAAa,EAAE,QAAqB;;IACnD,IAAI,GAAG,GAAG,CAAC,CAAC;;QACZ,KAAmB,IAAA,aAAA,iBAAA,QAAQ,CAAA,kCAAA,wDAAE;YAAxB,IAAM,IAAI,qBAAA;YACb,IAAI,GAAG,EAAE,KAAK,KAAK,EAAE;gBACnB,OAAO,IAAI,CAAC;aACb;SACF;;;;;;;;;AACH,CAAC;AAED,SAAe,KAAK,CAClB,KAAa,EACb,QAA0B;;;;;;;;oBAEtB,GAAG,GAAG,CAAC,CAAC;;;;oBACa,aAAA,sBAAA,QAAQ,CAAA;;;;;oBAAhB,IAAI,qBAAA,CAAA;oBACnB,IAAI,GAAG,EAAE,KAAK,KAAK,EAAE;wBACnB,sBAAO,IAAI,EAAC;qBACb;;;;;;;;;;;;;;;;;;;;;;;;CAEJ;AAoCD,SAAS,GAAG,CACV,KAAa,EACb,QAAY;IAMZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,UAAC,QAAW;YACjB,OAAO,GAAG,CAAC,KAAK,EAAE,QAAe,CAGhC,CAAC;QACJ,CAAC,CAAC;KACH;IAED,IAAI,KAAK,GAAG,CAAC,EAAE;QACb,MAAM,IAAI,UAAU,CAAC,wBAAwB,CAAC,CAAC;KAChD;IAED,IAAI,IAAA,kBAAU,EAAmB,QAAQ,CAAC,EAAE;QAC1C,OAAO,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;KAC9B;IACD,IAAI,IAAA,uBAAe,EAAmB,QAAQ,CAAC,EAAE;QAC/C,OAAO,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;KAC/B;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,kBAAe,GAAG,CAAC","sourcesContent":["import IterableInfer from \"./types/IterableInfer\";\nimport ReturnValueType from \"./types/ReturnValueType\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\n\nfunction sync<T>(index: number, iterable: Iterable<T>): T | undefined {\n  let idx = 0;\n  for (const item of iterable) {\n    if (idx++ === index) {\n      return item;\n    }\n  }\n}\n\nasync function async<T>(\n  index: number,\n  iterable: AsyncIterable<T>,\n): Promise<T | undefined> {\n  let idx = 0;\n  for await (const item of iterable) {\n    if (idx++ === index) {\n      return item;\n    }\n  }\n}\n\n/**\n * Returns the nth element of the given Iterable/AsyncIterable\n *\n * @example\n * ```ts\n * nth(2, [1,2,3,4]); // 3\n * nth(5, [1,2,3,4]); // undefined\n * nth(2, ['name', 'gender', 'age']); // 'age'\n * nth(3, ['name', 'gender', 'age']); // undefined\n * nth(2, 'abcdefg'); // 'c'\n * nth(10, 'abcdefg'); // undefined\n * ```\n */\n// prettier-ignore\nfunction nth(\n  index: number, \n  iterable: readonly []\n): undefined;\n\n// prettier-ignore\nfunction nth<T>(\n  index: number, \n  iterable: Iterable<T>,\n): T | undefined;\n\nfunction nth<T>(\n  index: number,\n  iterable: AsyncIterable<T>,\n): Promise<T | undefined>;\n\nfunction nth<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  index: number,\n): (iterable: T) => ReturnValueType<T, IterableInfer<T> | undefined>;\n\nfunction nth<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  index: number,\n  iterable?: T,\n):\n  | undefined\n  | IterableInfer<T>\n  | Promise<IterableInfer<T> | undefined>\n  | ((iterable: T) => ReturnValueType<T, IterableInfer<T> | undefined>) {\n  if (iterable === undefined) {\n    return (iterable: T) => {\n      return nth(index, iterable as any) as ReturnValueType<\n        T,\n        IterableInfer<T> | undefined\n      >;\n    };\n  }\n\n  if (index < 0) {\n    throw new RangeError(\"'index' must be over 0\");\n  }\n\n  if (isIterable<IterableInfer<T>>(iterable)) {\n    return sync(index, iterable);\n  }\n  if (isAsyncIterable<IterableInfer<T>>(iterable)) {\n    return async(index, iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default nth;\n"]}