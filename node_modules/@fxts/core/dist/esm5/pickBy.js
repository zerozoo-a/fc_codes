import { __read } from "tslib.js";
import toArray from "./toArray.js";
import filter from "./Lazy/filter.js";
import toAsync from "./Lazy/toAsync.js";
import map from "./Lazy/map.js";
import zip from "./Lazy/zip.js";
import pipe from "./pipe.js";
import { isPromise } from "./_internal/utils.js";
function pickBy(f, obj) {
    if (obj === undefined) {
        return function (obj) { return pickBy(f, obj); };
    }
    var entries = Object.entries(obj);
    var conditions = entries.map(function (entry) { return f(entry); });
    var isAsync = conditions.some(function (c) { return isPromise(c); });
    if (isAsync) {
        return pipe(entries, zip(toAsync(conditions)), filter(function (_a) {
            var _b = __read(_a, 1), cond = _b[0];
            return cond;
        }), map(function (_a) {
            var _b = __read(_a, 2), entry = _b[1];
            return entry;
        }), toArray, Object.fromEntries);
    }
    else {
        return pipe(entries, zip(conditions), filter(function (_a) {
            var _b = __read(_a, 1), cond = _b[0];
            return cond;
        }), map(function (_a) {
            var _b = __read(_a, 2), entry = _b[1];
            return entry;
        }), Object.fromEntries);
    }
}
export default pickBy;
//# sourceMappingURL=pickBy.js.map