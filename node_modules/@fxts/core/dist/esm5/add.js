import { __awaiter, __generator } from "tslib.js";
import isNumber from "./isNumber.js";
import isString from "./isString.js";
import { isPromise } from "./_internal/utils.js";
function sync(a, b) {
    if (isNumber(a) && isNumber(b)) {
        return a + b;
    }
    if (isString(a) && isString(b)) {
        return a + b;
    }
    throw new TypeError("'a' or 'b' must be type of number or string");
}
function async(a, b) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = sync;
                    return [4 /*yield*/, a];
                case 1:
                    _b = [_c.sent()];
                    return [4 /*yield*/, b];
                case 2: return [2 /*return*/, _a.apply(void 0, _b.concat([_c.sent()]))];
            }
        });
    });
}
function add(a, b) {
    if (b === undefined) {
        return function (b) {
            return add(a, b);
        };
    }
    if (isPromise(a) || isPromise(b)) {
        return async(Promise.resolve(a), Promise.resolve(b));
    }
    return sync(a, b);
}
export default add;
//# sourceMappingURL=add.js.map