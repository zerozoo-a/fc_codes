import { __read } from "tslib.js";
import find from "./find.js";
import zipWithIndex from "./Lazy/zipWithIndex.js";
import pipe from "./pipe.js";
import pipe1 from "./pipe1.js";
import { isAsyncIterable, isIterable } from "./_internal/utils.js";
function findIndex(f, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return findIndex(f, iterable);
        };
    }
    if (isIterable(iterable)) {
        return pipe(zipWithIndex(iterable), find(function (_a) {
            var _b = __read(_a, 2), a = _b[1];
            return f(a);
        }), function (res) { return (res ? res[0] : -1); });
    }
    if (isAsyncIterable(iterable)) {
        return pipe(zipWithIndex(iterable), find(function (_a) {
            var _b = __read(_a, 2), a = _b[1];
            return pipe1(a, f);
        }), function (res) { return (res ? res[0] : -1); });
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default findIndex;
//# sourceMappingURL=findIndex.js.map