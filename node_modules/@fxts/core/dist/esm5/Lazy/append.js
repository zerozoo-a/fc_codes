import { __awaiter, __generator, __values } from "tslib.js";
import { isAsyncIterable, isIterable, isPromise } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
function sync(a, iterable) {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [5 /*yield**/, __values(iterable)];
            case 1:
                _a.sent();
                return [4 /*yield*/, a];
            case 2:
                _a.sent();
                return [2 /*return*/];
        }
    });
}
function asyncSequential(a, iterable) {
    var _a;
    var iterator = iterable[Symbol.asyncIterator]();
    var finished = false;
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, value, done;
                var _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (finished) {
                                return [2 /*return*/, { done: true, value: undefined }];
                            }
                            return [4 /*yield*/, iterator.next()];
                        case 1:
                            _a = _c.sent(), value = _a.value, done = _a.done;
                            if (finished) {
                                return [2 /*return*/, { done: true, value: undefined }];
                            }
                            if (!done) return [3 /*break*/, 3];
                            finished = true;
                            _b = { done: false };
                            return [4 /*yield*/, a];
                        case 2: return [2 /*return*/, (_b.value = _c.sent(), _b)];
                        case 3: return [2 /*return*/, { done: done, value: value }];
                    }
                });
            });
        },
        _a;
}
function async(a, iterable) {
    var _a;
    var iterator = null;
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function (_concurrent) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (iterator === null) {
                        iterator = isConcurrent(_concurrent)
                            ? asyncSequential(a, concurrent(_concurrent.length, iterable))
                            : asyncSequential(a, iterable);
                    }
                    return [2 /*return*/, iterator.next(_concurrent)];
                });
            });
        },
        _a;
}
function append(a, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return append(a, iterable);
        };
    }
    if (isAsyncIterable(iterable)) {
        return async(isPromise(a) ? a : Promise.resolve(a), iterable);
    }
    if (isIterable(iterable)) {
        return sync(a, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default append;
//# sourceMappingURL=append.js.map