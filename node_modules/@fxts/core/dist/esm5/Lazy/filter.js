import { __asyncGenerator, __asyncValues, __await, __awaiter, __generator, __read, __values } from "tslib.js";
import { isAsyncIterable, isIterable, isPromise } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
import pipe1 from "../pipe1.js";
import { AsyncFunctionException } from "../_internal/error.js";
function asyncSequential(f, iterable) {
    return __asyncGenerator(this, arguments, function asyncSequential_1() {
        var iterable_1, iterable_1_1, item, e_1_1;
        var e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 8, 9, 14]);
                    iterable_1 = __asyncValues(iterable);
                    _b.label = 1;
                case 1: return [4 /*yield*/, __await(iterable_1.next())];
                case 2:
                    if (!(iterable_1_1 = _b.sent(), !iterable_1_1.done)) return [3 /*break*/, 7];
                    item = iterable_1_1.value;
                    return [4 /*yield*/, __await(f(item))];
                case 3:
                    if (!_b.sent()) return [3 /*break*/, 6];
                    return [4 /*yield*/, __await(item)];
                case 4: return [4 /*yield*/, _b.sent()];
                case 5:
                    _b.sent();
                    _b.label = 6;
                case 6: return [3 /*break*/, 1];
                case 7: return [3 /*break*/, 14];
                case 8:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 14];
                case 9:
                    _b.trys.push([9, , 12, 13]);
                    if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) return [3 /*break*/, 11];
                    return [4 /*yield*/, __await(_a.call(iterable_1))];
                case 10:
                    _b.sent();
                    _b.label = 11;
                case 11: return [3 /*break*/, 13];
                case 12:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 13: return [7 /*endfinally*/];
                case 14: return [2 /*return*/];
            }
        });
    });
}
function asyncConcurrent(iterable) {
    var _a;
    var iterator = iterable[Symbol.asyncIterator]();
    var settlementQueue = [];
    var buffer = [];
    var finished = false;
    var nextCallCount = 0;
    var resolvedCount = 0;
    var prevItem = Promise.resolve();
    function fillBuffer(concurrent) {
        var nextItem = iterator.next(concurrent);
        prevItem = prevItem
            .then(function () { return nextItem; })
            .then(function (_a) {
            var done = _a.done, value = _a.value;
            if (done) {
                while (settlementQueue.length > 0) {
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    var _b = __read(settlementQueue.shift(), 1), resolve = _b[0];
                    resolve({ done: true, value: undefined });
                }
                return void (finished = true);
            }
            var _c = __read(value, 2), cond = _c[0], item = _c[1];
            if (cond) {
                buffer.push(item);
            }
            recur(concurrent);
        })
            .catch(function (reason) {
            finished = true;
            while (settlementQueue.length > 0) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                var _a = __read(settlementQueue.shift(), 2), reject = _a[1];
                reject(reason);
            }
        });
    }
    function consumeBuffer() {
        while (buffer.length > 0 && nextCallCount > resolvedCount) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            var value = buffer.shift();
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            var _a = __read(settlementQueue.shift(), 1), resolve = _a[0];
            resolve({ done: false, value: value });
            resolvedCount++;
        }
    }
    function recur(concurrent) {
        if (finished || nextCallCount === resolvedCount) {
            return;
        }
        else if (buffer.length > 0) {
            consumeBuffer();
        }
        else {
            fillBuffer(concurrent);
        }
    }
    return _a = {
            next: function (concurrent) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        nextCallCount++;
                        if (finished) {
                            return [2 /*return*/, { done: true, value: undefined }];
                        }
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                settlementQueue.push([resolve, reject]);
                                recur(concurrent);
                            })];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function toFilterIterator(f, iterable) {
    var _a;
    var iterator = iterable[Symbol.asyncIterator]();
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function (_concurrent) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, done, value;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, iterator.next(_concurrent)];
                        case 1:
                            _a = _b.sent(), done = _a.done, value = _a.value;
                            if (done) {
                                return [2 /*return*/, {
                                        done: true,
                                        value: undefined,
                                    }];
                            }
                            return [2 /*return*/, pipe1(f(value), function (cond) {
                                    return ({
                                        done: done,
                                        value: [Boolean(cond), value],
                                    });
                                })];
                    }
                });
            });
        },
        _a;
}
function async(f, iterable) {
    var _a;
    var _iterator;
    return _a = {
            next: function (_concurrent) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (_iterator === undefined) {
                            _iterator = isConcurrent(_concurrent)
                                ? asyncConcurrent(concurrent(_concurrent.length, toFilterIterator(f, iterable)))
                                : asyncSequential(f, iterable);
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function sync(f, iterable) {
    var iterable_2, iterable_2_1, a, res, e_2_1;
    var e_2, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _b.trys.push([0, 5, 6, 7]);
                iterable_2 = __values(iterable), iterable_2_1 = iterable_2.next();
                _b.label = 1;
            case 1:
                if (!!iterable_2_1.done) return [3 /*break*/, 4];
                a = iterable_2_1.value;
                res = f(a);
                if (isPromise(res)) {
                    throw new AsyncFunctionException();
                }
                if (!res) return [3 /*break*/, 3];
                return [4 /*yield*/, a];
            case 2:
                _b.sent();
                _b.label = 3;
            case 3:
                iterable_2_1 = iterable_2.next();
                return [3 /*break*/, 1];
            case 4: return [3 /*break*/, 7];
            case 5:
                e_2_1 = _b.sent();
                e_2 = { error: e_2_1 };
                return [3 /*break*/, 7];
            case 6:
                try {
                    if (iterable_2_1 && !iterable_2_1.done && (_a = iterable_2.return)) _a.call(iterable_2);
                }
                finally { if (e_2) throw e_2.error; }
                return [7 /*endfinally*/];
            case 7: return [2 /*return*/];
        }
    });
}
function filter(f, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return filter(f, iterable);
        };
    }
    if (isIterable(iterable)) {
        return sync(f, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(f, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default filter;
//# sourceMappingURL=filter.js.map