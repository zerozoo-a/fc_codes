{"version":3,"file":"drop.js","sourceRoot":"","sources":["../../../src/Lazy/drop.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AACjE,OAAO,UAAU,EAAE,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AACxD,OAAO,OAAO,MAAM,YAAY,CAAC;AAEjC,SAAU,IAAI,CAAI,MAAc,EAAE,QAAqB;;;;;;gBAC/C,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACvC,gBAAgB;oBACpB,GAAC,MAAM,CAAC,QAAQ,IAAhB;wBACE,OAAO,QAAQ,CAAC;oBAClB,CAAC;uBACF,CAAC;gBACF,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;gBAC3B,sBAAA,SAAO,gBAAgB,CAAA,EAAA;oBAA9B,sBAAO,SAAuB,EAAC;;;CAChC;AAED,SAAgB,eAAe,CAAI,MAAc,EAAE,QAA0B;;;;;;;oBACrE,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;oBAC5C,gBAAgB;wBACpB,GAAC,MAAM,CAAC,aAAa,IAArB;4BACE,OAAO,QAAQ,CAAC;wBAClB,CAAC;2BACF,CAAC;oBACF,6BAAM,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,GAAA;;oBAAvC,SAAuC,CAAC;oBACjC,sBAAA,SAAO,iBAAA,cAAA,gBAAgB,CAAA,CAAA,CAAA,EAAA;wBAAvB,4CAAA,SAAuB,IAAA;oEAAvB,SAAuB;wBAA9B,iCAA+B;;;;CAChC;AAED,SAAS,KAAK,CACZ,MAAc,EACd,QAA0B;;IAE1B,IAAI,QAA0B,CAAC;IAC/B;QACE,GAAC,MAAM,CAAC,aAAa,IAArB;YACE,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAI,GAAJ,UAAK,WAAgB;YACnB,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC;oBAClC,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;oBACnE,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;aACvC;YAED,OAAO,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC;WACD;AACJ,CAAC;AAsDD,SAAS,IAAI,CACX,MAAc,EACd,QAAY;IAKZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,UAAC,QAAW;YACjB,OAAO,IAAI,CAAC,MAAM,EAAE,QAAe,CAAkC,CAAC;QACxE,CAAC,CAAC;KACH;IAED,IAAI,MAAM,GAAG,CAAC,EAAE;QACd,MAAM,IAAI,UAAU,CAAC,iCAAiC,CAAC,CAAC;KACzD;IAED,IAAI,UAAU,CAAI,QAAQ,CAAC,EAAE;QAC3B,OAAO,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KAC/B;IAED,IAAI,eAAe,CAAI,QAAQ,CAAC,EAAE;QAChC,OAAO,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KAChC;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,IAAI,CAAC","sourcesContent":["import ReturnIterableIteratorType from \"../types/ReturnIterableIteratorType\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport concurrent, { isConcurrent } from \"./concurrent\";\nimport consume from \"../consume\";\n\nfunction* sync<A>(length: number, iterable: Iterable<A>): IterableIterator<A> {\n  const iterator = iterable[Symbol.iterator]();\n  const iterableIterator = {\n    [Symbol.iterator]() {\n      return iterator;\n    },\n  };\n  consume(iterableIterator, length);\n  return yield* iterableIterator;\n}\n\nasync function* asyncSequential<A>(length: number, iterable: AsyncIterable<A>) {\n  const iterator = iterable[Symbol.asyncIterator]();\n  const iterableIterator = {\n    [Symbol.asyncIterator]() {\n      return iterator;\n    },\n  };\n  await consume(iterableIterator, length);\n  return yield* iterableIterator;\n}\n\nfunction async<A>(\n  length: number,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A> {\n  let iterator: AsyncIterator<A>;\n  return {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n\n    next(_concurrent: any) {\n      if (iterator === undefined) {\n        iterator = isConcurrent(_concurrent)\n          ? asyncSequential(length, concurrent(_concurrent.length, iterable))\n          : asyncSequential(length, iterable);\n      }\n\n      return iterator.next(_concurrent);\n    },\n  };\n}\n\n/**\n * Returns all but the first `length` elements of the given iterable.\n *\n * @example\n * ```ts\n * const iter = drop(2, [1, 2, 3, 4]);\n * iter.next() // {done:false, value: 3}\n * iter.next() // {done:false, value: 4}\n * iter.next() // {done:true, value: undefined}\n *\n * // with pipe\n * pipe(\n *  [1, 2, 3, 4],\n *  drop(2),\n *  toArray,\n * ); // [3, 4]\n *\n * await pipe(\n *  Promise.resolve([1, 2, 3, 4]),\n *  drop(2),\n *  toArray,\n * ); // [3, 4]\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3), Promise.resolve(4)],\n *  toAsync,\n *  drop(2),\n *  toArray,\n * ); // [3, 4]\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-drop-2t0h0 | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\n// prettier-ignore\nfunction drop<A>(\n  length: number,\n  iterable: Iterable<A>\n): IterableIterator<A>;\n\nfunction drop<A>(\n  length: number,\n  iterable: AsyncIterable<A>,\n): AsyncIterableIterator<A>;\n\nfunction drop<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  length: number,\n): (iterable: A) => ReturnIterableIteratorType<A>;\n\nfunction drop<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  length: number,\n  iterable?: A,\n):\n  | IterableIterator<A>\n  | AsyncIterableIterator<A>\n  | ((iterable: A) => ReturnIterableIteratorType<A>) {\n  if (iterable === undefined) {\n    return (iterable: A): ReturnIterableIteratorType<A> => {\n      return drop(length, iterable as any) as ReturnIterableIteratorType<A>;\n    };\n  }\n\n  if (length < 0) {\n    throw new RangeError(\"'length' must be greater than 0\");\n  }\n\n  if (isIterable<A>(iterable)) {\n    return sync(length, iterable);\n  }\n\n  if (isAsyncIterable<A>(iterable)) {\n    return async(length, iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default drop;\n"]}