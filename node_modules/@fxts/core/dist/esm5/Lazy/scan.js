import { __asyncGenerator, __asyncValues, __await, __awaiter, __generator, __values } from "tslib.js";
import pipe1 from "../pipe1.js";
import { empty, isAsyncIterable, isIterable } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
import head from "../head.js";
function sync(f, acc, iterable) {
    var iterable_1, iterable_1_1, a, e_1_1;
    var e_1, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, acc];
            case 1:
                _b.sent();
                _b.label = 2;
            case 2:
                _b.trys.push([2, 7, 8, 9]);
                iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next();
                _b.label = 3;
            case 3:
                if (!!iterable_1_1.done) return [3 /*break*/, 6];
                a = iterable_1_1.value;
                return [4 /*yield*/, (acc = f(acc, a))];
            case 4:
                _b.sent();
                _b.label = 5;
            case 5:
                iterable_1_1 = iterable_1.next();
                return [3 /*break*/, 3];
            case 6: return [3 /*break*/, 9];
            case 7:
                e_1_1 = _b.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 9];
            case 8:
                try {
                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 9: return [2 /*return*/];
        }
    });
}
function asyncSequential(f, acc, iterable) {
    return __asyncGenerator(this, arguments, function asyncSequential_1() {
        var _loop_1, iterable_2, iterable_2_1, e_2_1;
        var e_2, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, __await(acc)];
                case 1: return [4 /*yield*/, _b.sent()];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _b.trys.push([3, 9, 10, 15]);
                    _loop_1 = function () {
                        var a;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    a = iterable_2_1.value;
                                    return [4 /*yield*/, __await((acc = pipe1(acc, function (acc) { return f(acc, a); })))];
                                case 1: return [4 /*yield*/, _c.sent()];
                                case 2:
                                    _c.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    iterable_2 = __asyncValues(iterable);
                    _b.label = 4;
                case 4: return [4 /*yield*/, __await(iterable_2.next())];
                case 5:
                    if (!(iterable_2_1 = _b.sent(), !iterable_2_1.done)) return [3 /*break*/, 8];
                    return [5 /*yield**/, _loop_1()];
                case 6:
                    _b.sent();
                    _b.label = 7;
                case 7: return [3 /*break*/, 4];
                case 8: return [3 /*break*/, 15];
                case 9:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 15];
                case 10:
                    _b.trys.push([10, , 13, 14]);
                    if (!(iterable_2_1 && !iterable_2_1.done && (_a = iterable_2.return))) return [3 /*break*/, 12];
                    return [4 /*yield*/, __await(_a.call(iterable_2))];
                case 11:
                    _b.sent();
                    _b.label = 12;
                case 12: return [3 /*break*/, 14];
                case 13:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 14: return [7 /*endfinally*/];
                case 15: return [2 /*return*/];
            }
        });
    });
}
function async(f, acc, iterable) {
    var _a;
    var _iterator;
    return _a = {
            next: function (_concurrent) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (_iterator === undefined) {
                            _iterator = isConcurrent(_concurrent)
                                ? asyncSequential(f, acc, concurrent(_concurrent.length, iterable))
                                : asyncSequential(f, acc, iterable);
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function asyncWithoutSeed(f, iterable) {
    var _a;
    var _iterator;
    return _a = {
            next: function (_concurrent) {
                return __awaiter(this, void 0, void 0, function () {
                    var _iterable;
                    return __generator(this, function (_a) {
                        if (_iterator === undefined) {
                            if (isConcurrent(_concurrent)) {
                                _iterable = concurrent(_concurrent.length, iterable);
                                _iterator = asyncSequential(f, head(_iterable), _iterable);
                            }
                            else {
                                _iterator = asyncSequential(f, head(iterable), iterable);
                            }
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function scan(f, seed, iterable) {
    var _a;
    if (iterable === undefined) {
        if (seed === undefined) {
            return function (iterable) {
                return scan(f, iterable);
            };
        }
        if (isIterable(seed)) {
            var iterator_1 = seed[Symbol.iterator]();
            var _b = iterator_1.next(), done = _b.done, value = _b.value;
            if (done) {
                return empty();
            }
            return sync(f, value, (_a = {},
                _a[Symbol.iterator] = function () {
                    return iterator_1;
                },
                _a));
        }
        if (isAsyncIterable(seed)) {
            return asyncWithoutSeed(f, seed);
        }
        throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
    }
    if (isIterable(iterable)) {
        return sync(f, seed, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(f, Promise.resolve(seed), iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default scan;
//# sourceMappingURL=scan.js.map