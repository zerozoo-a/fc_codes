import { __awaiter, __generator, __values } from "tslib.js";
import { isAsyncIterable, isIterable, isPromise } from "../_internal/utils.js";
import { AsyncFunctionException } from "../_internal/error.js";
import concurrent, { isConcurrent } from "./concurrent.js";
function sync(f, iterable) {
    var iterable_1, iterable_1_1, item, res, e_1_1;
    var e_1, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _b.trys.push([0, 5, 6, 7]);
                iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next();
                _b.label = 1;
            case 1:
                if (!!iterable_1_1.done) return [3 /*break*/, 4];
                item = iterable_1_1.value;
                res = f(item);
                if (isPromise(res)) {
                    throw new AsyncFunctionException();
                }
                if (!res) {
                    return [3 /*break*/, 4];
                }
                return [4 /*yield*/, item];
            case 2:
                _b.sent();
                _b.label = 3;
            case 3:
                iterable_1_1 = iterable_1.next();
                return [3 /*break*/, 1];
            case 4: return [3 /*break*/, 7];
            case 5:
                e_1_1 = _b.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 7];
            case 6:
                try {
                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 7: return [2 /*return*/];
        }
    });
}
function asyncSequential(f, iterable) {
    var _a;
    var iterator = iterable[Symbol.asyncIterator]();
    var end = false;
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function (_concurrent) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, done, value;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, iterator.next(_concurrent)];
                        case 1:
                            _a = _b.sent(), done = _a.done, value = _a.value;
                            if (done || end) {
                                return [2 /*return*/, { done: true, value: undefined }];
                            }
                            return [4 /*yield*/, f(value)];
                        case 2:
                            if (!(_b.sent())) {
                                end = true;
                                return [2 /*return*/, { done: true, value: undefined }];
                            }
                            return [2 /*return*/, { done: false, value: value }];
                    }
                });
            });
        },
        _a;
}
function async(f, iterable) {
    var _a;
    var _iterator;
    return _a = {
            next: function (_concurrent) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (_iterator === undefined) {
                            _iterator = isConcurrent(_concurrent)
                                ? asyncSequential(f, concurrent(_concurrent.length, iterable))
                                : asyncSequential(f, iterable);
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function takeWhile(f, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return takeWhile(f, iterable);
        };
    }
    if (isIterable(iterable)) {
        return sync(f, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(f, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default takeWhile;
//# sourceMappingURL=takeWhile.js.map