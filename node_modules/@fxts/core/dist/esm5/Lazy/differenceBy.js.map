{"version":3,"file":"differenceBy.js","sourceRoot":"","sources":["../../../src/Lazy/differenceBy.ts"],"names":[],"mappings":"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","sourcesContent":["import map from \"./map\";\nimport reject from \"./reject\";\nimport pipe1 from \"../pipe1\";\nimport toAsync from \"./toAsync\";\nimport toArray from \"../toArray\";\nimport uniq from \"./uniq\";\nimport pipe from \"../pipe\";\nimport concurrent, { isConcurrent } from \"./concurrent\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\n\nfunction* sync<T>(\n  f: (a: T) => unknown,\n  iterable1: Iterable<T>,\n  iterable2: Iterable<T>,\n) {\n  const set = new Set(map(f, iterable1));\n\n  yield* pipe(\n    iterable2,\n    reject((a) => pipe1(f(a), (b) => set.has(b))),\n    uniq,\n  );\n}\n\nasync function* asyncSequential<T>(\n  f: (a: T) => unknown,\n  iterable1: AsyncIterable<T>,\n  iterable2: AsyncIterable<T>,\n) {\n  const set = new Set(await toArray(map(f, iterable1)));\n\n  yield* pipe(\n    iterable2,\n    reject((a) => pipe1(f(a), (b) => set.has(b))),\n    uniq,\n  );\n}\n\nfunction async<T>(\n  f: (a: T) => unknown,\n  iterable1: AsyncIterable<T>,\n  iterable2: AsyncIterable<T>,\n): AsyncIterableIterator<T> {\n  let _iterator: AsyncIterator<T>;\n  return {\n    async next(_concurrent: any) {\n      if (_iterator === undefined) {\n        _iterator = isConcurrent(_concurrent)\n          ? asyncSequential(\n              f,\n              iterable1,\n              concurrent(_concurrent.length, iterable2),\n            )\n          : asyncSequential(f, iterable1, iterable2);\n      }\n\n      return _iterator.next(_concurrent);\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n\n/**\n * Returns Iterable/AsyncIterable(i.e no duplicate) of all elements in the `iterable2` not contained in the `iterable1`.\n * Duplication is determined according to the value returned by applying the supplied `f` to `iterable2`.\n *\n * @example\n * ```ts\n * const iter = differenceBy(a => a.x, [{ x: 1 }, { x: 4 }], [{ x: 1 },  { x: 2 },  { x: 3 }])\n * iter.next(); // {value: {x: 2}, done: false}\n * iter.next(); // {value: {x: 3}, done: false}\n * iter.next(); // {value: undefined, done: true}\n * ```\n */\nfunction differenceBy<A, B = unknown>(\n  f: (a: A) => B,\n  iterable1: Iterable<A>,\n  iterable2: Iterable<A>,\n): IterableIterator<A>;\n\nfunction differenceBy<A, B = unknown>(\n  f: (a: A) => B,\n  iterable1: AsyncIterable<A>,\n  iterable2: Iterable<A>,\n): AsyncIterableIterator<A>;\n\nfunction differenceBy<A, B = unknown>(\n  f: (a: A) => B,\n  iterable1: Iterable<A>,\n  iterable2: AsyncIterable<A>,\n): AsyncIterableIterator<A>;\n\nfunction differenceBy<A, B = unknown>(\n  f: (a: A) => B,\n  iterable1: AsyncIterable<A>,\n  iterable2: AsyncIterable<A>,\n): AsyncIterableIterator<A>;\n\nfunction differenceBy<A, B = unknown>(\n  f: (a: A) => B,\n  iterable1: Iterable<A> | AsyncIterable<A>,\n  iterable2: Iterable<A> | AsyncIterable<A>,\n): IterableIterator<A> | AsyncIterableIterator<A> {\n  if (isIterable(iterable1) && isIterable(iterable2)) {\n    return sync(f, iterable1, iterable2);\n  }\n  if (isIterable(iterable1) && isAsyncIterable(iterable2)) {\n    return async(f, toAsync(iterable1), iterable2);\n  }\n  if (isAsyncIterable(iterable1) && isIterable(iterable2)) {\n    return async(f, iterable1, toAsync(iterable2));\n  }\n  if (isAsyncIterable(iterable1) && isAsyncIterable(iterable2)) {\n    return async(f, iterable1, iterable2);\n  }\n\n  throw new TypeError(\n    \"'iterable1' and 'iterable2' must be type of Iterable or AsyncIterable\",\n  );\n}\n\nexport default differenceBy;\n"]}