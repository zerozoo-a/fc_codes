import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __generator, __values } from "tslib.js";
import { isAsyncIterable, isIterable } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
import consume from "../consume.js";
function sync(length, iterable) {
    var iterator, iterableIterator;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                iterator = iterable[Symbol.iterator]();
                iterableIterator = (_a = {},
                    _a[Symbol.iterator] = function () {
                        return iterator;
                    },
                    _a);
                consume(iterableIterator, length);
                return [5 /*yield**/, __values(iterableIterator)];
            case 1: return [2 /*return*/, _b.sent()];
        }
    });
}
function asyncSequential(length, iterable) {
    return __asyncGenerator(this, arguments, function asyncSequential_1() {
        var iterator, iterableIterator;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    iterator = iterable[Symbol.asyncIterator]();
                    iterableIterator = (_a = {},
                        _a[Symbol.asyncIterator] = function () {
                            return iterator;
                        },
                        _a);
                    return [4 /*yield*/, __await(consume(iterableIterator, length))];
                case 1:
                    _b.sent();
                    return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(iterableIterator)))];
                case 2: return [4 /*yield*/, __await.apply(void 0, [_b.sent()])];
                case 3: return [4 /*yield*/, __await.apply(void 0, [_b.sent()])];
                case 4: return [2 /*return*/, _b.sent()];
            }
        });
    });
}
function async(length, iterable) {
    var _a;
    var iterator;
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function (_concurrent) {
            if (iterator === undefined) {
                iterator = isConcurrent(_concurrent)
                    ? asyncSequential(length, concurrent(_concurrent.length, iterable))
                    : asyncSequential(length, iterable);
            }
            return iterator.next(_concurrent);
        },
        _a;
}
function drop(length, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return drop(length, iterable);
        };
    }
    if (length < 0) {
        throw new RangeError("'length' must be greater than 0");
    }
    if (isIterable(iterable)) {
        return sync(length, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(length, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default drop;
//# sourceMappingURL=drop.js.map