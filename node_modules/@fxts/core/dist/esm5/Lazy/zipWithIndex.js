import { __awaiter, __generator } from "tslib.js";
import map from "./map.js";
import concurrent, { isConcurrent } from "./concurrent.js";
import { isAsyncIterable, isIterable } from "../_internal/utils.js";
function _zipWithIndex(iterable) {
    var i = -1;
    return map(function (a) { return [++i, a]; }, iterable);
}
function async(iterable) {
    var _a;
    var _iterator;
    return _a = {
            next: function (_concurrent) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (_iterator === undefined) {
                            _iterator = isConcurrent(_concurrent)
                                ? _zipWithIndex(concurrent(_concurrent.length, iterable))
                                : _zipWithIndex(iterable);
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function zipWithIndex(iterable) {
    if (isAsyncIterable(iterable)) {
        return async(iterable);
    }
    if (isIterable(iterable)) {
        return _zipWithIndex(iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default zipWithIndex;
//# sourceMappingURL=zipWithIndex.js.map