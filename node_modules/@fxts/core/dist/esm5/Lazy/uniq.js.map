{"version":3,"file":"uniq.js","sourceRoot":"","sources":["../../../src/Lazy/uniq.ts"],"names":[],"mappings":"AACA,OAAO,QAAQ,MAAM,UAAU,CAAC;AAChC,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AACjE,OAAO,QAAQ,MAAM,aAAa,CAAC;AAEnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCG;AACH,SAAS,IAAI,CACX,QAAW;IAEX,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAkC,CAAC;KACtE;IAED,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;QAC7B,OAAO,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAkC,CAAC;KACtE;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,IAAI,CAAC","sourcesContent":["import ReturnIterableIteratorType from \"../types/ReturnIterableIteratorType\";\nimport uniqueBy from \"./uniqBy\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport identity from \"../identity\";\n\n/**\n * Returns Iterable/AsyncIterable with duplicate values removed inside the given Iterable/AsyncIterable.\n * Only primitive values can be compared.\n *\n * @example\n * ```ts\n * const iter = uniq([1, 2, 1, 3, 2]);\n * iter.next() // {done:false, value: 1}\n * iter.next() // {done:false, value: 2}\n * iter.next() // {done:false, value: 3}\n * iter.next() // {done:true, value: undefined}\n *\n * // with pipe\n * pipe(\n *  [1, 2, 1, 3],\n *  uniq,\n *  toArray,\n * ); // [1, 2, 3]\n *\n * await pipe(\n *  Promise.resolve([1, 2, 1, 3]),\n *  uniq,\n *  toArray,\n * ); // [1, 2, 3]\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(1), Promise.resolve(3)],\n *  toAsync,\n *  uniq,\n *  toArray,\n * ); // [1, 2, 3]\n * ```\n *\n * {@link https://codesandbox.io/s/fxts-uniq-uljmk | Try It}\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\nfunction uniq<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  iterable: A,\n): ReturnIterableIteratorType<A> {\n  if (isIterable(iterable)) {\n    return uniqueBy(identity, iterable) as ReturnIterableIteratorType<A>;\n  }\n\n  if (isAsyncIterable(iterable)) {\n    return uniqueBy(identity, iterable) as ReturnIterableIteratorType<A>;\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default uniq;\n"]}