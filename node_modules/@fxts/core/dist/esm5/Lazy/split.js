import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter, __generator, __values } from "tslib.js";
import { isAsyncIterable, isIterable } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
function sync(sep, iterable) {
    var acc, chr, iterable_1, iterable_1_1, e_1_1;
    var e_1, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!(sep === "")) return [3 /*break*/, 2];
                return [5 /*yield**/, __values(iterable)];
            case 1: return [2 /*return*/, _b.sent()];
            case 2:
                acc = "";
                chr = "";
                _b.label = 3;
            case 3:
                _b.trys.push([3, 9, 10, 11]);
                iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next();
                _b.label = 4;
            case 4:
                if (!!iterable_1_1.done) return [3 /*break*/, 8];
                chr = iterable_1_1.value;
                if (!(chr === sep)) return [3 /*break*/, 6];
                return [4 /*yield*/, acc];
            case 5:
                _b.sent();
                acc = "";
                return [3 /*break*/, 7];
            case 6:
                acc += chr;
                _b.label = 7;
            case 7:
                iterable_1_1 = iterable_1.next();
                return [3 /*break*/, 4];
            case 8: return [3 /*break*/, 11];
            case 9:
                e_1_1 = _b.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 11];
            case 10:
                try {
                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 11:
                if (!(chr === sep)) return [3 /*break*/, 13];
                return [4 /*yield*/, ""];
            case 12:
                _b.sent();
                return [3 /*break*/, 15];
            case 13:
                if (!(acc.length > 0)) return [3 /*break*/, 15];
                return [4 /*yield*/, acc];
            case 14:
                _b.sent();
                _b.label = 15;
            case 15: return [2 /*return*/];
        }
    });
}
function asyncSequential(sep, iterable) {
    return __asyncGenerator(this, arguments, function asyncSequential_1() {
        var acc, chr, iterable_2, iterable_2_1, e_2_1;
        var e_2, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(sep === "")) return [3 /*break*/, 4];
                    return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(iterable)))];
                case 1: return [4 /*yield*/, __await.apply(void 0, [_b.sent()])];
                case 2: return [4 /*yield*/, __await.apply(void 0, [_b.sent()])];
                case 3: return [2 /*return*/, _b.sent()];
                case 4:
                    acc = "";
                    chr = "";
                    _b.label = 5;
                case 5:
                    _b.trys.push([5, 13, 14, 19]);
                    iterable_2 = __asyncValues(iterable);
                    _b.label = 6;
                case 6: return [4 /*yield*/, __await(iterable_2.next())];
                case 7:
                    if (!(iterable_2_1 = _b.sent(), !iterable_2_1.done)) return [3 /*break*/, 12];
                    chr = iterable_2_1.value;
                    if (!(chr === sep)) return [3 /*break*/, 10];
                    return [4 /*yield*/, __await(acc)];
                case 8: return [4 /*yield*/, _b.sent()];
                case 9:
                    _b.sent();
                    acc = "";
                    return [3 /*break*/, 11];
                case 10:
                    acc += chr;
                    _b.label = 11;
                case 11: return [3 /*break*/, 6];
                case 12: return [3 /*break*/, 19];
                case 13:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 19];
                case 14:
                    _b.trys.push([14, , 17, 18]);
                    if (!(iterable_2_1 && !iterable_2_1.done && (_a = iterable_2.return))) return [3 /*break*/, 16];
                    return [4 /*yield*/, __await(_a.call(iterable_2))];
                case 15:
                    _b.sent();
                    _b.label = 16;
                case 16: return [3 /*break*/, 18];
                case 17:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 18: return [7 /*endfinally*/];
                case 19:
                    if (!(chr === sep)) return [3 /*break*/, 22];
                    return [4 /*yield*/, __await("")];
                case 20: return [4 /*yield*/, _b.sent()];
                case 21:
                    _b.sent();
                    return [3 /*break*/, 25];
                case 22:
                    if (!(acc.length > 0)) return [3 /*break*/, 25];
                    return [4 /*yield*/, __await(acc)];
                case 23: return [4 /*yield*/, _b.sent()];
                case 24:
                    _b.sent();
                    _b.label = 25;
                case 25: return [2 /*return*/];
            }
        });
    });
}
function async(sep, iterable) {
    var _a;
    var _iterator;
    return _a = {
            next: function (_concurrent) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (_iterator === undefined) {
                            _iterator = isConcurrent(_concurrent)
                                ? asyncSequential(sep, concurrent(_concurrent.length, iterable))
                                : asyncSequential(sep, iterable);
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function split(sep, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return split(sep, iterable);
        };
    }
    if (isIterable(iterable)) {
        return sync(sep, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(sep, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default split;
//# sourceMappingURL=split.js.map