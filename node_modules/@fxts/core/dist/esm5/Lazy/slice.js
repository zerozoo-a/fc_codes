import { __asyncGenerator, __asyncValues, __await, __awaiter, __generator, __values } from "tslib.js";
import isNumber from "../isNumber.js";
import { isAsyncIterable, isIterable } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
function sync(start, end, iterable) {
    var i, iterable_1, iterable_1_1, item, e_1_1;
    var e_1, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                i = 0;
                _b.label = 1;
            case 1:
                _b.trys.push([1, 7, 8, 9]);
                iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next();
                _b.label = 2;
            case 2:
                if (!!iterable_1_1.done) return [3 /*break*/, 6];
                item = iterable_1_1.value;
                if (!(i >= start && i < end)) return [3 /*break*/, 4];
                return [4 /*yield*/, item];
            case 3:
                _b.sent();
                _b.label = 4;
            case 4:
                i += 1;
                _b.label = 5;
            case 5:
                iterable_1_1 = iterable_1.next();
                return [3 /*break*/, 2];
            case 6: return [3 /*break*/, 9];
            case 7:
                e_1_1 = _b.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 9];
            case 8:
                try {
                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 9: return [2 /*return*/];
        }
    });
}
function asyncSequential(start, end, iterable) {
    return __asyncGenerator(this, arguments, function asyncSequential_1() {
        var i, iterable_2, iterable_2_1, item, e_2_1;
        var e_2, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    i = 0;
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 9, 10, 15]);
                    iterable_2 = __asyncValues(iterable);
                    _b.label = 2;
                case 2: return [4 /*yield*/, __await(iterable_2.next())];
                case 3:
                    if (!(iterable_2_1 = _b.sent(), !iterable_2_1.done)) return [3 /*break*/, 8];
                    item = iterable_2_1.value;
                    if (!(i >= start && i < end)) return [3 /*break*/, 6];
                    return [4 /*yield*/, __await(item)];
                case 4: return [4 /*yield*/, _b.sent()];
                case 5:
                    _b.sent();
                    _b.label = 6;
                case 6:
                    i += 1;
                    _b.label = 7;
                case 7: return [3 /*break*/, 2];
                case 8: return [3 /*break*/, 15];
                case 9:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 15];
                case 10:
                    _b.trys.push([10, , 13, 14]);
                    if (!(iterable_2_1 && !iterable_2_1.done && (_a = iterable_2.return))) return [3 /*break*/, 12];
                    return [4 /*yield*/, __await(_a.call(iterable_2))];
                case 11:
                    _b.sent();
                    _b.label = 12;
                case 12: return [3 /*break*/, 14];
                case 13:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 14: return [7 /*endfinally*/];
                case 15: return [2 /*return*/];
            }
        });
    });
}
function async(start, end, iterable) {
    var _a;
    var iterator;
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function (_concurrent) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (iterator === undefined) {
                        // prettier-ignore
                        iterator = isConcurrent(_concurrent)
                            ? asyncSequential(start, end, concurrent(_concurrent.length, iterable))
                            : asyncSequential(start, end, iterable);
                    }
                    return [2 /*return*/, iterator.next(_concurrent)];
                });
            });
        },
        _a;
}
function _slice(start, end, iterable) {
    if (!isNumber(start) || !isNumber(end)) {
        throw new TypeError("'start' and 'end' must be type of number");
    }
    if (isIterable(iterable)) {
        return sync(start, end, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(start, end, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
function slice(start, end, iterable) {
    if (iterable === undefined) {
        if (end === undefined) {
            return function (iterable) {
                return _slice(start, Infinity, iterable);
            };
        }
        if (isIterable(end) || isAsyncIterable(end)) {
            return _slice(start, Infinity, end);
        }
        if (isNumber(end)) {
            return function (iterable) {
                return _slice(start, end, iterable);
            };
        }
        return function (iterable) {
            return _slice(0, Infinity, iterable);
        };
    }
    return _slice(start, end, iterable);
}
export default slice;
//# sourceMappingURL=slice.js.map