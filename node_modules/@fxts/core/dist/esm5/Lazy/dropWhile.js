import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter, __generator, __values } from "tslib.js";
import { AsyncFunctionException } from "../_internal/error.js";
import { isAsyncIterable, isIterable, isPromise } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
function sync(f, iterable) {
    var iterator, iterableIterator, iterableIterator_1, iterableIterator_1_1, a, res, e_1_1;
    var _a, e_1, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                iterator = iterable[Symbol.iterator]();
                iterableIterator = (_a = {},
                    _a[Symbol.iterator] = function () {
                        return iterator;
                    },
                    _a);
                _c.label = 1;
            case 1:
                _c.trys.push([1, 7, 8, 9]);
                iterableIterator_1 = __values(iterableIterator), iterableIterator_1_1 = iterableIterator_1.next();
                _c.label = 2;
            case 2:
                if (!!iterableIterator_1_1.done) return [3 /*break*/, 6];
                a = iterableIterator_1_1.value;
                res = f(a);
                if (isPromise(res)) {
                    throw new AsyncFunctionException();
                }
                if (res) {
                    return [3 /*break*/, 5];
                }
                return [4 /*yield*/, a];
            case 3:
                _c.sent();
                return [5 /*yield**/, __values(iterableIterator)];
            case 4:
                _c.sent();
                _c.label = 5;
            case 5:
                iterableIterator_1_1 = iterableIterator_1.next();
                return [3 /*break*/, 2];
            case 6: return [3 /*break*/, 9];
            case 7:
                e_1_1 = _c.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 9];
            case 8:
                try {
                    if (iterableIterator_1_1 && !iterableIterator_1_1.done && (_b = iterableIterator_1.return)) _b.call(iterableIterator_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 9: return [2 /*return*/];
        }
    });
}
function asyncSequential(f, iterable) {
    return __asyncGenerator(this, arguments, function asyncSequential_1() {
        var iterator, iterableIterator, iterableIterator_2, iterableIterator_2_1, a, e_2_1;
        var _a;
        var e_2, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    iterator = iterable[Symbol.asyncIterator]();
                    iterableIterator = (_a = {},
                        _a[Symbol.asyncIterator] = function () {
                            return iterator;
                        },
                        _a);
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 11, 12, 17]);
                    iterableIterator_2 = __asyncValues(iterableIterator);
                    _c.label = 2;
                case 2: return [4 /*yield*/, __await(iterableIterator_2.next())];
                case 3:
                    if (!(iterableIterator_2_1 = _c.sent(), !iterableIterator_2_1.done)) return [3 /*break*/, 10];
                    a = iterableIterator_2_1.value;
                    return [4 /*yield*/, __await(f(a))];
                case 4:
                    if (_c.sent()) {
                        return [3 /*break*/, 9];
                    }
                    return [4 /*yield*/, __await(a)];
                case 5: return [4 /*yield*/, _c.sent()];
                case 6:
                    _c.sent();
                    return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(iterableIterator)))];
                case 7: return [4 /*yield*/, __await.apply(void 0, [_c.sent()])];
                case 8:
                    _c.sent();
                    _c.label = 9;
                case 9: return [3 /*break*/, 2];
                case 10: return [3 /*break*/, 17];
                case 11:
                    e_2_1 = _c.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 17];
                case 12:
                    _c.trys.push([12, , 15, 16]);
                    if (!(iterableIterator_2_1 && !iterableIterator_2_1.done && (_b = iterableIterator_2.return))) return [3 /*break*/, 14];
                    return [4 /*yield*/, __await(_b.call(iterableIterator_2))];
                case 13:
                    _c.sent();
                    _c.label = 14;
                case 14: return [3 /*break*/, 16];
                case 15:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 16: return [7 /*endfinally*/];
                case 17: return [2 /*return*/];
            }
        });
    });
}
function async(f, iterable) {
    var _a;
    var iterator;
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function (_concurrent) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (iterator === undefined) {
                        iterator = isConcurrent(_concurrent)
                            ? asyncSequential(f, concurrent(_concurrent.length, iterable))
                            : asyncSequential(f, iterable);
                    }
                    return [2 /*return*/, iterator.next(_concurrent)];
                });
            });
        },
        _a;
}
function dropWhile(f, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return dropWhile(f, iterable);
        };
    }
    if (isIterable(iterable)) {
        return sync(f, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(f, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default dropWhile;
//# sourceMappingURL=dropWhile.js.map