import pipe from "../pipe.js";
import pipe1 from "../pipe1.js";
import filter from "./filter.js";
import { isAsyncIterable, isIterable } from "../_internal/utils.js";
function uniqBy(f, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return uniqBy(f, iterable);
        };
    }
    var s = new Set();
    var checkAndAdd = function (b) {
        if (s.has(b)) {
            return false;
        }
        s.add(b);
        return true;
    };
    if (isIterable(iterable)) {
        return pipe(iterable, filter(function (a) { return pipe1(f(a), checkAndAdd); }));
    }
    if (isAsyncIterable(iterable)) {
        return pipe(iterable, filter(function (a) { return pipe1(f(a), checkAndAdd); }));
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default uniqBy;
//# sourceMappingURL=uniqBy.js.map