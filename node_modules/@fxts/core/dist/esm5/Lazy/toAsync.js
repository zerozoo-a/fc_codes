import { __awaiter, __generator } from "tslib.js";
import { isPromise } from "../_internal/utils.js";
/**
 * Returns AsyncIterable, `toAsync` used when you want to handle Promise values inside Iterable.
 *
 * @example
 * ```ts
 * let acc = 0;
 * for await (const item of toAsync([1, 2, 3, 4, 5])) {
 *   acc += item;
 * }
 * // acc: 15
 *
 * // with pipe
 * await pipe(
 *  [Promise.resolve(1),Promise.resolve(2),Promise.resolve(3)],
 *  toAsync,
 *  map(a => a + 10),
 *  toArray, // [11, 12, 13]
 * );
 * ```
 *
 * {@link https://codesandbox.io/s/fxts-toasync-00nxr | Try It}
 *
 * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},
 * {@link https://fxts.dev/docs/toArray | toArray}
 */
function toAsync(iter) {
    var _a;
    var iterator = iter[Symbol.iterator]();
    return _a = {
            next: function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _a, value, done;
                    return __generator(this, function (_b) {
                        _a = iterator.next(), value = _a.value, done = _a.done;
                        if (isPromise(value)) {
                            return [2 /*return*/, value.then(function (value) { return ({ done: done, value: value }); })];
                        }
                        else {
                            return [2 /*return*/, { done: done, value: value }];
                        }
                        return [2 /*return*/];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
export default toAsync;
//# sourceMappingURL=toAsync.js.map