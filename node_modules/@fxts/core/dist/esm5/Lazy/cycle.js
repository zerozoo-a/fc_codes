import { __asyncGenerator, __asyncValues, __await, __awaiter, __generator, __values } from "tslib.js";
import { isAsyncIterable, isIterable } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
function sync(iterable) {
    var arr, iterable_1, iterable_1_1, a, e_1_1, arr_1, arr_1_1, a, e_2_1;
    var e_1, _a, e_2, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                arr = [];
                _c.label = 1;
            case 1:
                _c.trys.push([1, 6, 7, 8]);
                iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next();
                _c.label = 2;
            case 2:
                if (!!iterable_1_1.done) return [3 /*break*/, 5];
                a = iterable_1_1.value;
                return [4 /*yield*/, a];
            case 3:
                _c.sent();
                arr.push(a);
                _c.label = 4;
            case 4:
                iterable_1_1 = iterable_1.next();
                return [3 /*break*/, 2];
            case 5: return [3 /*break*/, 8];
            case 6:
                e_1_1 = _c.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 8];
            case 7:
                try {
                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 8:
                if (!arr.length) return [3 /*break*/, 17];
                _c.label = 9;
            case 9:
                _c.trys.push([9, 14, 15, 16]);
                arr_1 = (e_2 = void 0, __values(arr)), arr_1_1 = arr_1.next();
                _c.label = 10;
            case 10:
                if (!!arr_1_1.done) return [3 /*break*/, 13];
                a = arr_1_1.value;
                return [4 /*yield*/, a];
            case 11:
                _c.sent();
                _c.label = 12;
            case 12:
                arr_1_1 = arr_1.next();
                return [3 /*break*/, 10];
            case 13: return [3 /*break*/, 16];
            case 14:
                e_2_1 = _c.sent();
                e_2 = { error: e_2_1 };
                return [3 /*break*/, 16];
            case 15:
                try {
                    if (arr_1_1 && !arr_1_1.done && (_b = arr_1.return)) _b.call(arr_1);
                }
                finally { if (e_2) throw e_2.error; }
                return [7 /*endfinally*/];
            case 16: return [3 /*break*/, 8];
            case 17: return [2 /*return*/];
        }
    });
}
function asyncSequential(iterable) {
    return __asyncGenerator(this, arguments, function asyncSequential_1() {
        var arr, iterable_2, iterable_2_1, a, e_3_1, arr_2, arr_2_1, a, e_4_1;
        var e_4, _a;
        var e_3, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    arr = [];
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 8, 9, 14]);
                    iterable_2 = __asyncValues(iterable);
                    _c.label = 2;
                case 2: return [4 /*yield*/, __await(iterable_2.next())];
                case 3:
                    if (!(iterable_2_1 = _c.sent(), !iterable_2_1.done)) return [3 /*break*/, 7];
                    a = iterable_2_1.value;
                    return [4 /*yield*/, __await(a)];
                case 4: return [4 /*yield*/, _c.sent()];
                case 5:
                    _c.sent();
                    arr.push(a);
                    _c.label = 6;
                case 6: return [3 /*break*/, 2];
                case 7: return [3 /*break*/, 14];
                case 8:
                    e_3_1 = _c.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 14];
                case 9:
                    _c.trys.push([9, , 12, 13]);
                    if (!(iterable_2_1 && !iterable_2_1.done && (_b = iterable_2.return))) return [3 /*break*/, 11];
                    return [4 /*yield*/, __await(_b.call(iterable_2))];
                case 10:
                    _c.sent();
                    _c.label = 11;
                case 11: return [3 /*break*/, 13];
                case 12:
                    if (e_3) throw e_3.error;
                    return [7 /*endfinally*/];
                case 13: return [7 /*endfinally*/];
                case 14:
                    if (!arr.length) return [3 /*break*/, 24];
                    _c.label = 15;
                case 15:
                    _c.trys.push([15, 21, 22, 23]);
                    arr_2 = (e_4 = void 0, __values(arr)), arr_2_1 = arr_2.next();
                    _c.label = 16;
                case 16:
                    if (!!arr_2_1.done) return [3 /*break*/, 20];
                    a = arr_2_1.value;
                    return [4 /*yield*/, __await(a)];
                case 17: return [4 /*yield*/, _c.sent()];
                case 18:
                    _c.sent();
                    _c.label = 19;
                case 19:
                    arr_2_1 = arr_2.next();
                    return [3 /*break*/, 16];
                case 20: return [3 /*break*/, 23];
                case 21:
                    e_4_1 = _c.sent();
                    e_4 = { error: e_4_1 };
                    return [3 /*break*/, 23];
                case 22:
                    try {
                        if (arr_2_1 && !arr_2_1.done && (_a = arr_2.return)) _a.call(arr_2);
                    }
                    finally { if (e_4) throw e_4.error; }
                    return [7 /*endfinally*/];
                case 23: return [3 /*break*/, 14];
                case 24: return [2 /*return*/];
            }
        });
    });
}
function async(iterable) {
    var _a;
    var _iterator;
    return _a = {
            next: function (_concurrent) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (_iterator === undefined) {
                            _iterator = isConcurrent(_concurrent)
                                ? asyncSequential(concurrent(_concurrent.length, iterable))
                                : asyncSequential(iterable);
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function cycle(iterable) {
    if (isIterable(iterable)) {
        return sync(iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default cycle;
//# sourceMappingURL=cycle.js.map