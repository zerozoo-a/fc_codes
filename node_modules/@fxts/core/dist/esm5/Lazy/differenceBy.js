import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter, __generator, __values } from "tslib.js";
import map from "./map.js";
import reject from "./reject.js";
import pipe1 from "../pipe1.js";
import toAsync from "./toAsync.js";
import toArray from "../toArray.js";
import uniq from "./uniq.js";
import pipe from "../pipe.js";
import concurrent, { isConcurrent } from "./concurrent.js";
import { isAsyncIterable, isIterable } from "../_internal/utils.js";
function sync(f, iterable1, iterable2) {
    var set;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                set = new Set(map(f, iterable1));
                return [5 /*yield**/, __values(pipe(iterable2, reject(function (a) { return pipe1(f(a), function (b) { return set.has(b); }); }), uniq))];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}
function asyncSequential(f, iterable1, iterable2) {
    return __asyncGenerator(this, arguments, function asyncSequential_1() {
        var set, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = Set.bind;
                    return [4 /*yield*/, __await(toArray(map(f, iterable1)))];
                case 1:
                    set = new (_a.apply(Set, [void 0, _b.sent()]))();
                    return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(pipe(iterable2, reject(function (a) { return pipe1(f(a), function (b) { return set.has(b); }); }), uniq))))];
                case 2: return [4 /*yield*/, __await.apply(void 0, [_b.sent()])];
                case 3:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function async(f, iterable1, iterable2) {
    var _a;
    var _iterator;
    return _a = {
            next: function (_concurrent) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (_iterator === undefined) {
                            _iterator = isConcurrent(_concurrent)
                                ? asyncSequential(f, iterable1, concurrent(_concurrent.length, iterable2))
                                : asyncSequential(f, iterable1, iterable2);
                        }
                        return [2 /*return*/, _iterator.next(_concurrent)];
                    });
                });
            }
        },
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a;
}
function differenceBy(f, iterable1, iterable2) {
    if (isIterable(iterable1) && isIterable(iterable2)) {
        return sync(f, iterable1, iterable2);
    }
    if (isIterable(iterable1) && isAsyncIterable(iterable2)) {
        return async(f, toAsync(iterable1), iterable2);
    }
    if (isAsyncIterable(iterable1) && isIterable(iterable2)) {
        return async(f, iterable1, toAsync(iterable2));
    }
    if (isAsyncIterable(iterable1) && isAsyncIterable(iterable2)) {
        return async(f, iterable1, iterable2);
    }
    throw new TypeError("'iterable1' and 'iterable2' must be type of Iterable or AsyncIterable");
}
export default differenceBy;
//# sourceMappingURL=differenceBy.js.map