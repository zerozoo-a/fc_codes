{"version":3,"file":"repeat.js","sourceRoot":"","sources":["../../../src/Lazy/repeat.ts"],"names":[],"mappings":";AAAA,SAAU,IAAI,CAAI,CAAS,EAAE,KAAQ;;;;;gBAC1B,CAAC,GAAG,CAAC;;;qBAAE,CAAA,CAAC,GAAG,CAAC,CAAA;gBACnB,qBAAM,KAAK,EAAA;;gBAAX,SAAW,CAAC;;;gBADS,CAAC,EAAE,CAAA;;;;;CAG3B;AAuBD,SAAS,MAAM,CACb,CAAS,EACT,KAAS;IAET,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO,UAAC,KAAQ;YACd,OAAO,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAC;KACH;IAED,OAAO,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AACxB,CAAC;AAED,eAAe,MAAM,CAAC","sourcesContent":["function* sync<T>(n: number, value: T): IterableIterator<T> {\n  for (let i = 0; i < n; i++) {\n    yield value;\n  }\n}\n\n/**\n * Returns a Iterable/AsyncIterable of size n containing a specified value.\n *\n * @example\n * ```ts\n * const iter = repeat(2, 10);\n * iter.next(); // {value: 10, done:false}\n * iter.next(); // {value: 10, done:false}\n * iter.next(); // {value: undefined, done:true}\n *\n * // with pipe\n * pipe(\n *   repeat(2, 10),\n *   toArray,\n * ); // [10, 10]\n * ```\n */\nfunction repeat<T>(n: number, value: T): IterableIterator<T>;\n\nfunction repeat<T>(n: number): (value: T) => IterableIterator<T>;\n\nfunction repeat<T>(\n  n: number,\n  value?: T,\n): IterableIterator<T> | ((value: T) => IterableIterator<T>) {\n  if (value === undefined) {\n    return (value: T) => {\n      return repeat(n, value);\n    };\n  }\n\n  return sync(n, value);\n}\n\nexport default repeat;\n"]}