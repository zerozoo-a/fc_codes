{"version":3,"file":"pluck.js","sourceRoot":"","sources":["../../../src/Lazy/pluck.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,OAAO,CAAC;AACxB,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAwDjE,SAAS,KAAK,CACZ,GAAM,EACN,QAAyC;IAMzC,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,UAAC,QAAa;YACnB,OAAO,KAAK,CAAC,GAAG,EAAE,QAAQ,CAEK,CAAC;QAClC,CAAC,CAAC;KACH;IAED,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,GAAG,CAAC,EAAN,CAAM,EAAE,QAAQ,CAAC,CAAC;KACrC;IAED,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;QAC7B,OAAO,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,GAAG,CAAC,EAAN,CAAM,EAAE,QAAQ,CAAC,CAAC;KACrC;IAED,MAAM,IAAI,SAAS,CAAC,oDAAoD,CAAC,CAAC;AAC5E,CAAC;AAED,eAAe,KAAK,CAAC","sourcesContent":["import map from \"./map\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\n\n/**\n * Returns Iterable/AsyncIterable by plucking the same named property off all objects in Iterable/AsyncIterable supplied.\n *\n * @example\n * ```ts\n * const iter = pluck('age', [{age:21}, {age:22}, {age:23}]);\n * iter.next(); // {done:false, value: 21}\n * iter.next(); // {done:false, value: 22}\n * iter.next(); // {done:false, value: 23}\n *\n * // with pipe\n * pipe(\n *  [{age:21}, {age:22}, {age:23}],\n *  pluck('age'),\n *  toArray,\n * ); // [21, 22 ,23]\n *\n * // if you want to use asynchronous callback\n * await pipe(\n *  Promise.resolve([{age:21}, {age:22}, {age:23}]),\n *  toAsync,\n *  pluck('age'),\n *  toArray,\n * ); // [21, 22 ,23]\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve({age:21}), Promise.resolve({age:22}), Promise.resolve({age:23})],\n *  toAsync,\n *  pluck('age'),\n *  toArray,\n * ); // [21, 22 ,23]\n * ```\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toAsync | toAsync},\n * {@link https://fxts.dev/docs/toArray | toArray}\n */\nfunction pluck<O extends object, K extends keyof O>(\n  key: K,\n  iterable: Iterable<O>,\n): IterableIterator<O[K]>;\n\nfunction pluck<O extends object, K extends keyof O>(\n  key: K,\n  iterable: AsyncIterable<O>,\n): AsyncIterableIterator<O[K]>;\n\nfunction pluck<O extends object, K extends keyof O>(\n  key: K,\n): (iterable: Iterable<O>) => IterableIterator<O[K]>;\n\nfunction pluck<O extends object, K extends keyof O>(\n  key: K,\n): (iterable: AsyncIterable<O>) => AsyncIterableIterator<O[K]>;\n\nfunction pluck<O extends object, K extends keyof O>(\n  key: K,\n  iterable?: Iterable<O> | AsyncIterable<O>,\n):\n  | IterableIterator<O[K]>\n  | AsyncIterableIterator<O[K]>\n  | ((iterable: Iterable<O>) => IterableIterator<O[K]>)\n  | ((iterable: AsyncIterable<O>) => AsyncIterableIterator<O[K]>) {\n  if (iterable === undefined) {\n    return (iterable: any): any => {\n      return pluck(key, iterable) as\n        | IterableIterator<O[K]>\n        | AsyncIterableIterator<O[K]>;\n    };\n  }\n\n  if (isIterable(iterable)) {\n    return map((a) => a[key], iterable);\n  }\n\n  if (isAsyncIterable(iterable)) {\n    return map((a) => a[key], iterable);\n  }\n\n  throw new TypeError(\"iterable must be type of Iterable or AsyncIterable\");\n}\n\nexport default pluck;\n"]}