{"version":3,"file":"slice.js","sourceRoot":"","sources":["../../../src/Lazy/slice.ts"],"names":[],"mappings":"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","sourcesContent":["import isNumber from \"../isNumber\";\nimport ReturnIterableIteratorType from \"../types/ReturnIterableIteratorType\";\nimport { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport concurrent, { isConcurrent } from \"./concurrent\";\n\nfunction* sync<T>(\n  start: number,\n  end: number,\n  iterable: Iterable<T>,\n): IterableIterator<T> {\n  let i = 0;\n  for (const item of iterable) {\n    if (i >= start && i < end) {\n      yield item;\n    }\n    i += 1;\n  }\n}\n\nasync function* asyncSequential<T>(\n  start: number,\n  end: number,\n  iterable: AsyncIterable<T>,\n): AsyncIterableIterator<T> {\n  let i = 0;\n  for await (const item of iterable) {\n    if (i >= start && i < end) {\n      yield item;\n    }\n    i += 1;\n  }\n}\n\nfunction async<T>(\n  start: number,\n  end: number,\n  iterable: AsyncIterable<T>,\n): AsyncIterableIterator<T> {\n  let iterator: AsyncIterator<T>;\n  return {\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n\n    async next(_concurrent: any) {\n      if (iterator === undefined) {\n        // prettier-ignore\n        iterator = isConcurrent(_concurrent)\n          ? asyncSequential(start, end, concurrent(_concurrent.length, iterable))\n          : asyncSequential(start, end, iterable);\n      }\n\n      return iterator.next(_concurrent);\n    },\n  };\n}\n\nfunction _slice<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  start: number,\n  end: number,\n  iterable: T,\n) {\n  if (!isNumber(start) || !isNumber(end)) {\n    throw new TypeError(\"'start' and 'end' must be type of number\");\n  }\n\n  if (isIterable(iterable)) {\n    return sync(start, end, iterable);\n  }\n\n  if (isAsyncIterable(iterable)) {\n    return async(start, end, iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\n/**\n * Returns Iterable/AsyncIterable of the given elements from startIndex(inclusive) to endIndex(exclusive).\n *\n * @example\n * ```ts\n * const iter1 = slice(1, 3, ['a', 'b', 'c', 'd', 'e']);\n * iter1.next(); // {value: 'b', done: false};\n * iter1.next(); // {value: 'c', done: false};\n * iter1.next(); // {value: undefined, done: true};\n *\n * const iter2 = slice(3, ['a', 'b', 'c', 'd', 'e']);\n * iter2.next(); // {value: 'd', done: false};\n * iter2.next(); // {value: 'e', done: false};\n * iter2.next(); // {value: undefined, done: true};\n *\n * const iter3 = slice(3, \"abcde\");\n * iter3.next(); // {value: 'd', done: false};\n * iter3.next(); // {value: 'e', done: false};\n * iter3.next(); // {value: undefined, done: true};\n *\n * // with pipe\n * pipe(\n *  [1, 2, 3, 4, 5],\n *  slice(3),\n *  toArray,\n * ); // [4, 5]\n *\n * pipe(\n *  [1, 2, 3, 4, 5],\n *  slice(1, 3),\n *  toArray,\n * ); // [2, 3]\n * ```\n *\n * see {@link https://fxts.dev/docs/pipe | pipe}, {@link https://fxts.dev/docs/toArray | toArray}\n */\n// prettier-ignore\nfunction slice<T>(\n  start: number, \n  iterable: Iterable<T>\n): IterableIterator<T>;\n\nfunction slice<T>(\n  start: number,\n  iterable: AsyncIterable<T>,\n): AsyncIterableIterator<T>;\n\nfunction slice<T>(\n  start: number,\n  end: number,\n  iterable: Iterable<T>,\n): IterableIterator<T>;\n\nfunction slice<T>(\n  start: number,\n  end: number,\n  iterable: AsyncIterable<T>,\n): AsyncIterableIterator<T>;\n\nfunction slice<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  start: number,\n): (iterable: A) => ReturnIterableIteratorType<A>;\n\nfunction slice<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  start: number,\n  end: number,\n): (iterable: A) => ReturnIterableIteratorType<A>;\n\nfunction slice<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  start: number | T,\n  end?: number | T,\n  iterable?: T,\n) {\n  if (iterable === undefined) {\n    if (end === undefined) {\n      return (iterable: T) => {\n        return _slice(start as number, Infinity, iterable);\n      };\n    }\n\n    if (isIterable(end) || isAsyncIterable(end)) {\n      return _slice(start as number, Infinity, end);\n    }\n\n    if (isNumber(end)) {\n      return (iterable: T) => {\n        return _slice(start as number, end, iterable);\n      };\n    }\n\n    return (iterable: T) => {\n      return _slice(0, Infinity, iterable);\n    };\n  }\n\n  return _slice(start as number, end as number, iterable as T);\n}\n\nexport default slice;\n"]}