import { __asyncGenerator, __await, __awaiter, __generator } from "tslib.js";
import toArray from "../toArray.js";
import isArray from "../isArray.js";
import isString from "../isString.js";
import { isAsyncIterable, isIterable } from "../_internal/utils.js";
import concurrent, { isConcurrent } from "./concurrent.js";
function sync(iterable) {
    var arr, i;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                arr = isArray(iterable) || isString(iterable) ? iterable : toArray(iterable);
                i = arr.length - 1;
                _a.label = 1;
            case 1:
                if (!(i >= 0)) return [3 /*break*/, 4];
                return [4 /*yield*/, arr[i]];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3:
                i--;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/];
        }
    });
}
function asyncSequential(iterable) {
    return __asyncGenerator(this, arguments, function asyncSequential_1() {
        var arr, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, __await(toArray(iterable))];
                case 1:
                    arr = _a.sent();
                    i = arr.length - 1;
                    _a.label = 2;
                case 2:
                    if (!(i >= 0)) return [3 /*break*/, 6];
                    return [4 /*yield*/, __await(arr[i])];
                case 3: return [4 /*yield*/, _a.sent()];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5:
                    i--;
                    return [3 /*break*/, 2];
                case 6: return [2 /*return*/];
            }
        });
    });
}
function async(iterable) {
    var _a;
    var iterator;
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return this;
        },
        _a.next = function (_concurrent) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (iterator === undefined) {
                        iterator = isConcurrent(_concurrent)
                            ? asyncSequential(concurrent(_concurrent.length, iterable))
                            : asyncSequential(iterable);
                    }
                    return [2 /*return*/, iterator.next(_concurrent)];
                });
            });
        },
        _a;
}
function reverse(iterable) {
    if (isIterable(iterable)) {
        return sync(iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default reverse;
//# sourceMappingURL=reverse.js.map