{"version":3,"file":"lte.js","sourceRoot":"","sources":["../../src/lte.ts"],"names":[],"mappings":"AAwBA,SAAS,GAAG,CAAC,CAAM,EAAE,CAAO;IAC1B,IAAI,CAAC,KAAK,SAAS,EAAE;QACnB,OAAO,UAAC,EAAO,IAAK,OAAA,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAV,CAAU,CAAC;KAChC;IAED,IAAI,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,WAAW,EAAE;QACnC,MAAM,IAAI,SAAS,CACjB,yDAAyD,CAC1D,CAAC;KACH;IAED,OAAO,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;AAED,eAAe,GAAG,CAAC","sourcesContent":["/**\n * Returns true if the first argument is less or equal than the second; false otherwise.\n *\n * @example\n * ```ts\n * lte(5, 1) // expected false\n * lte(1, 1) // expected true\n * lte(1, 5) // expected true\n * lte(\"a\", \"b\") // expected true\n * lte(\"b\", \"a\") // expected false\n *\n * filter(lte(5), [1, 2, 4, 5, 8, 9]) // Iterable<[5, 8, 9]>\n * filter(lte(9), [6, 7, 8]) // Iterable<[]>\n * filter(lte(\"b\"), [\"a\", \"b\", \"c\"]) // Iterable<[\"b\", \"c\"]>\n * filter(lte(\"e\"), [\"c\", \"d\"]) // Itreable<[]>\n * ```\n */\nfunction lte(a: string): (b: string) => boolean;\nfunction lte(a: number): (b: number) => boolean;\nfunction lte(a: Date): (b: Date) => boolean;\nfunction lte(a: string, b: string): boolean;\nfunction lte(a: number, b: number): boolean;\nfunction lte(a: Date, b: Date): boolean;\n\nfunction lte(a: any, b?: any): ((b: any) => boolean) | boolean {\n  if (b === undefined) {\n    return (_b: any) => lte(a, _b);\n  }\n\n  if (a.constructor !== b.constructor) {\n    throw new TypeError(\n      \"The values you want to compare must be of the same type\",\n    );\n  }\n\n  return a <= b;\n}\n\nexport default lte;\n"]}