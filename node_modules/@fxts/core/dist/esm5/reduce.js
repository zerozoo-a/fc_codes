import { __asyncValues, __awaiter, __generator, __values } from "tslib.js";
import pipe1 from "./pipe1.js";
import { isAsyncIterable, isIterable } from "./_internal/utils.js";
function sync(f, acc, iterable) {
    var e_1, _a;
    try {
        for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
            var a = iterable_1_1.value;
            acc = f(acc, a);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return acc;
}
function async(f, acc, iterable) {
    var iterable_2, iterable_2_1;
    var e_2, _a;
    return __awaiter(this, void 0, void 0, function () {
        var _loop_1, e_2_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 6, 7, 12]);
                    _loop_1 = function () {
                        var a;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    a = iterable_2_1.value;
                                    return [4 /*yield*/, pipe1(acc, function (acc) { return f(acc, a); })];
                                case 1:
                                    // becauseof using es5, use `await`
                                    acc = _c.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    iterable_2 = __asyncValues(iterable);
                    _b.label = 1;
                case 1: return [4 /*yield*/, iterable_2.next()];
                case 2:
                    if (!(iterable_2_1 = _b.sent(), !iterable_2_1.done)) return [3 /*break*/, 5];
                    return [5 /*yield**/, _loop_1()];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4: return [3 /*break*/, 1];
                case 5: return [3 /*break*/, 12];
                case 6:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 12];
                case 7:
                    _b.trys.push([7, , 10, 11]);
                    if (!(iterable_2_1 && !iterable_2_1.done && (_a = iterable_2.return))) return [3 /*break*/, 9];
                    return [4 /*yield*/, _a.call(iterable_2)];
                case 8:
                    _b.sent();
                    _b.label = 9;
                case 9: return [3 /*break*/, 11];
                case 10:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 11: return [7 /*endfinally*/];
                case 12: return [2 /*return*/, acc];
            }
        });
    });
}
function reduce(f, seed, iterable) {
    var _a;
    if (iterable === undefined) {
        if (seed === undefined) {
            return function (iterable) {
                return reduce(f, iterable);
            };
        }
        if (isIterable(seed)) {
            var iterator_1 = seed[Symbol.iterator]();
            var _b = iterator_1.next(), done = _b.done, value = _b.value;
            if (done) {
                return undefined;
            }
            return sync(f, value, (_a = {},
                _a[Symbol.iterator] = function () {
                    return iterator_1;
                },
                _a));
        }
        if (isAsyncIterable(seed)) {
            var iterator_2 = seed[Symbol.asyncIterator]();
            return iterator_2.next().then(function (_a) {
                var _b;
                var done = _a.done, value = _a.value;
                if (done) {
                    return undefined;
                }
                return async(f, value, (_b = {},
                    _b[Symbol.asyncIterator] = function () {
                        return iterator_2;
                    },
                    _b));
            });
        }
        throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
    }
    if (isIterable(iterable)) {
        return sync(f, seed, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(f, Promise.resolve(seed), iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default reduce;
//# sourceMappingURL=reduce.js.map