import { __awaiter, __generator } from "tslib.js";
import each from "./each.js";
import { isAsyncIterable, isIterable } from "./_internal/utils.js";
function sync(iterable) {
    var a = 0;
    each(function () { return a++; }, iterable);
    return a;
}
function async(iterable) {
    return __awaiter(this, void 0, void 0, function () {
        var a;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    a = 0;
                    return [4 /*yield*/, each(function () { return a++; }, iterable)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, a];
            }
        });
    });
}
function size(iterable) {
    if (isIterable(iterable)) {
        return sync(iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default size;
//# sourceMappingURL=size.js.map