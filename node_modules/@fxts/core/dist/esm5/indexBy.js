import { __awaiter, __generator } from "tslib.js";
import { isAsyncIterable, isIterable, isPromise } from "./_internal/utils.js";
import reduce from "./reduce.js";
import { AsyncFunctionException } from "./_internal/error.js";
function indexBy(f, iterable) {
    var _this = this;
    if (iterable === undefined) {
        return function (iterable) {
            return indexBy(f, iterable);
        };
    }
    var obj = {};
    if (isIterable(iterable)) {
        return reduce(function (group, a) {
            var key = f(a);
            if (isPromise(key)) {
                throw new AsyncFunctionException();
            }
            return (group[key] = a), group;
        }, obj, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return reduce(function (group, a) { return __awaiter(_this, void 0, void 0, function () {
            var key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, f(a)];
                    case 1:
                        key = _a.sent();
                        return [2 /*return*/, ((group[key] = a), group)];
                }
            });
        }); }, obj, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default indexBy;
//# sourceMappingURL=indexBy.js.map