import reduce from "./reduce.js";
import { isAsyncIterable, isIterable } from "./_internal/utils.js";
function sync(sep, iterable) {
    var _a;
    return (_a = reduce(function (a, b) { return "".concat(a).concat(sep).concat(b); }, iterable)) !== null && _a !== void 0 ? _a : "";
}
function async(sep, iterable) {
    return reduce(function (a, b) { return "".concat(a).concat(sep).concat(b); }, iterable).then(function (a) { return a !== null && a !== void 0 ? a : ""; });
}
function join(sep, iterable) {
    if (iterable === undefined) {
        return function (iterable) {
            return join(sep, iterable);
        };
    }
    if (Array.isArray(iterable) && iterable.length === 0)
        return "";
    if (isIterable(iterable)) {
        return sync(sep, iterable);
    }
    if (isAsyncIterable(iterable)) {
        return async(sep, iterable);
    }
    throw new TypeError("'iterable' must be type of Iterable or AsyncIterable");
}
export default join;
//# sourceMappingURL=join.js.map