{"version":3,"file":"compactObject.js","sourceRoot":"","sources":["../../src/compactObject.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,SAAS,CAAC;AAsC5B;;;;;;;;GAQG;AACH,MAAM,CAAC,OAAO,UAAU,aAAa,CACnC,GAAM;IAeN,OAAO,MAAM,CAAC,WAAW,CACvB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAC,EAAS;YAAT,KAAA,aAAS,EAAN,KAAK,QAAA;QAAM,OAAA,CAAC,KAAK,CAAC,KAAK,CAAC;IAAb,CAAa,CAAC,CAClD,CAAC;AACX,CAAC","sourcesContent":["import isNil from \"./isNil\";\nimport Merge from \"./types/Merge\";\n\ntype MapNonNullableEntries<T extends object> = {\n  [K in keyof T]: [K, Exclude<T[K], null | undefined>];\n};\n\ntype MapRequiredKeys<T extends object> = {\n  [K in keyof T]: null extends Extract<T[K], null>\n    ? never\n    : undefined extends Extract<T[K], undefined>\n    ? never\n    : K;\n};\n\ntype MapOptionalKeys<T extends object> = {\n  [K in keyof T]: Exclude<T[K], null | undefined> extends never\n    ? never\n    : T[K] extends Exclude<T[K], null | undefined>\n    ? never\n    : K;\n};\n\ntype RequiredKeys<T extends object, U = MapRequiredKeys<T>> = Exclude<\n  U[keyof U],\n  never\n>;\n\ntype OptionalKeys<T extends object, U = MapOptionalKeys<T>> = Exclude<\n  U[keyof U],\n  never\n>;\n\ntype NonNullableEntries<\n  T extends object,\n  U = MapNonNullableEntries<T>,\n> = Exclude<U[keyof U], [any, never]>;\n\n/**\n * Returns an object with all nullable values removed.\n *\n * @example\n * ```ts\n * const compacted = compactObject({ a: 1, b: \"b\", c: null, d: undefined });\n * // {a: 1, b: \"b\"}\n * ```\n */\nexport default function compactObject<T extends object>(\n  obj: T,\n): Merge<\n  {\n    [K in Extract<keyof T, RequiredKeys<T>>]: Extract<\n      NonNullableEntries<T>,\n      [K, any]\n    >[1];\n  },\n  {\n    [K in Extract<keyof T, OptionalKeys<T>>]?: Extract<\n      NonNullableEntries<T>,\n      [K, any]\n    >[1];\n  }\n> {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([, value]) => !isNil(value)),\n  ) as any;\n}\n"]}