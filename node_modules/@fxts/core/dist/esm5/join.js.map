{"version":3,"file":"join.js","sourceRoot":"","sources":["../../src/join.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAShE,SAAS,IAAI,CAAI,GAAW,EAAE,QAAqB;;IACjD,OAAO,MAAA,MAAM,CAAC,UAAC,CAAS,EAAE,CAAC,IAAK,OAAA,UAAG,CAAC,SAAG,GAAG,SAAG,CAAC,CAAE,EAAhB,CAAgB,EAAE,QAAQ,CAAC,mCAAI,EAAE,CAAC;AACpE,CAAC;AAED,SAAS,KAAK,CAAI,GAAW,EAAE,QAA0B;IACvD,OAAO,MAAM,CAAC,UAAC,CAAS,EAAE,CAAC,IAAK,OAAA,UAAG,CAAC,SAAG,GAAG,SAAG,CAAC,CAAE,EAAhB,CAAgB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAC9D,UAAC,CAAC,IAAK,OAAA,CAAC,aAAD,CAAC,cAAD,CAAC,GAAI,EAAE,EAAP,CAAO,CACf,CAAC;AACJ,CAAC;AAwCD,SAAS,IAAI,CACX,GAAW,EACX,QAAY;IAEZ,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,UAAC,QAAW;YACjB,OAAO,IAAI,CAAC,GAAG,EAAE,QAAe,CAAsB,CAAC;QACzD,CAAC,CAAC;KACH;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,EAAE,CAAC;IAEhE,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;KAC5B;IAED,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;QAC7B,OAAO,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;KAC7B;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,IAAI,CAAC","sourcesContent":["import reduce from \"./reduce\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\n\ntype ReturnJoinType<T extends Iterable<unknown> | AsyncIterable<unknown>> =\n  T extends Iterable<unknown>\n    ? string\n    : T extends AsyncIterable<unknown>\n    ? Promise<string>\n    : never;\n\nfunction sync<A>(sep: string, iterable: Iterable<A>) {\n  return reduce((a: string, b) => `${a}${sep}${b}`, iterable) ?? \"\";\n}\n\nfunction async<A>(sep: string, iterable: AsyncIterable<A>) {\n  return reduce((a: string, b) => `${a}${sep}${b}`, iterable).then(\n    (a) => a ?? \"\",\n  );\n}\n\n/**\n * Returns all elements in the given iterable into a string separated by separator.\n *\n * @example\n * ```ts\n * const joined = join('~', ['a', 'b', 'c']); // 'a~b~c'\n *\n * // with pipe\n * pipe(\n *  [1, 2, 3, 4],\n *  map(a => a + 10),\n *  filter(a => a % 2 === 0)\n *  join('-'),\n * ); // '12-14'\n *\n * await pipe(\n *  Promise.resolve([1, 2, 3, 4]),\n *  join('-'),\n * ); // '1-2-3-4'\n *\n * // with toAsync\n * await pipe(\n *  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3), Promise.resolve(4)],\n *  toAsync,\n *  join('-'),\n * ); // '1-2-3-4'\n * ```\n */\nfunction join<A extends readonly []>(sep: string, iterable: A): \"\";\n\nfunction join<A>(sep: string, iterable: Iterable<A>): string;\n\nfunction join<A>(sep: string, iterable: AsyncIterable<A>): Promise<string>;\n\nfunction join<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  sep: string,\n): (iterable: A) => ReturnJoinType<A>;\n\nfunction join<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  sep: string,\n  iterable?: A,\n): string | Promise<string> | ((iterable: A) => ReturnJoinType<A>) {\n  if (iterable === undefined) {\n    return (iterable: A): ReturnJoinType<A> => {\n      return join(sep, iterable as any) as ReturnJoinType<A>;\n    };\n  }\n\n  if (Array.isArray(iterable) && iterable.length === 0) return \"\";\n\n  if (isIterable(iterable)) {\n    return sync(sep, iterable);\n  }\n\n  if (isAsyncIterable(iterable)) {\n    return async(sep, iterable);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default join;\n"]}