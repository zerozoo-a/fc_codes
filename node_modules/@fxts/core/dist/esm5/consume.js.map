{"version":3,"file":"consume.js","sourceRoot":"","sources":["../../src/consume.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAChE,OAAO,KAAK,MAAM,cAAc,CAAC;AAEjC,SAAS,IAAI,CAAI,QAAqB,EAAE,CAAS;;IAC/C,IAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;;QAC7C,6DAA6D;QAC7D,KAAgB,IAAA,KAAA,SAAA,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,gBAAA,4BAAE;YAAxB,IAAM,CAAC,WAAA;YACV,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE;gBACxB,OAAO;aACR;SACF;;;;;;;;;AACH,CAAC;AAED,SAAe,KAAK,CAAI,QAA0B,EAAE,CAAS;;;;;;;oBACrD,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;;;;oBAE5B,KAAA,cAAA,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;;;;;oBAAhB,CAAC,WAAA,CAAA;oBACX,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;oBAA1B,IAAI,CAAC,SAAqB,CAAC,CAAC,IAAI,EAAE;wBAChC,sBAAO;qBACR;;;;;;;;;;;;;;;;;;;;;;;;CAEJ;AA8BD,SAAS,OAAO,CACd,QAAW,EACX,CAAY;IAAZ,kBAAA,EAAA,YAAY;IAEZ,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;KAC1B;IAED,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;QAC7B,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;KAC3B;IAED,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;AAC9E,CAAC;AAED,eAAe,OAAO,CAAC","sourcesContent":["import ReturnValueType from \"./types/ReturnValueType\";\nimport { isAsyncIterable, isIterable } from \"./_internal/utils\";\nimport range from \"./Lazy/range\";\n\nfunction sync<T>(iterable: Iterable<T>, n: number) {\n  const iterator = iterable[Symbol.iterator]();\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const _ of range(0, n)) {\n    if (iterator.next().done) {\n      return;\n    }\n  }\n}\n\nasync function async<T>(iterable: AsyncIterable<T>, n: number) {\n  const iterator = iterable[Symbol.asyncIterator]();\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for await (const _ of range(0, n)) {\n    if ((await iterator.next()).done) {\n      return;\n    }\n  }\n}\n\n/**\n * Consumes the given number of Iterable/AsyncIterable. If the number is empty, all is consumed.\n *\n * @example\n * ```ts\n * const iterator = (function *(){\n *   yield 1;\n *   yield 2;\n *   yield 3;\n * })();\n * consume(iterator, 2);\n * iterator.next(); // {value:3, done:false}\n * iterator.next(); // {value:undefined, done:true}\n *\n * // with pipe\n * pipe(\n *   range(10),\n *   peek(updateApi),\n *   concurrent(5),\n *   consume,\n * );\n * ```\n */\nfunction consume<\n  A extends Iterable<unknown> | AsyncIterable<unknown>,\n  B extends number,\n>(iterator: A, n?: B): ReturnValueType<A, void>;\n\nfunction consume<A extends Iterable<unknown> | AsyncIterable<unknown>>(\n  iterable: A,\n  n = Infinity,\n) {\n  if (isIterable(iterable)) {\n    return sync(iterable, n);\n  }\n\n  if (isAsyncIterable(iterable)) {\n    return async(iterable, n);\n  }\n\n  throw new TypeError(\"'iterable' must be type of Iterable or AsyncIterable\");\n}\n\nexport default consume;\n"]}